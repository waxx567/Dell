Shark Drawing Program Documentation

Explanation of the Libraries Used:

The following libraries are used in the code:





cairo



math

Cairo is a 2D open-source graphics library that provides a device-independent vector graphics-based API. It is used for drawing shapes, text, and images in Python.

Math is a module used specifically for mathematical operations. It is used here to calculate the angles of arcs using pi.

Functions Used to Create Geometric Shapes:

The code then uses various cairo functions to create and draw an image of a simple shark shape:





context.rectangle(): Adds a closed sub-path rectangle of the given size to the current path at position (x , y ) in user-space coordinates.



context.curve_to(): Adds a cubic BÃ©zier spline to the path from the current point to position (x3 , y3 ) in user-space coordinates, using (x1 , y1 ) and (x2 , y2 ) as the control points.



context.move_to(): Begins a new sub-path - moves the current point to a new position.



context.line_to(): Adds a line to the path from the current point to position (x , y ) in user-space coordinates.



context.close_path(): Adds a line segment to the path from the current point to the beginning of the current sub-path, (the most recent point passed to cairo_move_to()), and closes this sub-path.



context.fill(): A drawing operator that fills the current path according to the current fill rule.



context.fill_preserve(): A drawing operator that fills the current path according to the current fill rule). fillPreserve() preserves the path within the cairo context while keeping it available for further operations, unlike context.fill(), which clears the path.



context.stroke(): A drawing operator that strokes the current path according to the current line width, line join, line cap, and dash settings.

context.arc(): Adds a circular arc of the given radius to the current path.

Summary of the Code: 

First, the program sets up a drawing environment. Then it adds a background color. Following that, it draws the shark's body, fins, eyes, gills, and mouth. Finally, the program exports the image from the surface and saves it to a file.

Detailed Python Program Walkthrough:

WIDTH, HEIGHT = 800, 400
surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, WIDTH, HEIGHT)
context = cairo.Context(surface)





WIDTH, HEIGHT = 800, 400: Defines the dimensions (in pixels) of the image to be created.



surface = cairo.ImageSurface(): An image surface (a container for the drawing) is created. This has the specified width, height, and color format.



context = cairo.Context(): A drawing context is created. This is used to perform drawing operations on the surface.

context.rectangle(0, 0, WIDTH, HEIGHT)
context.set_source_rgb(0.53, 0.81, 0.98)
context.fill()



context.rectangle(): Draws a rectangle from the top left corner to the specified width and height, covering the entire surface.



context.set_source_rgb(): Sets the color for filling the rectangle with the specified RGB values.



context.fill(): Fills the rectangle with the selected color.

context.set_source_rgb(0.6, 0.6, 0.6)
context.move_to(100, 200)
context.curve_to(200, 100, 600, 100, 700, 200)
context.curve_to(600, 300, 200, 300, 100, 200)
context.fill_preserve()
context.set_source_rgb(0, 0, 0)
context.stroke()



context.set_source_rgb(): Sets the fill color to gray.



context.move_to(): Moves the "pen" to the starting point without drawing anything.



context.curve_to(): Creates a cubic Bezier curve from the current position to the specified position with control points. This forms the upper part of the outline of the shark's body shape.



context.curve_to(): Creates another cubic Bezier curve to return to the starting point, forming a closed loop. This runs from the current position to the original starting position with control points and forms the lower part of the outline of the shark's body shape.



context.fill_preserve(): Fills the shape with the current color while preserving the path.



context.set_source_rgb(): Sets the stroke color.



context.stroke(): Outlines the shape with the current stroke color.

context.set_source_rgb(0.5, 0.5, 0.5)
context.move_to(700, 200)
context.line_to(750, 150)
context.line_to(750, 250)
context.close_path()
context.fill_preserve()
context.stroke()



context.set_source_rgb(): Sets the color for the next shape.



context.move_to(): Moves the "pen" to the specified coordinates without drawing anything.



context.line_to(): Draws a line from the current position to the specified point.



context.line_to(): Draws a line from the current position to the specified point.



context.close_path(): Closes the path by connecting to the starting point, completing the triangle.



context.fill_preserve(): Fills the shape with the current color while preserving the path.



context.stroke(): Outlines the shape with the current stroke color.



context.set_source_rgb(): Sets the color for the next shape.



The code above is then repeated with differing coordinates to draw a total of four triangles. The above code draws the dorsal fin.

context.set_source_rgb(0.5, 0.5, 0.5)
context.move_to(730, 200)
context.line_to(780, 170)
context.line_to(780, 230)
context.close_path()
context.fill_preserve()
context.stroke()



The above code descriptions are the same as the previous snippet with different coordinates. This draws the ventral fin.

context.move_to(350, 140)
context.line_to(400, 90)
context.line_to(450, 140)
context.close_path()
context.fill_preserve()
context.stroke()

context.move_to(350, 250)
context.line_to(400, 300)
context.line_to(450, 250)
context.close_path()
context.fill_preserve()
context.stroke()



The above code descriptions are the same as the previous snippet with different coordinates. This draws the two triangles that represent the tail.

context.set_source_rgb(0, 0, 0)
context.arc(180, 180, 15, 0, 2 * math.pi)
context.fill()

context.set_source_rgb(1, 1, 1)
context.arc(180, 180, 5, 0, 2 * math.pi)
context.fill()



context.set_source_rgb(): Sets the color for the next shape.



context.arc(): Draws a circle with center and radius. This draws a part of the shark's eye.



context.fill(): Fills the circle with the current color.



The first snippet draws the eye's outer circle and the second snippet draws the eye's pupil.

context.set_source_rgb(0, 0, 0)
for i in range(5):
    context.move_to(240 + i * 10, 210 + i * 5)
    context.line_to(260 + i * 10, 210 + i * 5)
    context.stroke()



The above loop sets a color and draws a series of horizontal lines. It moves the "pen" to a starting position and draws the lines with incremental spaces. These lines represent the shark's gills.

context.set_source_rgb(0, 0, 0)
context.arc(170, 200, 30, math.pi / 8, 7 * math.pi / 8)
context.stroke()



context.set_source_rgb(): Sets the color for the next shape.



context.arc(): Defines an arc that will form the shark's mouth.



context.stroke(): Draws the shark's mouth.

surface.write_to_png("shark.png")
print("saved as shark.png.")



surface.write_to_png(): Writes the contents of the surface (the drawn image) to a PNG file with the specified name.



print(): Prints a message confirming the image was saved.

Colors Used (HEX codes):

The program uses the following colors:





#87CFFA: Sky blue (used for background color)



#999999: Medium Gray (used for shark body color)



#000000: Black (used for outline and details)



#808080: Gray (used for both fins and tail)



#FFFFFF: White (used for eye highlight)

Geometric Shapes Used:

The program uses the following geometric shapes to create the shark image:





Rectangle: Used for the background.



Curves: Used for the shark body.



Triangles: Used for the shark's fins and tail.



Lines: Used for the shark's gills.



Arcs: Used for the shark's eye and mouth.



Circles: Used for the shark's eye and pupil.

These shapes are combined and positioned to create the final shark drawing.

Positioning of Colors and Shapes:

A blue rectangle is the background.

A medium gray shape is the shark's body, centered within the background.

A black line outlines the shark's body.

A black arc is the shark's mouth. It is placed near the bottom left of the shark's body.

A black circle with a white circle centered within is the shark's eye. It is placed near the top left of the shark's body.

Five staggered black lines are the gills. These are placed halfway between the shark's nose and the vertical midline of the shark's body in line with the mouth.

Two large isosceles triangles are used for the fins. One large isosceles triangle and one small isosceles triangle are used for the tail.

A large gray triangle with its vertex angle pointing upward is used for the dorsal fin. It is placed near the top of the shark's body along the vertical midline. 

A large gray triangle with its vertex angle pointing downward is used for the ventral fin. It is placed near the bottom of the shark's body along the vertical midline.

A large gray triangle and a small gray triangle are combined as described previously and placed touching the point of the shark's body opposite its nose.

The tail is comprised of the remaining large gray triangle and the small gray triangle. Both have their vertex angles pointing leftward.

The point of the large triangle's vertex angle is touching the rightmost point of the shark's body.

The point of the small triangle's vertex angle overlaps the large triangle on its right side. The overlap hides about one-third of the small triangle's area.

Summary:

Simple: The use of basic shapes and shading keeps the drawing clean.

Approachable: The drawing is easy for the audience to grasp and can be used as an educational tool to encourage programmatic drawing.

Accessible: The code is easy to read and understand. It does not require too much specialist knowledge to grasp.

Each shape is carefully positioned and sized to create a visually appealing shark drawing.