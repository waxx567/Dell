Shark Drawing Program Documentation

Explanation of the Libraries Used:

The following libraries are used in the code:





cairo 



math

Cairo is a 2D open-source graphics library that provides a vector graphics-based API that is device-independent. It is used for drawing shapes, text, and images in Python.

Math is a module used specifically for mathematical operations like calculating pi. It is used here to compute values like angles in radians.

Functions Used to Create Geometric Shapes:

The code then uses various cairo functions to create and draw an image of a simple shark shape:





context.rectangle():  Adds a closed sub-path rectangle of the given size to the current path at position (x , y ) in user-space coordinates.



context.curve_to(): Adds a cubic BÃ©zier spline to the path from the current point to position (x3 , y3 ) in user-space coordinates, using (x1 , y1 ) and (x2 , y2 ) as the control points.



context.move_to(): Begins a new sub-path - moves the current point to a new position. 



context.line_to(): Adds a line to the path from the current point to position (x , y ) in user-space coordinates.



context.close_path(): Adds a line segment to the path from the current point to the beginning of the current sub-path, (the most recent point passed to cairo_move_to()), and closes this sub-path.



context.fill(): A drawing operator that fills the current path according to the current fill rule.



context.stroke(): A drawing operator that strokes the current path according to the current line width, line join, line cap, and dash settings.



context.arc(): Adds a circular arc of the given radius to the current path.

Python Program Walkthrough:





WIDTH, HEIGHT = 800, 400: Defines the dimensions (in pixels) of the image to be created.



surface = cairo.ImageSurface(): An image surface (a container for the drawing) is created. This has the specified width and height, as well as a color format.



context = cairo.Context(): A drawing context is created. This is used to perform drawing operations on the surface.



context.rectangle(): Draws a rectangle from the top left corner to the specified width and height, covering the entire surface.



context.set_source_rgb(): Sets the color for filling the rectangle with the specified RGB values.



context.fill():  Fills the rectangle with the selected color.



context.set_source_rgb(): Sets the fill color to gray.



context.move_to(): Moves the "pen" to the starting point without drawing anything.



context.curve_to(): Creates a cubic Bezier curve from the current position to the specified position with control points. This forms the upper part of the outline of the shark's body shape.



context.curve_to(): Creates another cubic Bezier curve to return to the starting point, forming a closed loop. This runs from the current position to the original starting position with control points and forms the lower part of the outline of the shark's body shape.



context.fill_preserve(): Fills the shape with the current color while preserving the path.



context.set_source_rgb(): Sets the stroke color.



context.stroke(): Outlines the shape with the current stroke color.



context.set_source_rgb(): Sets the color for the next shape.



context.move_to(): Moves the "pen" to the specified coordinates without drawing anything.



context.line_to(): Draws a line from the current position to the specified point.



context.line_to(): Draws a line from the current position to the specified point.



context.close_path(): Closes the path by connecting to the starting point, completing the dorsal fin triangle.



context.fill_preserve(): Fills the shape with the current color while preserving the path.



context.stroke(): Outlines the shape with the current stroke color.



context.set_source_rgb(): Sets the color for the next shape.



context.move_to(): Moves the "pen" to the specified coordinates without drawing anything.



context.line_to(): Draws a line from the current position to the specified point.



context.line_to(): Draws a line from the current position to the specified point.



context.close_path(): Closes the path by connecting to the starting point, completing the ventral fin triangle.



context.fill_preserve(): Fills the shape with the current color while preserving the path.



context.stroke(): Outlines the shape with the current stroke color.



Saving the Picture:

The program saves the picture as a PNG file named "shark.png" using the surface.write_to_png() method. This method writes the contents of the surface to a PNG file.

Colors Used (HEX codes):

The program uses the following colors:





#87CFFA: Sky blue (used for background color)



#999999: Medium Gray (used for shark body color)



#000000: Black (used for outline and details)



#808080: Gray (used for both fins and tail)



#FFFFFF: White (used for eye highlight)

Geometric Shapes Used:

The program uses the following geometric shapes to create the shark image:





Rectangle: Used for the background.



Curves: Used for the shark body.



Triangles: Isosceles triangles of two different sizes are used. Three large and one small. 

The large ones have obtuse vertex angles and the small one has an acute vertex angle.

A large triangle with its vertex angle pointing upward is used for the dorsal fin. A large triangle with its vertex angle pointing downward is used for the ventral fin. 

The remaining large triangle has its vertex angle pointed leftward with the point of that vertex angle touching the rearmost point of the shark's body.

The small triangle has its vertex angle pointing leftward. It overlaps the left-facing large triangle's side opposite that is opposite the vertex angle by about one-third of its height. 



Lines: Used for the shark's gills.



Arcs: Used for the shark's eye and mouth.



Circles: Used for the shark's eye and pupil.

These shapes are combined and positioned to create the final shark drawing.

A blue rectangle is the background.

A medium gray boat shape comprised of two equal arcs is the shark's body.

A black outline outlines the shark's body.

A black arc is the shark's mouth. It is placed near the bottom left of the shark's body.

A black circle with a white circle centered within is the shark's eye. It is placed near the top left of the shark's body.

Five staggered black lines are the gills. These are placed halfway between the shark's nose and the vertical midline of the shark's body in line with the mouth.

A gray large triangle is the dorsal fin. It is placed near the top of the shark's body along the vertical midline.

A gray large triangle is the ventral fin. It is placed near the bottom of the shark's body along the vertical midline.

A large gray triangle and a small gray triangle are combined as described previously and placed touching the point of the shark's body opposite its nose.

In summation, the image is:

Simple: The use of basic shapes and shading keeps the drawing clean.

Approachable: The drawing is easy for the audience to grasp and can be used as an educational tool to encourage programmatic drawing.

Friendly: The illustration's use of a smile depicts the shark favorably, possibly destigmatizing the common myth that sharks are dangerous.

Each shape is carefully positioned and sized to create a visually appealing shark drawing.