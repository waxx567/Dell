#include <iostream>
#include <tuple>
using namespace std;

// tuples 

int main() {
    tuple <int, string> person(1, "John Doe");
    cout << get<0>(person) << endl;
    cout << get<1>(person) << endl;
    return 0;
}

#include <iostream>
#include <tuple>
using namespace std;

// changing elements in tuples 

int main() {
    tuple <int, string> person(1, "John Doe");
    cout << get<1>(person) << endl;
    get<1>(person) = "Jane Doe";
    cout << get<1>(person) << endl;
    return 0;
}

#include <iostream>
#include <tuple>
using namespace std;

// declare tuple and then add elements using make_tuple

int main() {
    tuple <int, string> person(1, "John Doe");
    cout << get<1>(person) << endl;
    get<1>(person) = "Jane Doe";
    cout << get<1>(person) << endl;

    tuple <int, char, bool, float> values;
    values = make_tuple(1, 'a', true, 3.14);
    cout << get<1>(values) << endl;
    cout << get<3>(values) << endl;

    return 0;
}

#include <iostream>
#include <tuple>
using namespace std;

// what you get if you declare but don't initialize

int main() {
    tuple <int, string> person(1, "John Doe");
    cout << get<1>(person) << endl;
    get<1>(person) = "Jane Doe";
    cout << get<1>(person) << endl;

    tuple <int, char, bool, float> values;
    // values = make_tuple(1, 'a', true, 3.14);
    cout << get<0>(values) << endl;
    cout << get<1>(values) << endl;
    cout << get<2>(values) << endl;
    cout << get<3>(values) << endl;

    return 0;
}

#include <iostream>
#include <tuple>
using namespace std;

// another way to initialize

int main() {
    tuple <int, string> person(1, "John Doe");
    cout << get<1>(person) << endl;
    get<1>(person) = "Jane Doe";
    cout << get<1>(person) << endl;

    tuple <int, char, bool, float> values = make_tuple(1, 'a', true, 3.14);
    cout << get<0>(values) << endl;
    cout << get<1>(values) << endl;
    cout << get<2>(values) << endl;
    cout << get<3>(values) << endl;

    return 0;
}

#include <iostream>
#include <tuple>
using namespace std;

// swapping the contents of a tuple

int main() {

    tuple <int, int> numbers(1, 2);
    cout << get<0>(numbers) << endl;
    cout << get<1>(numbers) << endl;
    swap(get<0>(numbers), get<1>(numbers));
    cout << get<0>(numbers) << endl;
    cout << get<1>(numbers) << endl;

    return 0;
}

#include <iostream>
#include <tuple>
using namespace std;

// swapping the contents of two tuples

int main() {

    tuple <int, int> numbers1(1, 2);
    tuple <int, int> numbers2(3, 4);
    cout << get<0>(numbers1) << endl;
    cout << get<1>(numbers1) << endl;
    cout << get<0>(numbers2) << endl;
    cout << get<1>(numbers2) << endl;
    numbers1.swap(numbers2);
    cout << get<0>(numbers1) << endl;
    cout << get<1>(numbers1) << endl;
    cout << get<0>(numbers2) << endl;
    cout << get<1>(numbers2) << endl;

    return 0;
}

#include <iostream>
#include <tuple>
using namespace std;

// decomposing tuples

int main() {

    tuple <int, int> numbers(1, 2);
    int x, y;
    tie(x, y) = numbers;
    cout << x << endl;
    cout << y << endl;

    return 0;
}