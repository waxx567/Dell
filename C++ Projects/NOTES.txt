helloworld.cpp

#include <iostream> // iostream is a header file that contains functions for basic input/output operations

int main() {
    std::cout << "I like cake!" << '\n';
    std::cout << "It's really good!" << std::endl; // endl is an endline character. Does the same as \n but also flushes the output buffer
    return 0;
}

// Introducing variables
int main() {
    
    int x; // Declaring a variable
    x = 5; // Assigning a value to a variable

    std::cout << x;

    return 0;
}

int main() {
    
    int x = 5;
    int y = 6;
    int sum = x + y;

    std::cout << x << '\n';
    std::cout << y << '\n';
    std::cout << sum << '\n';

    return 0;
}

int main() {
    
    // int is a whole number
    int weeks = 6;
    int days = 7.5; // would output 7 (the value is truncated)

    // double is a decimal
    double pi = 3.14159;

    // char is a character
    char grade = 'A';
    char currency = '$';
    // If you tried
    char initials = 'WPM'; // you'd get an overflow error and only output the last character - M in this case

    //bool is a boolean
    bool power = true; // if the power is on

    // string is a collection of characters
    std::string name = "Wayne";
    std::string address = "666 Wayne Manor"

    return 0;
}

int main() {
    
    // The const keyword specifies that a variable's value is constant
    // tells the compiler to prevent anything from modifying it
    // (read-only)

    // Create a program to calculate the circumference of a circle
    double pi = 3.14159;
    double radius = 10;
    double circumference = 2 * pi * radius;

    std::cout << circumference << "cm";

    // All good but if someone changes the value of pi it will break the program

    return 0;
}

int main() {
    
    // The const keyword specifies that a variable's value is constant
    // tells the compiler to prevent anything from modifying it
    // (read-only)

    // Create a program to calculate the circumference of a circle
    double pi = 3.14159;
    // All good but if someone changes the value of pi it will change the result of the program
    pi = 420.69;
    double radius = 10;
    double circumference = 2 * pi * radius;

    std::cout << circumference << "cm";

    return 0;
}

int main() {
    
    // The const keyword specifies that a variable's value is constant
    // tells the compiler to prevent anything from modifying it
    // (read-only)

    // Create a program to calculate the circumference of a circle
    const double PI = 3.14159;
    PI = 420.69;
    double radius = 10;
    double circumference = 2 * PI * radius;

    std::cout << circumference << "cm";

    // Adding const will throw an error because the value of PI is constant

    return 0;
}

int main() {
    
    const double PI = 3.14159;
    const int LIGHT_SPEED = 299792458;
    const int WIDTH = 1920;
    const int HEIGHT = 1080;

    return 0;
}

#include <iostream> 

namespace first {
    int x = 1;
}
namespace second {
    int x = 2;
}

int main() {
    
    // Namespace provides a solution for preventing name conflicts
    // in large projects. Each entity needs a unique name.
    // A namespace allows for identically named entities 
    // as long as the namespaces are different.

    int x = 0;

    std::cout << x; // outputs 0
    std::cout << first::x; // outputs 1
    std::cout << second::x; // outputs 2

    return 0;
}

and 

int main() {
    
    using namespace first;

    std::cout << x; // outputs 1

    return 0;
}

and 

int main() {
    
    using namespace first;

    std::cout << second::x; // outputs 2

    return 0;
}

// The following saves some repetition
int main() {
    
    using std::cout;
    using std::string;

    string name = "Wayne";
    cout << name;

    return 0;
}
// use this rather than `using namespace std;` as the risk of conflicts is minimized.

typedef
#include <iostream> 
#include <vector>

typedef std::vector<std::pair<std::string, int>> pairlist_t;

int main() {
    
    // typedef = reserved keyword used to create an additional name
    //           (alias) for another data type.
    //           New identifier for an existing data type.
    //           Helps with readability and reduces typos.

    // so
    // std::vector<std::pair<std::string, int>> pairlist;
    // becomes
    pairlist_t pairlist;

    return 0;
}

or something simpler looks like this#include <iostream> 
#include <vector>

typedef std::string text_t;

int main() {
    
    text_t firstName = "Wayne";

    return 0;
}
// Use when there is a clear benefit
// typedef has largely been replaced with the 'using' keyword
// as 'using' works better with templates
//as in
#include <iostream> 
#include <vector>

using text_t = std::string;
using number_t = int;

int main() {
    
    text_t firstName = "Wayne";
    number_t age = 21;

    return 0;
}

int main() {
    
    // aritmetic operators = return the result of a specific
    //                       mathematical operation
    //                       such as addition, subtraction,
    //                       multiplication, division, etc.
    int student = 20;

    return 0;
}

int main() {
    
    // type conversion = converting one data type to another
    //                   implicit = automatic
    //                   explicit = precede value with new data type

    double x = (int) 3.14; // x = 3
    int y = int(3.14); // 3.14 -> 3

    // implicit
    char c = 100; // c = d
    int z = 'd'; // z = 100

    // explicit
    std::cout << (char) 100 << '\n'; // d
    std::cout << (int) 'd' << '\n'; // 100

    return 0;
}

int main() {
    
    // calculate how many questions a student gets right
    // out of the total number of questions

    int correct = 8;
    int questions = 10;
    double percent = correct / questions * 100;

    std::cout << percent << "%"; // outputs 0% because the int data type truncates the value

    // this won't work because the output is a double
    // std::cout << correct / questions * 100 << "%";

    return 0;
}

int main() {
    
    // calculate how many questions a student gets right
    // out of the total number of questions

    int correct = 8;
    int questions = 10;
    // so you can explicitly cast questions as a double
    double percent = correct / (double) questions * 100;

    std::cout << percent << "%"; // outputs 80%

    return 0;
}

int main() {
    
    // accepting user input
    // cout << (insertion operator)
    // cin >> (extraction operator)
    std::string name;
    std::cout << "Enter your name: ";
    std::cin >> name;
    std::cout << "Hello, " << name << "!" << std::endl;

    return 0;
}

int main() {
    
    // accepting user input
    // cout << (insertion operator)
    // cin >> (extraction operator)
    std::string name;
    int age;

    std::cout << "Enter your name: ";
    std::cin >> name;

    std::cout << "How old are you? ";
    std::cin >> age;

    std::cout << "Hello, " << name << "!" << std::endl;
    std::cout << "You are " << age << " years old." << std::endl;

    return 0;
}

int main() {
    
    // accepting user input
    // if you type a string that has spaces, it will stop reading the string at the first space
    std::string name;
    int age;

    std::cout << "Enter your full name: ";
    std::getline(std::cin, name);

    std::cout << "How old are you? ";
    std::cin >> age;

    std::cout << "Hello, " << name << "!" << std::endl;
    std::cout << "You are " << age << " years old." << std::endl;

    return 0;
}

int main() {
    
    // accepting user input
    std::string name;
    int age;

    // there is an issue with getline
    // say the age block comes before the name block
    // the name block will be empty

    std::cout << "How old are you? ";
    std::cin >> age;

    std::cout << "Enter your full name: ";
    std::getline(std::cin, name);

    std::cout << "Hello, " << name << "!" << std::endl;
    std::cout << "You are " << age << " years old." << std::endl;

    return 0;
}

int main() {
    
    // accepting user input
    std::string name;
    int age;

    // if you accept some input with cin followed by getline will break
    // std::getline(std::cin, name); because there's a \n newline character in our input buffer
    // std::cin >> age; \n 

    std::cout << "How old are you? ";
    std::cin >> age;

    std::cout << "Enter your full name: ";
    std::getline(std::cin, name);

    std::cout << "Hello, " << name << "!" << std::endl;
    std::cout << "You are " << age << " years old." << std::endl;

    return 0;
}

int main() {
    
    // accepting user input
    std::string name;
    int age;

    // to prevent that problem

    std::cout << "How old are you? ";
    std::cin >> age;

    std::cout << "Enter your full name: ";
    // modify this line (ws for whitespace)
    std::getline(std::cin >> std::ws, name);

    std::cout << "Hello, " << name << "!" << std::endl;
    std::cout << "You are " << age << " years old." << std::endl;

    return 0;
}

useful math-related functions

int main() {
    
    double x = 3;
    double y = 4;
    double z;

    // z = std::max(x, y); // z = 4
    // z = std::min(x, y); // z = 3

    std::cout << z;

    return 0;
}

#include <iostream>
#include <cmath>

int main() {
    
    double x = 3;
    double y = 4;
    double z;
    
    // z = pow(2, 3); // z = 8
    // z = pow(2, 4); // z = 16
    // z = sqrt(9); // z = 3
    // z = abs(-3); // z = 3

    std::cout << z;

    return 0;
}

#include <iostream>
#include <cmath>

int main() {
    
    double x = 3.14;
    double y = 4;
    double z;
    
    // z = round(x); // z = 3
    // z = ceil(x); // z = 4
    // z = floor(x); // z = 3
    // z = trunc(x); // z = 3

    std::cout << z;

    return 0;
}
Many more math functions at:
www.cplusplus.com/reference/cmath/

#include <iostream>
#include <cmath>

int main() {
    
    // calculate the hypotenuse of a right triangle
    double a;
    double b;
    double c;
    // solution: c is the square root of a squared + b squared

    std::cout << "Enter the length of side a: ";
    std::cin >> a;

    std::cout << "Enter the length of side b: ";
    std::cin >> b;

    a = pow(a, 2);
    b = pow(b, 2);
    c = sqrt(a + b);

    std::cout << "The length of the hypotenuse is: " << c << std::endl;


    return 0;
}

or

#include <iostream>
#include <cmath>

int main() {
    
    // calculate the hypotenuse of a right triangle
    double a;
    double b;
    double c;
    // solution: c is the square root of a squared + b squared

    std::cout << "Enter the length of side a: ";
    std::cin >> a;

    std::cout << "Enter the length of side b: ";
    std::cin >> b;

    c = sqrt(pow(a, 2) + pow(b, 2));

    std::cout << "The length of the hypotenuse is: " << c << std::endl;


    return 0;
}

int main() {
    
    // if statements = do something if a condition is true
    //                 or do nothing if false

    int age;

    std::cout << "Enter your age: ";
    std::cin >> age;

    if (age >= 18) {
        std::cout << "You are an adult." << std::endl;
    }

    return 0;
}

int main() {
    
    // if statements = do something if a condition is true
    //                 or do something else if false

    int age;

    std::cout << "Enter your age: ";
    std::cin >> age;

    if (age >= 18) {
        std::cout << "You are an adult." << std::endl;
    }
    else {
        std::cout << "You are a child." << std::endl;
    }   

    return 0;
}

int main() {
    
    // if statements = do something if a condition is true
    //                 do something else if another condition is true
    //                 or do something else if both are false

    int age;

    std::cout << "Enter your age: ";
    std::cin >> age;

    if (age >= 18) {
        std::cout << "You are an adult." << std::endl;
    }
    else if (age >= 13) {
        std::cout << "You are a teenager." << std::endl;
    }
    else {
        std::cout << "You are a child." << std::endl;
    }   

    return 0;
}

#include <iostream>

int main() {
    
    // switch = alternative to using multiple if statements
    //          allows for multiple conditions to be tested
    //          instead of testing one condition at a time
    //          if (month == 1) { ... } else if (month == 2) { ... } etc. would be redundant

    int month;

    std::cout << "Enter the number of the month: ";
    std::cin >> month;

    switch (month) {
        case 1:
            std::cout << "It is January" << std::endl;
            break;
        case 2:
            std::cout << "It is February" << std::endl;
            break;
        case 3:
            std::cout << "It is March" << std::endl;
            break; 
        case 4:
            std::cout << "It is April" << std::endl;
            break;
        case 5:
            std::cout << "It is May" << std::endl;
            break;
        case 6:
            std::cout << "It is June" << std::endl;
            break;
        case 7:
            std::cout << "It is July" << std::endl;
            break;
        case 8:
            std::cout << "It is August" << std::endl;
            break;
        case 9:
            std::cout << "It is September" << std::endl;
            break;
        case 10:
            std::cout << "It is October" << std::endl;
            break;
        case 11:
            std::cout << "It is November" << std::endl;
            break;
        case 12:
            std::cout << "It is December" << std::endl;
            break;
    }

    return 0;
}

#include <iostream>

int main() {
    
    // switch = alternative to using multiple if statements
    //          allows for multiple conditions to be tested
    //          instead of testing one condition at a time
    //          if (month == 1) { ... } else if (month == 2) { ... } etc. would be redundant in this case

    // switch is similar to a series of if statements

    int month;

    std::cout << "Enter the number of the month: ";
    std::cin >> month;

    switch (month) {
        case 1:
            std::cout << "It is January" << std::endl;
            break;
        case 2:
            std::cout << "It is February" << std::endl;
            break;
        case 3:
            std::cout << "It is March" << std::endl;
            break; 
        case 4:
            std::cout << "It is April" << std::endl;
            break;
        case 5:
            std::cout << "It is May" << std::endl;
            break;
        case 6:
            std::cout << "It is June" << std::endl;
            break;
        case 7:
            std::cout << "It is July" << std::endl;
            break;
        case 8:
            std::cout << "It is August" << std::endl;
            break;
        case 9:
            std::cout << "It is September" << std::endl;
            break;
        case 10:
            std::cout << "It is October" << std::endl;
            break;
        case 11:
            std::cout << "It is November" << std::endl;
            break;
        case 12:
            std::cout << "It is December" << std::endl;
            break;
        default:
            std::cout << "Invalid month number" << std::endl;
            break;
    }

    return 0;
}

#include <iostream>

int main() {
    
    // switch = another example

    char grade;

    std::cout << "Enter your grade: ";
    std::cin >> grade;

    switch (grade) {
        case 'A':
            std::cout << "You got an A!" << std::endl;
            break;
        case 'B':
            std::cout << "You got a B!" << std::endl;
            break;
        case 'C':
            std::cout << "You got a C!" << std::endl;
            break;
        case 'D':
            std::cout << "You got a D!" << std::endl;
            break;
        case 'F':
            std::cout << "You got an F!" << std::endl;
            break;
        default:
            std::cout << "Invalid grade!" << std::endl;
            break;
    }

    return 0;
}

#include <iostream>

int main() {

    // using switch
    
    char op;
    double num1;
    double num2;
    double result;

    std::cout << "********** CALCULATOR **********\n";

    std::cout << "Enter one of (+ - * /): ";
    std::cin >> op;

    std::cout << "Enter #1: ";
    std::cin>> num1;
    
    std::cout << "Enter #2: ";
    std::cin>> num2;

    switch (op)
    {
        case '+':
            result = num1 + num2;
            std::cout << "Result: " << result << std::endl;
            break;
        case '-':
            result = num1 - num2;
            std::cout << "Result: " << result << std::endl;
            break;
        case '*':
            result = num1 * num2;
            std::cout << "Result: " << result << std::endl;
            break;
        case '/':
            result = num1 / num2;
            std::cout << "Result: " << result << std::endl;
            break;
        default:
            std::cout << "Invalid operator" << std::endl;
            break;
    }

    std::cout << "********************************\n";

    return 0;
}

#include <iostream>

int main() {

    // ternary operator ?: = replacement to an if/else statement
    // condition ? expression1 : expression2

    int grade = 75;

    // instead of this

    if (grade >= 60)
    {
        std::cout << "You passed!";
    }
    else
    {
        std::cout << "You failed!";
    }
    
    return 0;
}

#include <iostream>

int main() {

    // ternary operator ?: = replacement to an if/else statement
    // condition ? expression1 : expression2

    int grade = 75;

    // do this

    grade >= 60 ? std::cout << "You passed!" : std::cout << "You failed!";
    
    return 0;
}

#include <iostream>

int main() {

    // ternary operator ?: = replacement to an if/else statement
    // condition ? expression1 : expression2

    // int grade = 75;
    // grade >= 60 ? std::cout << "You passed!" : std::cout << "You failed!";

    int number = 6;
    number % 2 == 0 ? std::cout << "Number is even" : std::cout << "Number is odd";
    
    return 0;
}

#include <iostream>

int main() {

    // ternary operator ?: = replacement to an if/else statement
    // condition ? expression1 : expression2

    // int grade = 75;
    // grade >= 60 ? std::cout << "You passed!" : std::cout << "You failed!";

    int number = 6;
    number % 2 ? std::cout << "Number is odd" : std::cout << "Number is even";
    
    return 0;
}

#include <iostream>

int main() {

    // ternary operator ?: = replacement to an if/else statement
    // condition ? expression1 : expression2

    // int grade = 75;
    // grade >= 60 ? std::cout << "You passed!" : std::cout << "You failed!";

    // int number = 6;
    // number % 2 ? std::cout << "Number is odd" : std::cout << "Number is even";

    bool hungry = true;
    hungry ? std::cout << "I'm hungry" : std::cout << "I'm full";
    
    return 0;
}

#include <iostream>

int main() {

    // ternary operator ?: = replacement to an if/else statement
    // condition ? expression1 : expression2

    // int grade = 75;
    // grade >= 60 ? std::cout << "You passed!" : std::cout << "You failed!";

    // int number = 6;
    // number % 2 ? std::cout << "Number is odd" : std::cout << "Number is even";

    bool hungry = true;
    // hungry ? std::cout << "I'm hungry" : std::cout << "I'm full";
    // or
    std::cout << (hungry ? "I'm hungry" : "I'm full");
    
    return 0;
}

#include <iostream>

int main() {

    // && = checks if both conditions are true
    // || = checks if either condition is true
    // ! = checks if the condition is false

    int temp;

    std::cout << "Enter the temperature: ";
    std::cin >> temp;

    if (temp >= 100 && temp <= 200) {
        std::cout << "It's hot!" << std::endl;
    }
    else if (temp >= 0 && temp <= 100) {
        std::cout << "It's warm!" << std::endl;
    }
    else if (temp >= -100 && temp <= 0) {
        std::cout << "It's cold!" << std::endl;
    }
    
    return 0;
}

#include <iostream>

int main() {

    // && = checks if both conditions are true
    // || = checks if either condition is true
    // ! = checks if the condition is false

    int temp;

    std::cout << "Enter the temperature: ";
    std::cin >> temp;

    if (temp <= 0 || temp >= 30) {
        std::cout << "The temperature is bad" << std::endl;
    }
    else {
        std::cout << "The temperature is good" << std::endl;
    }
    
    return 0;
}

#include <iostream>

int main() {

    // && = checks if both conditions are true
    // || = checks if either condition is true
    // ! = checks if the condition is false

    bool sunny = true;

    if (!sunny) {
        std::cout << "It's cloudy" << std::endl;
    }
    else {
        std::cout << "It's sunny" << std::endl;
    }
    
    return 0;
}

#include <iostream>

int main() {

    // create a temperature converter

    double temp;
    char unit;

    std::cout << "Enter the temperature: ";
    std::cin >> temp;

    std::cout << "Enter the unit: ";
    std::cin >> unit;

    if (unit == 'C' || unit == 'c') {
        temp = temp * 1.8 + 32;
        std::cout << temp << "F";
    }
    else if (unit == 'F' || unit == 'f') {    
        temp = (temp - 32) / 1.8;
        std::cout << temp << "C";
    }
    else {
        std::cout << "Invalid unit";
    }
    
    return 0;
}

#include <iostream>

int main() {

    // useful string methods
    std::string name;
    
    std::cout << "Enter your name: ";
    std::getline(std::cin, name);

    // name.length(); // returns the number of characters in the string
    // name.empty(); // returns true if the string is empty, false if not
    // name.find(" "); // returns the index of the first space in the string

    if (name.length() > 16)
    {
        std::cout << "Your name is too long" << std::endl;
    }
    else
    {
        std::cout << "Welcome, " << name << "." << std::endl;
    }
    
    
    return 0;
}

#include <iostream>

int main() {

    // useful string methods
    std::string name;
    
    std::cout << "Enter your name: ";
    std::getline(std::cin, name);

    // name.length(); // returns the number of characters in the string
    // name.empty(); // returns true if the string is empty, false if not
    // name.find(" "); // returns the index of the first space in the string

    if (name.empty())
    {
        std::cout << "Your name is empty" << std::endl;
    }
    else
    {
        std::cout << "Welcome, " << name << "." << std::endl;
    }
    
    
    return 0;
}

#include <iostream>

int main() {

    // useful string methods
    std::string name;
    
    std::cout << "Enter your name: ";
    std::getline(std::cin, name);

    // name.length(); // returns the number of characters in the string
    // name.empty(); // returns true if the string is empty, false if not
    // name.find(" "); // returns the index of the first space in the string

    if (name.find(" ") != std::string::npos)
    {
        std::cout << "Invalid name" << std::endl;
    }
    else
    {
        std::cout << "Welcome, " << name << "." << std::endl;
    }
    
    return 0;
}

#include <iostream>

int main() {

    // useful string methods
    std::string name;
    
    std::cout << "Enter your name: ";
    std::getline(std::cin, name);

    // name.length(); // returns the number of characters in the string
    // name.empty(); // returns true if the string is empty, false if not
    // name.find(" "); // returns the index of the first space in the string
    // name.clear(); // clears the string

    std::string name;
    
    std::cout << "Enter your name: ";
    std::getline(std::cin, name);

    name.clear();

    std::cout << "Hello " << name << "!" << std::endl;

    return 0;
}

#include <iostream>

int main() {

    // useful string methods
    std::string name;
    
    std::cout << "Enter your name: ";
    std::getline(std::cin, name);

    //name.append(" "); // adds a space to the end of the string

    name.append("@gmail.com");

    std::cout << "Your email is: " << name << std::endl;

    return 0;
}

#include <iostream>

int main() {

    // useful string methods
    std::string name;
    
    std::cout << "Enter your name: ";
    std::getline(std::cin, name);

    // name.at() returns the character at the specified index

    std::cout << "Your initial is: " << name.at(0) << std::endl;
    
    return 0;
}

#include <iostream>

int main() {

    // useful string methods
    std::string name;
    
    std::cout << "Enter your name: ";
    std::getline(std::cin, name);

    // name.insert(0, "Hello, "); // insert a string at a specific index
    // name.erase(0, 5); // erase a string at a specific index
    std::cout << name << std::endl;

    return 0;
}
More string things at:
www.cplusplus.com/reference/string/string/

#include <iostream>

int main() {

    // while loops = execute a block of code as long as a condition is true

    std::string name;

    while (name.empty())
    {
        std::cout << "Enter your name: ";
        std::getline(std::cin, name);
    }

    std::cout << "Hello, " << name << "!" << std::endl;
    

    return 0;
}

#include <iostream>

int main() {

    // do while loop = executes a block of code repeatedly
    //                  as long as a condition is true

    int number;
    
    do {
        std::cout << "Enter a positive number: ";
        std::cin >> number;
    } while (number < 0);
    
    std::cout << "The number is: " << number << std::endl;

    return 0;
}

#include <iostream>

int main() {

    // for loop = executes a block of code a specified number of times
    //            can use a counter variable to keep track of how many times the loop has run 

    for (int i = 1; i <= 3; i++) {
        std::cout << "HAPPY!" << std::endl;
    }

    return 0;
}

#include <iostream>

int main() {

    // for loop = executes a block of code a specified number of times
    //            can use a counter variable to keep track of how many times the loop has run 

    for (int i = 1; i <= 10; i++) {
        std::cout << i << std::endl;
    }

    return 0;
}

#include <iostream>

int main() {

    // for loop = executes a block of code a specified number of times
    //            can use a counter variable to keep track of how many times the loop has run 

    for (int i = 1; i <= 20; i+=2) {
        std::cout << i << std::endl;
    }

    return 0;
}

#include <iostream>

int main() {

    // for loop = executes a block of code a specified number of times
    //            can use a counter variable to keep track of how many times the loop has run 

    for (int i = 10; i >= 1; i--) {
        std::cout << i << std::endl;
    }
    std::cout << "HAPPY NEW YEAR!" << std::endl;

    return 0;
}

#include <iostream>

int main() {

    // break = used to exit a loop
    // continue = used to skip an iteration of a loop

    for (int i = 1; i <= 20; i++) {
        if (i == 13)
        {
            break;
        }
        
        std::cout << i << std::endl;
    }

    return 0;
}

#include <iostream>

int main() {

    // break = used to exit a loop
    // continue = used to skip an iteration of a loop

    for (int i = 1; i <= 20; i++) {
        if (i == 13)
        {
            continue;
        }
        
        std::cout << i << std::endl;
    }

    return 0;
}

#include <iostream>

int main() {

    // nested loops = a loop within a loop
    // outer loop = the loop that contains the inner loop
    // inner loop = the loop that is contained within the outer loop

    for (int i = 1; i <= 3; i++) {
        for (int j = 1; j <= 3; j++) {
            std::cout << i << " " << j;
        }
    }

    return 0;
}