helloworld.cpp

#include <iostream> // iostream is a header file that contains functions for basic input/output operations

int main() {
    std::cout << "I like cake!" << '\n';
    std::cout << "It's really good!" << std::endl; // endl is an endline character. Does the same as \n but also flushes the output buffer
    return 0;
}

// Introducing variables
int main() {
    
    int x; // Declaring a variable
    x = 5; // Assigning a value to a variable

    std::cout << x;

    return 0;
}

int main() {
    
    int x = 5;
    int y = 6;
    int sum = x + y;

    std::cout << x << '\n';
    std::cout << y << '\n';
    std::cout << sum << '\n';

    return 0;
}

int main() {
    
    // int is a whole number
    int weeks = 6;
    int days = 7.5; // would output 7 (the value is truncated)

    // double is a decimal
    double pi = 3.14159;

    // char is a character
    char grade = 'A';
    char currency = '$';
    // If you tried
    char initials = 'WPM'; // you'd get an overflow error and only output the last character - M in this case

    //bool is a boolean
    bool power = true; // if the power is on

    // string is a collection of characters
    std::string name = "Wayne";
    std::string address = "666 Wayne Manor"

    return 0;
}

int main() {
    
    // The const keyword specifies that a variable's value is constant
    // tells the compiler to prevent anything from modifying it
    // (read-only)

    // Create a program to calculate the circumference of a circle
    double pi = 3.14159;
    double radius = 10;
    double circumference = 2 * pi * radius;

    std::cout << circumference << "cm";

    // All good but if someone changes the value of pi it will break the program

    return 0;
}

int main() {
    
    // The const keyword specifies that a variable's value is constant
    // tells the compiler to prevent anything from modifying it
    // (read-only)

    // Create a program to calculate the circumference of a circle
    double pi = 3.14159;
    // All good but if someone changes the value of pi it will change the result of the program
    pi = 420.69;
    double radius = 10;
    double circumference = 2 * pi * radius;

    std::cout << circumference << "cm";

    return 0;
}

int main() {
    
    // The const keyword specifies that a variable's value is constant
    // tells the compiler to prevent anything from modifying it
    // (read-only)

    // Create a program to calculate the circumference of a circle
    const double PI = 3.14159;
    PI = 420.69;
    double radius = 10;
    double circumference = 2 * PI * radius;

    std::cout << circumference << "cm";

    // Adding const will throw an error because the value of PI is constant

    return 0;
}

int main() {
    
    const double PI = 3.14159;
    const int LIGHT_SPEED = 299792458;
    const int WIDTH = 1920;
    const int HEIGHT = 1080;

    return 0;
}

#include <iostream> 

namespace first {
    int x = 1;
}
namespace second {
    int x = 2;
}

int main() {
    
    // Namespace provides a solution for preventing name conflicts
    // in large projects. Each entity needs a unique name.
    // A namespace allows for identically named entities 
    // as long as the namespaces are different.

    int x = 0;

    std::cout << x; // outputs 0
    std::cout << first::x; // outputs 1
    std::cout << second::x; // outputs 2

    return 0;
}

and 

int main() {
    
    using namespace first;

    std::cout << x; // outputs 1

    return 0;
}

and 

int main() {
    
    using namespace first;

    std::cout << second::x; // outputs 2

    return 0;
}

// The following saves some repetition
int main() {
    
    using std::cout;
    using std::string;

    string name = "Wayne";
    cout << name;

    return 0;
}
// use this rather than `using namespace std;` as the risk of conflicts is minimized.

typedef
#include <iostream> 
#include <vector>

typedef std::vector<std::pair<std::string, int>> pairlist_t;

int main() {
    
    // typedef = reserved keyword used to create an additional name
    //           (alias) for another data type.
    //           New identifier for an existing data type.
    //           Helps with readability and reduces typos.

    // so
    // std::vector<std::pair<std::string, int>> pairlist;
    // becomes
    pairlist_t pairlist;

    return 0;
}

or something simpler looks like this#include <iostream> 
#include <vector>

typedef std::string text_t;

int main() {
    
    text_t firstName = "Wayne";

    return 0;
}
// Use when there is a clear benefit
// typedef has largely been replaced with the 'using' keyword
// as 'using' works better with templates
//as in
#include <iostream> 
#include <vector>

using text_t = std::string;
using number_t = int;

int main() {
    
    text_t firstName = "Wayne";
    number_t age = 21;

    return 0;
}

int main() {
    
    // aritmetic operators = return the result of a specific
    //                       mathematical operation
    //                       such as addition, subtraction,
    //                       multiplication, division, etc.
    int student = 20;

    return 0;
}