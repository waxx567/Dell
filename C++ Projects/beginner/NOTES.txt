helloworld.cpp

#include <iostream> // iostream is a header file that contains functions for basic input/output operations

int main() {
    std::cout << "I like cake!" << '\n';
    std::cout << "It's really good!" << std::endl; // endl is an endline character. Does the same as \n but also flushes the output buffer
    return 0;
}

// Introducing variables
int main() {
    
    int x; // Declaring a variable
    x = 5; // Assigning a value to a variable

    std::cout << x;

    return 0;
}

int main() {
    
    int x = 5;
    int y = 6;
    int sum = x + y;

    std::cout << x << '\n';
    std::cout << y << '\n';
    std::cout << sum << '\n';

    return 0;
}

int main() {
    
    // int is a whole number
    int weeks = 6;
    int days = 7.5; // would output 7 (the value is truncated)

    // double is a decimal
    double pi = 3.14159;

    // char is a character
    char grade = 'A';
    char currency = '$';
    // If you tried
    char initials = 'WPM'; // you'd get an overflow error and only output the last character - M in this case

    //bool is a boolean
    bool power = true; // if the power is on

    // string is a collection of characters
    std::string name = "Wayne";
    std::string address = "666 Wayne Manor"

    return 0;
}

int main() {
    
    // The const keyword specifies that a variable's value is constant
    // tells the compiler to prevent anything from modifying it
    // (read-only)

    // Create a program to calculate the circumference of a circle
    double pi = 3.14159;
    double radius = 10;
    double circumference = 2 * pi * radius;

    std::cout << circumference << "cm";

    // All good but if someone changes the value of pi it will break the program

    return 0;
}

int main() {
    
    // The const keyword specifies that a variable's value is constant
    // tells the compiler to prevent anything from modifying it
    // (read-only)

    // Create a program to calculate the circumference of a circle
    double pi = 3.14159;
    // All good but if someone changes the value of pi it will change the result of the program
    pi = 420.69;
    double radius = 10;
    double circumference = 2 * pi * radius;

    std::cout << circumference << "cm";

    return 0;
}

int main() {
    
    // The const keyword specifies that a variable's value is constant
    // tells the compiler to prevent anything from modifying it
    // (read-only)

    // Create a program to calculate the circumference of a circle
    const double PI = 3.14159;
    PI = 420.69;
    double radius = 10;
    double circumference = 2 * PI * radius;

    std::cout << circumference << "cm";

    // Adding const will throw an error because the value of PI is constant

    return 0;
}

int main() {
    
    const double PI = 3.14159;
    const int LIGHT_SPEED = 299792458;
    const int WIDTH = 1920;
    const int HEIGHT = 1080;

    return 0;
}

#include <iostream> 

namespace first {
    int x = 1;
}
namespace second {
    int x = 2;
}

int main() {
    
    // Namespace provides a solution for preventing name conflicts
    // in large projects. Each entity needs a unique name.
    // A namespace allows for identically named entities 
    // as long as the namespaces are different.

    int x = 0;

    std::cout << x; // outputs 0
    std::cout << first::x; // outputs 1
    std::cout << second::x; // outputs 2

    return 0;
}

and 

int main() {
    
    using namespace first;

    std::cout << x; // outputs 1

    return 0;
}

and 

int main() {
    
    using namespace first;

    std::cout << second::x; // outputs 2

    return 0;
}

// The following saves some repetition
int main() {
    
    using std::cout;
    using std::string;

    string name = "Wayne";
    cout << name;

    return 0;
}
// use this rather than `using namespace std;` as the risk of conflicts is minimized.

typedef
#include <iostream> 
#include <vector>

typedef std::vector<std::pair<std::string, int>> pairlist_t;

int main() {
    
    // typedef = reserved keyword used to create an additional name
    //           (alias) for another data type.
    //           New identifier for an existing data type.
    //           Helps with readability and reduces typos.

    // so
    // std::vector<std::pair<std::string, int>> pairlist;
    // becomes
    pairlist_t pairlist;

    return 0;
}

or something simpler looks like this#include <iostream> 
#include <vector>

typedef std::string text_t;

int main() {
    
    text_t firstName = "Wayne";

    return 0;
}
// Use when there is a clear benefit
// typedef has largely been replaced with the 'using' keyword
// as 'using' works better with templates
//as in
#include <iostream> 
#include <vector>

using text_t = std::string;
using number_t = int;

int main() {
    
    text_t firstName = "Wayne";
    number_t age = 21;

    return 0;
}

int main() {
    
    // aritmetic operators = return the result of a specific
    //                       mathematical operation
    //                       such as addition, subtraction,
    //                       multiplication, division, etc.
    int student = 20;

    return 0;
}

int main() {
    
    // type conversion = converting one data type to another
    //                   implicit = automatic
    //                   explicit = precede value with new data type

    double x = (int) 3.14; // x = 3
    int y = int(3.14); // 3.14 -> 3

    // implicit
    char c = 100; // c = d
    int z = 'd'; // z = 100

    // explicit
    std::cout << (char) 100 << '\n'; // d
    std::cout << (int) 'd' << '\n'; // 100

    return 0;
}

int main() {
    
    // calculate how many questions a student gets right
    // out of the total number of questions

    int correct = 8;
    int questions = 10;
    double percent = correct / questions * 100;

    std::cout << percent << "%"; // outputs 0% because the int data type truncates the value

    // this won't work because the output is a double
    // std::cout << correct / questions * 100 << "%";

    return 0;
}

int main() {
    
    // calculate how many questions a student gets right
    // out of the total number of questions

    int correct = 8;
    int questions = 10;
    // so you can explicitly cast questions as a double
    double percent = correct / (double) questions * 100;

    std::cout << percent << "%"; // outputs 80%

    return 0;
}

int main() {
    
    // accepting user input
    // cout << (insertion operator)
    // cin >> (extraction operator)
    std::string name;
    std::cout << "Enter your name: ";
    std::cin >> name;
    std::cout << "Hello, " << name << "!" << std::endl;

    return 0;
}

int main() {
    
    // accepting user input
    // cout << (insertion operator)
    // cin >> (extraction operator)
    std::string name;
    int age;

    std::cout << "Enter your name: ";
    std::cin >> name;

    std::cout << "How old are you? ";
    std::cin >> age;

    std::cout << "Hello, " << name << "!" << std::endl;
    std::cout << "You are " << age << " years old." << std::endl;

    return 0;
}

int main() {
    
    // accepting user input
    // if you type a string that has spaces, it will stop reading the string at the first space
    std::string name;
    int age;

    std::cout << "Enter your full name: ";
    std::getline(std::cin, name);

    std::cout << "How old are you? ";
    std::cin >> age;

    std::cout << "Hello, " << name << "!" << std::endl;
    std::cout << "You are " << age << " years old." << std::endl;

    return 0;
}

int main() {
    
    // accepting user input
    std::string name;
    int age;

    // there is an issue with getline
    // say the age block comes before the name block
    // the name block will be empty

    std::cout << "How old are you? ";
    std::cin >> age;

    std::cout << "Enter your full name: ";
    std::getline(std::cin, name);

    std::cout << "Hello, " << name << "!" << std::endl;
    std::cout << "You are " << age << " years old." << std::endl;

    return 0;
}

int main() {
    
    // accepting user input
    std::string name;
    int age;

    // if you accept some input with cin followed by getline will break
    // std::getline(std::cin, name); because there's a \n newline character in our input buffer
    // std::cin >> age; \n 

    std::cout << "How old are you? ";
    std::cin >> age;

    std::cout << "Enter your full name: ";
    std::getline(std::cin, name);

    std::cout << "Hello, " << name << "!" << std::endl;
    std::cout << "You are " << age << " years old." << std::endl;

    return 0;
}

int main() {
    
    // accepting user input
    std::string name;
    int age;

    // to prevent that problem

    std::cout << "How old are you? ";
    std::cin >> age;

    std::cout << "Enter your full name: ";
    // modify this line (ws for whitespace)
    std::getline(std::cin >> std::ws, name);

    std::cout << "Hello, " << name << "!" << std::endl;
    std::cout << "You are " << age << " years old." << std::endl;

    return 0;
}

useful math-related functions

int main() {
    
    double x = 3;
    double y = 4;
    double z;

    // z = std::max(x, y); // z = 4
    // z = std::min(x, y); // z = 3

    std::cout << z;

    return 0;
}

#include <iostream>
#include <cmath>

int main() {
    
    double x = 3;
    double y = 4;
    double z;
    
    // z = pow(2, 3); // z = 8
    // z = pow(2, 4); // z = 16
    // z = sqrt(9); // z = 3
    // z = abs(-3); // z = 3

    std::cout << z;

    return 0;
}

#include <iostream>
#include <cmath>

int main() {
    
    double x = 3.14;
    double y = 4;
    double z;
    
    // z = round(x); // z = 3
    // z = ceil(x); // z = 4
    // z = floor(x); // z = 3
    // z = trunc(x); // z = 3

    std::cout << z;

    return 0;
}
Many more math functions at:
www.cplusplus.com/reference/cmath/

#include <iostream>
#include <cmath>

int main() {
    
    // calculate the hypotenuse of a right triangle
    double a;
    double b;
    double c;
    // solution: c is the square root of a squared + b squared

    std::cout << "Enter the length of side a: ";
    std::cin >> a;

    std::cout << "Enter the length of side b: ";
    std::cin >> b;

    a = pow(a, 2);
    b = pow(b, 2);
    c = sqrt(a + b);

    std::cout << "The length of the hypotenuse is: " << c << std::endl;


    return 0;
}

or

#include <iostream>
#include <cmath>

int main() {
    
    // calculate the hypotenuse of a right triangle
    double a;
    double b;
    double c;
    // solution: c is the square root of a squared + b squared

    std::cout << "Enter the length of side a: ";
    std::cin >> a;

    std::cout << "Enter the length of side b: ";
    std::cin >> b;

    c = sqrt(pow(a, 2) + pow(b, 2));

    std::cout << "The length of the hypotenuse is: " << c << std::endl;


    return 0;
}

int main() {
    
    // if statements = do something if a condition is true
    //                 or do nothing if false

    int age;

    std::cout << "Enter your age: ";
    std::cin >> age;

    if (age >= 18) {
        std::cout << "You are an adult." << std::endl;
    }

    return 0;
}

int main() {
    
    // if statements = do something if a condition is true
    //                 or do something else if false

    int age;

    std::cout << "Enter your age: ";
    std::cin >> age;

    if (age >= 18) {
        std::cout << "You are an adult." << std::endl;
    }
    else {
        std::cout << "You are a child." << std::endl;
    }   

    return 0;
}

int main() {
    
    // if statements = do something if a condition is true
    //                 do something else if another condition is true
    //                 or do something else if both are false

    int age;

    std::cout << "Enter your age: ";
    std::cin >> age;

    if (age >= 18) {
        std::cout << "You are an adult." << std::endl;
    }
    else if (age >= 13) {
        std::cout << "You are a teenager." << std::endl;
    }
    else {
        std::cout << "You are a child." << std::endl;
    }   

    return 0;
}

#include <iostream>

int main() {
    
    // switch = alternative to using multiple if statements
    //          allows for multiple conditions to be tested
    //          instead of testing one condition at a time
    //          if (month == 1) { ... } else if (month == 2) { ... } etc. would be redundant

    int month;

    std::cout << "Enter the number of the month: ";
    std::cin >> month;

    switch (month) {
        case 1:
            std::cout << "It is January" << std::endl;
            break;
        case 2:
            std::cout << "It is February" << std::endl;
            break;
        case 3:
            std::cout << "It is March" << std::endl;
            break; 
        case 4:
            std::cout << "It is April" << std::endl;
            break;
        case 5:
            std::cout << "It is May" << std::endl;
            break;
        case 6:
            std::cout << "It is June" << std::endl;
            break;
        case 7:
            std::cout << "It is July" << std::endl;
            break;
        case 8:
            std::cout << "It is August" << std::endl;
            break;
        case 9:
            std::cout << "It is September" << std::endl;
            break;
        case 10:
            std::cout << "It is October" << std::endl;
            break;
        case 11:
            std::cout << "It is November" << std::endl;
            break;
        case 12:
            std::cout << "It is December" << std::endl;
            break;
    }

    return 0;
}

#include <iostream>

int main() {
    
    // switch = alternative to using multiple if statements
    //          allows for multiple conditions to be tested
    //          instead of testing one condition at a time
    //          if (month == 1) { ... } else if (month == 2) { ... } etc. would be redundant in this case

    // switch is similar to a series of if statements

    int month;

    std::cout << "Enter the number of the month: ";
    std::cin >> month;

    switch (month) {
        case 1:
            std::cout << "It is January" << std::endl;
            break;
        case 2:
            std::cout << "It is February" << std::endl;
            break;
        case 3:
            std::cout << "It is March" << std::endl;
            break; 
        case 4:
            std::cout << "It is April" << std::endl;
            break;
        case 5:
            std::cout << "It is May" << std::endl;
            break;
        case 6:
            std::cout << "It is June" << std::endl;
            break;
        case 7:
            std::cout << "It is July" << std::endl;
            break;
        case 8:
            std::cout << "It is August" << std::endl;
            break;
        case 9:
            std::cout << "It is September" << std::endl;
            break;
        case 10:
            std::cout << "It is October" << std::endl;
            break;
        case 11:
            std::cout << "It is November" << std::endl;
            break;
        case 12:
            std::cout << "It is December" << std::endl;
            break;
        default:
            std::cout << "Invalid month number" << std::endl;
            break;
    }

    return 0;
}

#include <iostream>

int main() {
    
    // switch = another example

    char grade;

    std::cout << "Enter your grade: ";
    std::cin >> grade;

    switch (grade) {
        case 'A':
            std::cout << "You got an A!" << std::endl;
            break;
        case 'B':
            std::cout << "You got a B!" << std::endl;
            break;
        case 'C':
            std::cout << "You got a C!" << std::endl;
            break;
        case 'D':
            std::cout << "You got a D!" << std::endl;
            break;
        case 'F':
            std::cout << "You got an F!" << std::endl;
            break;
        default:
            std::cout << "Invalid grade!" << std::endl;
            break;
    }

    return 0;
}

#include <iostream>

int main() {

    // using switch
    
    char op;
    double num1;
    double num2;
    double result;

    std::cout << "********** CALCULATOR **********\n";

    std::cout << "Enter one of (+ - * /): ";
    std::cin >> op;

    std::cout << "Enter #1: ";
    std::cin>> num1;
    
    std::cout << "Enter #2: ";
    std::cin>> num2;

    switch (op)
    {
        case '+':
            result = num1 + num2;
            std::cout << "Result: " << result << std::endl;
            break;
        case '-':
            result = num1 - num2;
            std::cout << "Result: " << result << std::endl;
            break;
        case '*':
            result = num1 * num2;
            std::cout << "Result: " << result << std::endl;
            break;
        case '/':
            result = num1 / num2;
            std::cout << "Result: " << result << std::endl;
            break;
        default:
            std::cout << "Invalid operator" << std::endl;
            break;
    }

    std::cout << "********************************\n";

    return 0;
}

#include <iostream>

int main() {

    // ternary operator ?: = replacement to an if/else statement
    // condition ? expression1 : expression2

    int grade = 75;

    // instead of this

    if (grade >= 60)
    {
        std::cout << "You passed!";
    }
    else
    {
        std::cout << "You failed!";
    }
    
    return 0;
}

#include <iostream>

int main() {

    // ternary operator ?: = replacement to an if/else statement
    // condition ? expression1 : expression2

    int grade = 75;

    // do this

    grade >= 60 ? std::cout << "You passed!" : std::cout << "You failed!";
    
    return 0;
}

#include <iostream>

int main() {

    // ternary operator ?: = replacement to an if/else statement
    // condition ? expression1 : expression2

    // int grade = 75;
    // grade >= 60 ? std::cout << "You passed!" : std::cout << "You failed!";

    int number = 6;
    number % 2 == 0 ? std::cout << "Number is even" : std::cout << "Number is odd";
    
    return 0;
}

#include <iostream>

int main() {

    // ternary operator ?: = replacement to an if/else statement
    // condition ? expression1 : expression2

    // int grade = 75;
    // grade >= 60 ? std::cout << "You passed!" : std::cout << "You failed!";

    int number = 6;
    number % 2 ? std::cout << "Number is odd" : std::cout << "Number is even";
    
    return 0;
}

#include <iostream>

int main() {

    // ternary operator ?: = replacement to an if/else statement
    // condition ? expression1 : expression2

    // int grade = 75;
    // grade >= 60 ? std::cout << "You passed!" : std::cout << "You failed!";

    // int number = 6;
    // number % 2 ? std::cout << "Number is odd" : std::cout << "Number is even";

    bool hungry = true;
    hungry ? std::cout << "I'm hungry" : std::cout << "I'm full";
    
    return 0;
}

#include <iostream>

int main() {

    // ternary operator ?: = replacement to an if/else statement
    // condition ? expression1 : expression2

    // int grade = 75;
    // grade >= 60 ? std::cout << "You passed!" : std::cout << "You failed!";

    // int number = 6;
    // number % 2 ? std::cout << "Number is odd" : std::cout << "Number is even";

    bool hungry = true;
    // hungry ? std::cout << "I'm hungry" : std::cout << "I'm full";
    // or
    std::cout << (hungry ? "I'm hungry" : "I'm full");
    
    return 0;
}

#include <iostream>

int main() {

    // && = checks if both conditions are true
    // || = checks if either condition is true
    // ! = checks if the condition is false

    int temp;

    std::cout << "Enter the temperature: ";
    std::cin >> temp;

    if (temp >= 100 && temp <= 200) {
        std::cout << "It's hot!" << std::endl;
    }
    else if (temp >= 0 && temp <= 100) {
        std::cout << "It's warm!" << std::endl;
    }
    else if (temp >= -100 && temp <= 0) {
        std::cout << "It's cold!" << std::endl;
    }
    
    return 0;
}

#include <iostream>

int main() {

    // && = checks if both conditions are true
    // || = checks if either condition is true
    // ! = checks if the condition is false

    int temp;

    std::cout << "Enter the temperature: ";
    std::cin >> temp;

    if (temp <= 0 || temp >= 30) {
        std::cout << "The temperature is bad" << std::endl;
    }
    else {
        std::cout << "The temperature is good" << std::endl;
    }
    
    return 0;
}

#include <iostream>

int main() {

    // && = checks if both conditions are true
    // || = checks if either condition is true
    // ! = checks if the condition is false

    bool sunny = true;

    if (!sunny) {
        std::cout << "It's cloudy" << std::endl;
    }
    else {
        std::cout << "It's sunny" << std::endl;
    }
    
    return 0;
}

#include <iostream>

int main() {

    // create a temperature converter

    double temp;
    char unit;

    std::cout << "Enter the temperature: ";
    std::cin >> temp;

    std::cout << "Enter the unit: ";
    std::cin >> unit;

    if (unit == 'C' || unit == 'c') {
        temp = temp * 1.8 + 32;
        std::cout << temp << "F";
    }
    else if (unit == 'F' || unit == 'f') {    
        temp = (temp - 32) / 1.8;
        std::cout << temp << "C";
    }
    else {
        std::cout << "Invalid unit";
    }
    
    return 0;
}

#include <iostream>

int main() {

    // useful string methods
    std::string name;
    
    std::cout << "Enter your name: ";
    std::getline(std::cin, name);

    // name.length(); // returns the number of characters in the string
    // name.empty(); // returns true if the string is empty, false if not
    // name.find(" "); // returns the index of the first space in the string

    if (name.length() > 16)
    {
        std::cout << "Your name is too long" << std::endl;
    }
    else
    {
        std::cout << "Welcome, " << name << "." << std::endl;
    }
    
    
    return 0;
}

#include <iostream>

int main() {

    // useful string methods
    std::string name;
    
    std::cout << "Enter your name: ";
    std::getline(std::cin, name);

    // name.length(); // returns the number of characters in the string
    // name.empty(); // returns true if the string is empty, false if not
    // name.find(" "); // returns the index of the first space in the string

    if (name.empty())
    {
        std::cout << "Your name is empty" << std::endl;
    }
    else
    {
        std::cout << "Welcome, " << name << "." << std::endl;
    }
    
    
    return 0;
}

#include <iostream>

int main() {

    // useful string methods
    std::string name;
    
    std::cout << "Enter your name: ";
    std::getline(std::cin, name);

    // name.length(); // returns the number of characters in the string
    // name.empty(); // returns true if the string is empty, false if not
    // name.find(" "); // returns the index of the first space in the string

    if (name.find(" ") != std::string::npos)
    {
        std::cout << "Invalid name" << std::endl;
    }
    else
    {
        std::cout << "Welcome, " << name << "." << std::endl;
    }
    
    return 0;
}

#include <iostream>

int main() {

    // useful string methods
    std::string name;
    
    std::cout << "Enter your name: ";
    std::getline(std::cin, name);

    // name.length(); // returns the number of characters in the string
    // name.empty(); // returns true if the string is empty, false if not
    // name.find(" "); // returns the index of the first space in the string
    // name.clear(); // clears the string

    std::string name;
    
    std::cout << "Enter your name: ";
    std::getline(std::cin, name);

    name.clear();

    std::cout << "Hello " << name << "!" << std::endl;

    return 0;
}

#include <iostream>

int main() {

    // useful string methods
    std::string name;
    
    std::cout << "Enter your name: ";
    std::getline(std::cin, name);

    //name.append(" "); // adds a space to the end of the string

    name.append("@gmail.com");

    std::cout << "Your email is: " << name << std::endl;

    return 0;
}

#include <iostream>

int main() {

    // useful string methods
    std::string name;
    
    std::cout << "Enter your name: ";
    std::getline(std::cin, name);

    // name.at() returns the character at the specified index

    std::cout << "Your initial is: " << name.at(0) << std::endl;
    
    return 0;
}

#include <iostream>

int main() {

    // useful string methods
    std::string name;
    
    std::cout << "Enter your name: ";
    std::getline(std::cin, name);

    // name.insert(0, "Hello, "); // insert a string at a specific index
    // name.erase(0, 5); // erase a string at a specific index
    std::cout << name << std::endl;

    return 0;
}
More string things at:
www.cplusplus.com/reference/string/string/

#include <iostream>

int main() {

    // while loops = execute a block of code as long as a condition is true

    std::string name;

    while (name.empty())
    {
        std::cout << "Enter your name: ";
        std::getline(std::cin, name);
    }

    std::cout << "Hello, " << name << "!" << std::endl;
    

    return 0;
}

#include <iostream>

int main() {

    // do while loop = executes a block of code repeatedly
    //                  as long as a condition is true

    int number;
    
    do {
        std::cout << "Enter a positive number: ";
        std::cin >> number;
    } while (number < 0);
    
    std::cout << "The number is: " << number << std::endl;

    return 0;
}

#include <iostream>

int main() {

    // for loop = executes a block of code a specified number of times
    //            can use a counter variable to keep track of how many times the loop has run 

    for (int i = 1; i <= 3; i++) {
        std::cout << "HAPPY!" << std::endl;
    }

    return 0;
}

#include <iostream>

int main() {

    // for loop = executes a block of code a specified number of times
    //            can use a counter variable to keep track of how many times the loop has run 

    for (int i = 1; i <= 10; i++) {
        std::cout << i << std::endl;
    }

    return 0;
}

#include <iostream>

int main() {

    // for loop = executes a block of code a specified number of times
    //            can use a counter variable to keep track of how many times the loop has run 

    for (int i = 1; i <= 20; i+=2) {
        std::cout << i << std::endl;
    }

    return 0;
}

#include <iostream>

int main() {

    // for loop = executes a block of code a specified number of times
    //            can use a counter variable to keep track of how many times the loop has run 

    for (int i = 10; i >= 1; i--) {
        std::cout << i << std::endl;
    }
    std::cout << "HAPPY NEW YEAR!" << std::endl;

    return 0;
}

#include <iostream>

int main() {

    // break = used to exit a loop
    // continue = used to skip an iteration of a loop

    for (int i = 1; i <= 20; i++) {
        if (i == 13)
        {
            break;
        }
        
        std::cout << i << std::endl;
    }

    return 0;
}

#include <iostream>

int main() {

    // break = used to exit a loop
    // continue = used to skip an iteration of a loop

    for (int i = 1; i <= 20; i++) {
        if (i == 13)
        {
            continue;
        }
        
        std::cout << i << std::endl;
    }

    return 0;
}

#include <iostream>

int main() {

    // nested loops = a loop within a loop
    // outer loop = the loop that contains the inner loop
    // inner loop = the loop that is contained within the outer loop

    for (int i = 1; i <= 3; i++) {
        for (int j = 1; j <= 10; j++) {
            std::cout << j << ' ';
        }
    }

    return 0;
}

#include <iostream>

int main() {

    // nested loops = a loop within a loop
    // outer loop = the loop that contains the inner loop
    // inner loop = the loop that is contained within the outer loop

    for (int i = 1; i <= 3; i++) {
        for (int j = 1; j <= 10; j++) {
            std::cout << j << ' ';
        }
        std::cout << std::endl;
    }

    return 0;
}

#include <iostream>

int main() {

    // nested loops = a loop within a loop
    // outer loop = the loop that contains the inner loop
    // inner loop = the loop that is contained within the outer loop

    // print a rectangle with user input
    int rows;
    int columns;
    char symbol;

    std::cout << "Enter the number of rows: ";
    std::cin >> rows;

    std::cout << "Enter the number of columns: ";
    std::cin >> columns;

    std::cout << "Enter the symbol: ";
    std::cin >> symbol;

    for (int i = 1; i <= rows; i++) {
        for (int j = 1; j <= columns; j++) {
            std::cout << symbol;
        }
        std::cout << std::endl;
    }

    return 0;
}

#include <iostream>
#include <ctime>

int main() {

    // pseudo-random number generator 
    srand(time(NULL)); // seed the random number generator with the current time

    int num = rand(); // generate a random number between 0 and 32767

    std::cout << num << std::endl;

    return 0;
}

#include <iostream>
#include <ctime>

int main() {

    // pseudo-random number generator 
    srand(time(NULL)); // seed the random number generator with the current time

    int num = rand() % 6; // generate a random number between 0 and 5 

    std::cout << num << std::endl;

    return 0;
}

#include <iostream>
#include <ctime>

int main() {

    // pseudo-random number generator (dice roll)
    srand(time(NULL)); // seed the random number generator with the current time

    int num = rand() % 6 + 1; // generate a random number between 1 and 6

    std::cout << num << std::endl;

    return 0;
}

#include <iostream>
#include <ctime>

int main() {

    // pseudo-random number generator (3 dice roll)
    srand(time(NULL)); // seed the random number generator with the current time

    int num1 = rand() % 6 + 1; // generate a random number between 1 and 6
    int num2 = rand() % 6 + 1; // generate a random number between 1 and 6
    int num3 = rand() % 6 + 1; // generate a random number between 1 and 6

    std::cout << num1 << std::endl;
    std::cout << num2 << std::endl;
    std::cout << num3 << std::endl;

    return 0;
}

#include <iostream>
#include <ctime>

int main() {

    // random event generator
    srand(time(0)); // seed the random number generator with the current time
    int randNum = rand() % 5 + 1; // generate a random number between 1 and 5

    switch (randNum)
    {
    case 1: 
        std::cout << "You got a 1!" << std::endl;
        break;

    case 2: 
        std::cout << "You got a 2!" << std::endl;
        break;

    case 3: 
        std::cout << "You got a 3!" << std::endl;
        break;  

    case 4: 
        std::cout << "You got a 4!" << std::endl;
        break;

    case 5: 
        std::cout << "You got a 5!" << std::endl;
        break;
    
    default:
        break;
    }

    return 0;
}

#include <iostream>
#include <ctime>

int main() {

    // simple number guessing game
    int num;
    int guess;
    int tries;

    srand(time(NULL)); // seed the random number generator with the current time

    num = rand() % 100 + 1; // generate a random number between 1 and 100

    do
    {
        std::cout << "Guess a number between 1 and 100: ";
        std::cin >> guess;
        tries++;

        if (guess > num)
        {
            std::cout << "Too high!" << std::endl;
        }
        else if (guess < num)
        {
            std::cout << "Too low!" << std::endl;
        }
        else
        {
            std::cout << "You got it! It took you " << tries << " tries." << std::endl;
        }

    } while (guess != num);
    
    return 0;
}

#include <iostream>

void happyBirthday() {
    std::cout << "Happy birthday to you!" << std::endl;
    std::cout << "Happy birthday to you!" << std::endl;
    std::cout << "Happy birthday, dear buddy" << std::endl;
    std::cout << "Happy birthday to you!" << std::endl;
}

int main() {

    // function = a block of reuseable code that performs a specific task

    happyBirthday();
    
    return 0;
}

#include <iostream>

void happyBirthday();
int main() {

    // function = a block of reuseable code that performs a specific task

    happyBirthday();
    
    return 0;
}

void happyBirthday() {
    std::cout << "Happy birthday to you!" << std::endl;
    std::cout << "Happy birthday to you!" << std::endl;
    std::cout << "Happy birthday, dear buddy" << std::endl;
    std::cout << "Happy birthday to you!" << std::endl;
}

#include <iostream>

void happyBirthday(std::string name, int age);
int main() {

    // function = a block of reuseable code that performs a specific task

    std::string name;
    int age = 21;
    
    std::cout << "Enter your name: ";
    std::getline(std::cin, name);

    happyBirthday(name, age);
    
    return 0;
}

void happyBirthday(std::string name, int age) {
    std::cout << "Happy birthday to you!" << std::endl;
    std::cout << "Happy birthday to you!" << std::endl;
    std::cout << "Happy birthday, dear " << name << "!" << std::endl;
    std::cout << "Happy birthday to you!" << std::endl;
    std::cout << "You are " << age << " years old today." << std::endl;
}

#include <iostream>

double square(double length);

int main() {

    // return type = the type of the value that the function returns
    // return a value back to the place where you called the function
    // void = does not return any value

    double length = 5.0;
    double area = square(length);

    std::cout << "The area of the square is: " << area << "cm^2" << std::endl;
    
    return 0;
}

double square(double length) {
    return length * length;
}

#include <iostream>

double square(double length);
double cube(double length);

int main() {

    // return type = the type of the value that the function returns
    // return a value back to the place where you called the function
    // void = does not return any value

    double length = 5.0;
    double area = square(length);
    double volume = cube(length);

    std::cout << "The area of the square is: " << area << "cm^2" << std::endl;
    std::cout << "The volume of the cube is: " << volume << "cm^3" << std::endl;
    
    return 0;
}

double square(double length) {
    return length * length;
}

double cube(double length) {
    return length * length * length;
}

#include <iostream>

std::string concatStrings(std::string a, std::string b);

int main() {

    std::string firstName = "Wayne";
    std::string lastName = "McRae";

    std::cout << "Full name: " << concatStrings(firstName, lastName) << std::endl;

    return 0;
}

std::string concatStrings(std::string a, std::string b) {

    return a + " " + b;
}

#include <iostream>

void bakePizza();

int main() {

    // overloaded functions = functions with the same name but different parameters
    //                        or different return types

    bakePizza();

    return 0;
}

void bakePizza() {
    std::cout << "Here is your pizza!" << std::endl;
}

#include <iostream>

void bakePizza();
void bakePizza(std::string topping1);

int main() {

    // overloaded functions = functions with the same name but different parameters
    //                        or different return types

    bakePizza("pepperoni");

    return 0;
}

void bakePizza() {
    std::cout << "Here is your pizza!" << std::endl;
}
void bakePizza(std::string topping1) {
    std::cout << "Here is your " << topping1 << " pizza!" << std::endl;
} 

#include <iostream>

void bakePizza();
void bakePizza(std::string topping1);
void bakePizza(std::string topping1, std::string topping2);

int main() {

    // overloaded functions = functions with the same name but different parameters
    //                        or different return types

    bakePizza("pepperoni", "mushroom");

    return 0;
}

void bakePizza() {
    std::cout << "Here is your pizza!" << std::endl;
}
void bakePizza(std::string topping1) {
    std::cout << "Here is your " << topping1 << " pizza!" << std::endl;
} 
void bakePizza(std::string topping1, std::string topping2) {
    std::cout << "Here is your " << topping1 << " and " << topping2 << " pizza!" << std::endl;
}

#include <iostream>

int main() {

    // local variables = variables that are defined inside a function or block of code
    // global variables = variables that are defined outside of a function or block of code and can be accessed from anywhere in the program

    int myNum = 1;

    std::cout << myNum << std::endl;

    return 0;
}

#include <iostream>

void printNum(int myNum);

int main() {

    // local variables = variables that are defined inside a function or block of code
    // global variables = variables that are defined outside of a function or block of code and can be accessed from anywhere in the program

    int myNum = 1;

    printNum(myNum);

    return 0;
}
void printNum(int myNum) {
    std::cout << myNum << std::endl;
}

#include <iostream>

void printNum();

int main() {

    // local variables = variables that are defined inside a function or block of code
    // global variables = variables that are defined outside of a function or block of code and can be accessed from anywhere in the program

    int myNum = 1;

    printNum();

    return 0;
}
void printNum() {
    int myNum = 2;
    std::cout << myNum << std::endl;
}

#include <iostream>

int myNum = 3;

void printNum();

int main() {

    printNum();

    return 0;
}
void printNum() {
    std::cout << myNum << std::endl;
}

#include <iostream>

int myNum = 3;

void printNum();

int main() {

    printNum();
    std::cout << myNum << std::endl;

    return 0;
}
void printNum() {
    std::cout << myNum << std::endl;
}

#include <iostream>

int myNum = 3;

void printNum();

int main() {

    printNum();
    int myNum = 1;
    std::cout << myNum << std::endl;

    return 0;
}
void printNum() {
    int myNum = 2;
    std::cout << myNum << std::endl;
}

#include <iostream>

int myNum = 3;

void printNum();

int main() {

    printNum();
    int myNum = 1;
    // use :: to access global variable
    std::cout << ::myNum << std::endl;

    return 0;
}
void printNum() {
    int myNum = 2;
    std::cout << myNum << std::endl;
}

#include <iostream>

void showBalance(double balance);
double deposit();
double withdraw(double balance);

/**
 * @brief Main entry point of the program
 *
 * This function creates a bank account program. It asks the user to make a choice
 * from the menu and performs the chosen action. The user can deposit money, withdraw
 * money, show the balance or exit the program.
 *
 * @return 0 on success
 */
int main() {

    double balance = 0;
    int choice = 0;

    do
    {
    std::cout << "Enter your choice: " << std::endl;
    std::cout << "1. Deposit" << std::endl;
    std::cout << "2. Withdraw" << std::endl;
    std::cout << "3. Show balance" << std::endl;
    std::cout << "4. Exit" << std::endl;

    std::cout << "Choice: ";
    std::cin >> choice;

    switch (choice) {
        case 1:
            balance += deposit();
            break;
        case 2:
            balance -= withdraw(balance);
            break;
        case 3:
            showBalance(balance);
            break;
        case 4:
            std::cout << "Goodbye!" << std::endl;
            break;
        default:
            std::cout << "Invalid choice" << std::endl;
            break;
        }
    } while (choice != 4);

    return 0;
}

// Displays the current balance to the user
void showBalance(double balance) {
    std::cout << "Your balance is $" << balance << std::endl;
}

// Prompts the user to enter an amount to deposit and returns that amount.
double deposit() {
    return 0;
}

// Prompts the user to enter an amount to withdraw, checks if the amount is less than or equal to the current balance, and returns the withdrawn amount. If the amount is greater than the balance, it displays an error message and returns 0.
double withdraw(double balance) {
    return 0;
}

#include <iostream>
#include <iomanip>

void showBalance(double balance);
double deposit();
double withdraw(double balance);

/**
 * @brief Main entry point of the program
 *
 * This function creates a bank account program. It asks the user to make a choice
 * from the menu and performs the chosen action. The user can deposit money, withdraw
 * money, show the balance or exit the program.
 *
 * @return 0 on success
 */
int main() {

    double balance = 0;
    int choice = 0;

    do
    {
    std::cout << "Enter your choice: " << std::endl;
    std::cout << "1. Deposit" << std::endl;
    std::cout << "2. Withdraw" << std::endl;
    std::cout << "3. Show balance" << std::endl;
    std::cout << "4. Exit" << std::endl;

    std::cout << "Choice: ";
    std::cin >> choice;

    switch (choice) {
        case 1:
            balance += deposit();
            break;
        case 2:
            balance -= withdraw(balance);
            break;
        case 3:
            showBalance(balance);
            break;
        case 4:
            std::cout << "Goodbye!" << std::endl;
            break;
        default:
            std::cout << "Invalid choice" << std::endl;
            break;
        }
    } while (choice != 4);

    return 0;
}

// Displays the current balance to the user
void showBalance(double balance) {
    std::cout << "Your balance is ZAR" << std::setprecision(2) << std::fixed << balance << std::endl;
}

// Prompts the user to enter an amount to deposit and returns that amount.
double deposit() {
    return 0;
}

// Prompts the user to enter an amount to withdraw, checks if the amount is less than or equal to the current balance, and returns the withdrawn amount. If the amount is greater than the balance, it displays an error message and returns 0.
double withdraw(double balance) {
    return 0;


#include <iostream>
#include <iomanip>

void showBalance(double balance);
double deposit();
double withdraw(double balance);

/**
 * @brief Main entry point of the program
 *
 * This function creates a bank account program. It asks the user to make a choice
 * from the menu and performs the chosen action. The user can deposit money, withdraw
 * money, show the balance or exit the program.
 *
 * @return 0 on success
 */
int main() {

    double balance = 0;
    int choice = 0;

    do
    {
    std::cout << "Enter your choice: " << std::endl;
    std::cout << "1. Deposit" << std::endl;
    std::cout << "2. Withdraw" << std::endl;
    std::cout << "3. Show balance" << std::endl;
    std::cout << "4. Exit" << std::endl;

    std::cout << "Choice: ";
    std::cin >> choice;

    switch (choice) {
        case 1:
            balance += deposit();
            break;
        case 2:
            balance -= withdraw(balance);
            break;
        case 3:
            showBalance(balance);
            break;
        case 4:
            std::cout << "Goodbye!" << std::endl;
            break;
        default:
            std::cout << "Invalid choice" << std::endl;
            break;
        }
    } while (choice != 4);

    return 0;
}

// Displays the current balance to the user
void showBalance(double balance) {
    std::cout << "Your balance is ZAR" << std::setprecision(2) << std::fixed << balance << std::endl;
}

// Prompts the user to enter an amount to deposit and returns that amount.
double deposit() {
    double amount;
    std::cout << "Enter the amount to deposit: ";
    std::cin >> amount;
    return amount;
}

// Prompts the user to enter an amount to withdraw, checks if the amount is less than or equal to the current balance, and returns the withdrawn amount. If the amount is greater than the balance, it displays an error message and returns 0.
double withdraw(double balance) {
    return 0;
}

#include <iostream>
#include <iomanip>

void showBalance(double balance);
double deposit();
double withdraw(double balance);

/**
 * @brief Main entry point of the program
 *
 * This function creates a bank account program. It asks the user to make a choice
 * from the menu and performs the chosen action. The user can deposit money, withdraw
 * money, show the balance or exit the program.
 *
 * @return 0 on success
 */
int main() {

    double balance = 0;
    int choice = 0;

    do
    {
    std::cout << "Enter your choice: " << std::endl;
    std::cout << "1. Deposit" << std::endl;
    std::cout << "2. Withdraw" << std::endl;
    std::cout << "3. Show balance" << std::endl;
    std::cout << "4. Exit" << std::endl;

    std::cout << "Choice: ";
    std::cin >> choice;

    switch (choice) {
        case 1:
            balance += deposit();
            showBalance(balance);
            break;
        case 2:
            balance -= withdraw(balance);
            showBalance(balance);
            break;
        case 3:
            showBalance(balance);
            break;
        case 4:
            std::cout << "Goodbye!" << std::endl;
            break;
        default:
            std::cout << "Invalid choice" << std::endl;
            break;
        }
    } while (choice != 4);

    return 0;
}

// Displays the current balance to the user
void showBalance(double balance) {
    std::cout << "Your balance is ZAR " << std::setprecision(2) << std::fixed << balance << std::endl;
}

// Prompts the user to enter an amount to deposit and returns that amount.
double deposit() {
    double amount;
    std::cout << "Enter the amount to deposit: ";
    std::cin >> amount;

    if (amount > 0)
    {
        return amount;
    }
    else
    {
        std::cout << "Invalid amount" << std::endl;
        return 0;
    }
}

// Prompts the user to enter an amount to withdraw, checks if the amount is less than or equal to the current balance, and returns the withdrawn amount. If the amount is greater than the balance, it displays an error message and returns 0.
double withdraw(double balance) {
    return 0;
}

#include <iostream>
#include <iomanip>

void showBalance(double balance);
double deposit();
double withdraw(double balance);

/**
 * @brief Main entry point of the program
 *
 * This function creates a bank account program. It asks the user to make a choice
 * from the menu and performs the chosen action. The user can deposit money, withdraw
 * money, show the balance or exit the program.
 *
 * @return 0 on success
 */
int main() {

    double balance = 0;
    int choice = 0;

    do
    {
    std::cout << "Enter your choice: " << std::endl;
    std::cout << "1. Deposit" << std::endl;
    std::cout << "2. Withdraw" << std::endl;
    std::cout << "3. Show balance" << std::endl;
    std::cout << "4. Exit" << std::endl;

    std::cout << "Choice: ";
    std::cin >> choice;

    switch (choice) {
        case 1:
            balance += deposit();
            showBalance(balance);
            break;
        case 2:
            balance -= withdraw(balance);
            showBalance(balance);
            break;
        case 3:
            showBalance(balance);
            break;
        case 4:
            std::cout << "Goodbye!" << std::endl;
            break;
        default:
            std::cout << "Invalid choice" << std::endl;
            break;
        }
    } while (choice != 4);

    return 0;
}

// Displays the current balance to the user
void showBalance(double balance) {
    std::cout << "Your balance is ZAR " << std::setprecision(2) << std::fixed << balance << std::endl;
}

// Prompts the user to enter an amount to deposit and returns that amount.
double deposit() {
    double amount;
    std::cout << "Enter the amount to deposit: ";
    std::cin >> amount;

    if (amount > 0)
    {
        return amount;
    }
    else
    {
        std::cout << "Invalid amount" << std::endl;
        return 0;
    }
}

// Prompts the user to enter an amount to withdraw, checks if the amount is less than or equal to the current balance, and returns the withdrawn amount. If the amount is greater than the balance, it displays an error message and returns 0.
double withdraw(double balance) {
    double amount;
    std::cout << "Enter the amount to withdraw: ";
    std::cin >> amount;

    if (amount > 0 && amount <= balance)
    {
        return amount;
    }
    else
    {
        std::cout << "Invalid amount" << std::endl;
        return 0;
    }
}

#include <iostream>
#include <iomanip>

void showBalance(double balance);
double deposit();
double withdraw(double balance);

/**
 * @brief Main entry point of the program
 *
 * This function creates a bank account program. It asks the user to make a choice
 * from the menu and performs the chosen action. The user can deposit money, withdraw
 * money, show the balance or exit the program.
 *
 * @return 0 on success
 */
int main() {

    double balance = 0;
    int choice = 0;

    do
    {
    std::cout << "Enter your choice: " << std::endl;
    std::cout << "1. Deposit" << std::endl;
    std::cout << "2. Withdraw" << std::endl;
    std::cout << "3. Show balance" << std::endl;
    std::cout << "4. Exit" << std::endl;

    std::cout << "Choice: ";
    std::cin >> choice;

    switch (choice) {
        case 1:
            balance += deposit();
            showBalance(balance);
            break;
        case 2:
            balance -= withdraw(balance);
            showBalance(balance);
            break;
        case 3:
            showBalance(balance);
            break;
        case 4:
            std::cout << "Goodbye!" << std::endl;
            break;
        default:
            std::cout << "Invalid choice" << std::endl;
            break;
        }
    } while (choice != 4);

    return 0;
}

// Displays the current balance to the user
void showBalance(double balance) {
    std::cout << "Your balance is ZAR " << std::setprecision(2) << std::fixed << balance << std::endl;
}

// Prompts the user to enter an amount to deposit and returns that amount.
double deposit() {
    double amount;
    std::cout << "Enter the amount to deposit: ";
    std::cin >> amount;

    if (amount > 0)
    {
        return amount;
    }
    else
    {
        std::cout << "Invalid amount" << std::endl;
        return 0;
    }
}

// Prompts the user to enter an amount to withdraw, checks if the amount is less than or equal to the current balance, and returns the withdrawn amount. If the amount is greater than the balance, it displays an error message and returns 0.
double withdraw(double balance) {
    double amount;
    std::cout << "Enter the amount to withdraw: ";
    std::cin >> amount;

    if (amount > balance)
    {
        std::cout << "Insufficient funds" << std::endl;
        return 0;
    }
    else if (amount > 0)
    {
        return amount;
    }
    else
    {
        std::cout << "Invalid amount" << std::endl;
        return 0;
    }
}

#include <iostream>
#include <iomanip>

void showBalance(double balance);
double deposit();
double withdraw(double balance);

/**
 * @brief Main entry point of the program
 *
 * This function creates a bank account program. It asks the user to make a choice
 * from the menu and performs the chosen action. The user can deposit money, withdraw
 * money, show the balance or exit the program.
 *
 * @return 0 on success
 */
int main() {

    double balance = 0;
    int choice = 0;

    do
    {
    std::cout << "Enter your choice: " << std::endl;
    std::cout << "1. Deposit" << std::endl;
    std::cout << "2. Withdraw" << std::endl;
    std::cout << "3. Show balance" << std::endl;
    std::cout << "4. Exit" << std::endl;

    std::cout << "Choice: ";
    std::cin >> choice;

    // Clear the input buffer if the user enters invalid input
    std::cin.clear();
    fflush(stdin);

    switch (choice) {
        case 1:
            balance += deposit();
            showBalance(balance);
            break;
        case 2:
            balance -= withdraw(balance);
            showBalance(balance);
            break;
        case 3:
            showBalance(balance);
            break;
        case 4:
            std::cout << "Goodbye!" << std::endl;
            break;
        default:
            std::cout << "Invalid choice" << std::endl;
            break;
        }
    } while (choice != 4);

    return 0;
}

// Displays the current balance to the user
void showBalance(double balance) {
    std::cout << "Your balance is ZAR " << std::setprecision(2) << std::fixed << balance << std::endl;
}

// Prompts the user to enter an amount to deposit and returns that amount.
double deposit() {
    double amount;
    std::cout << "Enter the amount to deposit: ";
    std::cin >> amount;

    if (amount > 0)
    {
        return amount;
    }
    else
    {
        std::cout << "Invalid amount" << std::endl;
        return 0;
    }
}

// Prompts the user to enter an amount to withdraw, checks if the amount is less than or equal to the current balance, and returns the withdrawn amount. If the amount is greater than the balance, it displays an error message and returns 0.
double withdraw(double balance) {
    double amount;
    std::cout << "Enter the amount to withdraw: ";
    std::cin >> amount;

    if (amount > balance)
    {
        std::cout << "Insufficient funds" << std::endl;
        return 0;
    }
    else if (amount > 0)
    {
        return amount;
    }
    else
    {
        std::cout << "Invalid amount" << std::endl;
        return 0;
    }
}

#include <iostream>
#include <iomanip>

void showBalance(double balance);
double deposit();
double withdraw(double balance);

/**
 * @brief Main entry point of the program
 *
 * This function creates a bank account program. It asks the user to make a choice
 * from the menu and performs the chosen action. The user can deposit money, withdraw
 * money, show the balance or exit the program.
 *
 * @return 0 on success
 */
int main() {

    double balance = 0;
    int choice = 0;

    do
    {
    std::cout << "Enter your choice: " << std::endl;
    std::cout << "1. Deposit" << std::endl;
    std::cout << "2. Withdraw" << std::endl;
    std::cout << "3. Show balance" << std::endl;
    std::cout << "4. Exit" << std::endl;

    std::cout << "Choice: ";
    std::cin >> choice;

    if (choice != 1 || choice != 2 || choice != 3 || choice != 4)
    {
        std::cout << "Invalid choice" << std::endl;
        break;
    }

    switch (choice) {
        case 1:
            balance += deposit();
            showBalance(balance);
            break;
        case 2:
            balance -= withdraw(balance);
            showBalance(balance);
            break;
        case 3:
            showBalance(balance);
            break;
        case 4:
            std::cout << "Goodbye!" << std::endl;
            break;
        default:
            std::cout << "Invalid choice" << std::endl;
            break;
        }
    } while (choice != 4);

    return 0;
}

// Displays the current balance to the user
void showBalance(double balance) {
    std::cout << "Your balance is ZAR " << std::setprecision(2) << std::fixed << balance << std::endl;
}

// Prompts the user to enter an amount to deposit and returns that amount.
double deposit() {
    double amount;
    std::cout << "Enter the amount to deposit: ";
    std::cin >> amount;

    if (amount > 0)
    {
        return amount;
    }
    else
    {
        std::cout << "Invalid amount" << std::endl;
        return 0;
    }
}

// Prompts the user to enter an amount to withdraw, checks if the amount is less than or equal to the current balance, and returns the withdrawn amount. If the amount is greater than the balance, it displays an error message and returns 0.
double withdraw(double balance) {
    double amount;
    std::cout << "Enter the amount to withdraw: ";
    std::cin >> amount;

    if (amount > balance)
    {
        std::cout << "Insufficient funds" << std::endl;
        return 0;
    }
    else if (amount > 0)
    {
        return amount;
    }
    else
    {
        std::cout << "Invalid amount" << std::endl;
        return 0;
    }
}

#include <iostream>

char getUserChoice();
char getComputerChoice();
void showChoice(char choice);
void chooseWinner(char player, char computer);

/**
 * Main entry point of the Rock Paper Scissors game.
 *
 * This function prompts the user for input, generates a random choice
 * for the computer, shows the choices and determines the winner.
 */
int main() {
    char player;
    char computer;

    player = getUserChoice();
    computer = getComputerChoice();
    showChoice(player);
    showChoice(computer);
    chooseWinner(player, computer);

    return 0;
}

/**
 * Prompts the user to enter their choice for the Rock Paper Scissors game.
 *
 * This function shows the game title and repeatedly prompts the user for
 * their choice until the user enters a valid choice. Valid choices are 'r',
 * 'p', 's' for rock, paper and scissors respectively.
 *
 * @return The user's choice as a character.
 */
char getUserChoice() {
    char player;
    std::cout << "****Rock Paper Scissors Game****" << std::endl;

    do
    {
        std::cout << "Enter your choice: " << std::endl;
        std::cout << "'r' for rock" << std::endl;
        std::cout << "'p' for paper" << std::endl;
        std::cout << "'s' for scissors" << std::endl;
        std::cout << "Enter your choice: ";
        std::cin >> player;        
    } while (player != 'r' && player != 'p' && player != 's');

    return player;
}
char getComputerChoice() {
    return 0;
}
void showChoice(char choice) {
    return;
}
void chooseWinner(char player, char computer) {
    return;
}

#include <iostream>
#include <ctime>

char getUserChoice();
char getComputerChoice();
void showChoice(char choice);
void chooseWinner(char player, char computer);

/**
 * Main entry point of the Rock Paper Scissors game.
 *
 * This function prompts the user for input, generates a random choice
 * for the computer, shows the choices and determines the winner.
 */
int main() {
    char player;
    char computer;

    player = getUserChoice();
    std::cout << "You chose: ";
    showChoice(player);

    computer = getComputerChoice();
    std::cout << "The computer chose: ";
    showChoice(computer);

    chooseWinner(player, computer);

    return 0;
}

/**
 * Prompts the user to enter their choice for the Rock Paper Scissors game.
 *
 * This function shows the game title and repeatedly prompts the user for
 * their choice until the user enters a valid choice. Valid choices are 'r',
 * 'p', 's' for rock, paper and scissors respectively.
 *
 * @return The user's choice as a character.
 */
char getUserChoice() {
    char player;
    std::cout << "****Rock Paper Scissors Game****" << std::endl;

    do
    {
        std::cout << "Enter your choice: " << std::endl;
        std::cout << "'r' for rock" << std::endl;
        std::cout << "'p' for paper" << std::endl;
        std::cout << "'s' for scissors" << std::endl;
        std::cin >> player;        
    } while (player != 'r' && player != 'p' && player != 's');

    return player;
}
/**
 * Generates a random choice for the computer in the Rock Paper Scissors game.
 *
 * This function uses the random number generator to select a number between
 * 1 and 3, which corresponds to 'r' (rock), 'p' (paper), or 's' (scissors).
 *
 * @return The computer's choice as a character ('r', 'p', or 's').
 */
char getComputerChoice() {

    srand(time(0));

    int num = rand() % 3 + 1;

    switch (num)
    {
    case 1: 
        return 'r';
    case 2:
        return 'p';
    case 3:
        return 's';
    }

    return 0;
}
/**
 * Displays the textual representation of the player's or computer's choice.
 *
 * This function takes a character representing the choice ('r', 'p', 's')
 * and prints the corresponding string ("Rock", "Paper", "Scissors") to the console.
 *
 * @param choice The character representing the choice to display.
 */
void showChoice(char choice) {
    switch (choice)
    {
    case 'r':
        std::cout << "Rock" << std::endl;
        break;
    case 'p':
        std::cout << "Paper" << std::endl;
        break;
    case 's':
        std::cout << "Scissors" << std::endl;
        break;
    }
}
/**
 * Determines the winner of the game and displays the result.
 *
 * This function takes the player's and computer's choices as characters ('r', 'p', 's')
 * and determines who wins based on the game's rules. The result is then displayed to the console.
 *
 * @param player The character representing the player's choice.
 * @param computer The character representing the computer's choice.
 */
void chooseWinner(char player, char computer) {
    switch (player)
    {
    case 'r':
        if (computer == 'r') {
            std::cout << "It's a tie!" << std::endl;
        }
        else if (computer == 'p') {
            std::cout << "You lose!" << std::endl;
        }
        else if (computer == 's') {
            std::cout << "You win!" << std::endl;
        }
        break;

    case 'p':
        if (computer == 'r') {
            std::cout << "You win!" << std::endl;
        }
        else if (computer == 'p') {
            std::cout << "It's a tie!" << std::endl;
        }
        else if (computer == 's') {
            std::cout << "You lose!" << std::endl;
        }
        break;

    case 's':
        if (computer == 'r') {
            std::cout << "You lose!" << std::endl;
        }
        else if (computer == 'p') {
            std::cout << "You win!" << std::endl;
        }
        else if (computer == 's') {
            std::cout << "It's a tie!" << std::endl;
        }
        break;
    }
}

#include <iostream>

int main() {

    // arrays = a collection of elements of the same type
    //          can store multiple values in a single variable
    //          can be accessed using an index

    std::string car[] = {"Lexus", "Toyota", "Honda", "Ford"};

    std::cout << car[0] << std::endl;
    std::cout << car[1] << std::endl;
    std::cout << car[2] << std::endl;
    std::cout << car[3] << std::endl;

    return 0;
}

#include <iostream>

int main() {

    // arrays = a collection of elements of the same type
    //          can store multiple values in a single variable
    //          can be accessed using an index

    std::string car[] = {"Lexus", "Toyota", "Honda", "Ford"};

    car[1] = "Mazda";

    std::cout << car[0] << std::endl;
    std::cout << car[1] << std::endl;
    std::cout << car[2] << std::endl;
    std::cout << car[3] << std::endl;

    return 0;
}

#include <iostream>

int main() {

    // arrays = a collection of elements of the same type
    //          can store multiple values in a single variable
    //          can be accessed using an index

    std::string cars[4];

    cars[0] = "Lexus";
    cars[1] = "Mazda";
    cars[2] = "Honda";
    cars[3] = "Ford";

    std::cout << cars[0] << std::endl;
    std::cout << cars[1] << std::endl;
    std::cout << cars[2] << std::endl;
    std::cout << cars[3] << std::endl;

    return 0;
}

#include <iostream>

/**
 * @brief Main entry point of the program
 *
 * This function initializes an array of car brands and outputs each brand
 * to the console. The array contains four elements, each representing a
 * different car brand. It then prints each brand on a new line.
 *
 * @return 0 on success
 */
int main() {

    std::string cars[4];

    cars[0] = "Lexus";
    cars[1] = "Mazda";
    cars[2] = "Honda";
    cars[3] = "Ford";

    std::cout << cars[0] << std::endl;
    std::cout << cars[1] << std::endl;
    std::cout << cars[2] << std::endl;
    std::cout << cars[3] << std::endl;

    return 0;
}

#include <iostream>

/**
 * @brief Main entry point of the program
 *
 * This function initializes an array of prices and outputs each price to the console.
 * The array contains five elements, each representing a different price. The prices
 * are iterated and printed using standard output.
 *
 * @return 0 on successful execution
 */
int main() {
    
    double prices[] = {1.99, 2.99, 3.99, 4.99, 5.99};

    std::cout << prices[0] << std::endl;
    std::cout << prices[1] << std::endl;
    std::cout << prices[2] << std::endl;
    std::cout << prices[3] << std::endl;
    std::cout << prices[4] << std::endl;

    return 0;
}

#include <iostream>

/**
 * @brief Main entry point of the program
 *
 * This function initializes an array of prices and outputs each price to the console.
 * The array contains five elements, each representing a different price. The prices
 * are iterated and printed using standard output.
 *
 * @return 0 on successful execution
 */
int main() {
    
    double prices[5];

    prices[0] = 10.99;
    prices[1] = 12.50;
    prices[2] = 9.99;
    prices[3] = 7.50;
    prices[4] = 6.00;

    std::cout << prices[0] << std::endl;
    std::cout << prices[1] << std::endl;
    std::cout << prices[2] << std::endl;
    std::cout << prices[3] << std::endl;
    std::cout << prices[4] << std::endl;

    return 0;
}

#include <iostream>

/**
 * @brief Main entry point of the program
 *
 * The function calculates and prints the size of a double
 * variable in bytes using the sizeof() operator.
 */
int main() {

    double pi = 3.14159;
    int size = sizeof(double);

    std::cout << "The size of pi is: " << size << " bytes" << std::endl;

    return 0;
}

#include <iostream>

/**
 * @brief Main entry point of the program
 *
 * The function calculates and prints the size of a double
 * variable in bytes using the sizeof() operator.
 */
int main() {

    double pi = 3.14159;

    std::cout << sizeof(pi) << " bytes" << std::endl;

    return 0;
}

#include <iostream>

/**
 * @brief Main entry point of the program
 *
 * The function calculates and prints the size of a double
 * variable in bytes using the sizeof() operator.
 */
int main() {

    double pi = 3.14159;

    std::cout << sizeof(double) << " bytes" << std::endl;

    return 0;
}

#include <iostream>

/**
 * @brief Main function of the program
 *
 * This function initializes a string 'name' and a double 'pi'. It then 
 * outputs the size in bytes of the 'name' string to the console.
 *
 * @return 0 on success
 */
int main() {

    std::string name = "John";
    double pi = 3.14159;

    std::cout << sizeof(name) << " bytes" << std::endl;

    return 0;
}

#include <iostream>

/**
 * @brief Main function of the program
 *
 * This function initializes a string 'name', a double 'pi', and a char 'grade',
 * and outputs the size in bytes of the 'grade' char to the console.
 *
 * @return 0 on success
 */
int main() {

    std::string name = "John";
    double pi = 3.14159;
    char grade = 'A';

    std::cout << sizeof(grade) << " bytes" << std::endl;

    return 0;
}

#include <iostream>

/**
 * @brief Main function of the program
 *
 * This function initializes a string 'name', a double 'pi', a char 'grade',
 * and a bool 'hungry'. It then outputs the size in bytes of the 'hungry' 
 * boolean variable to the console.
 *
 * @return 0 on success
 */
int main() {

    std::string name = "John";
    double pi = 3.14159;
    char grade = 'A';
    bool hungry = true;

    std::cout << sizeof(hungry) << " bytes" << std::endl;

    return 0;
}

#include <iostream>

/**
 * @brief Main entry point of the program
 *
 * This function initializes an array of grade characters and outputs the size
 * of the array in bytes using the sizeof operator.
 *
 * @return 0 on successful execution
 */
int main() {

    char grades[] = {'A', 'B', 'C', 'D', 'F'};

    std::cout << sizeof(grades) << " bytes" << std::endl;

    return 0;
}

#include <iostream>

/**
 * @brief Main entry point of the program
 *
 * This function initializes an array of grade characters and outputs the
 * number of elements in the array. The size of the array is determined by
 * dividing the total byte size of the array by the byte size of a single 
 * char element.
 *
 * @return 0 on successful execution
 */
int main() {

    char grades[] = {'A', 'B', 'C', 'D', 'F'};

    std::cout << sizeof(grades)/sizeof(char) << " elements" << std::endl;

    return 0;
}

#include <iostream>

/**
 * @brief Main entry point of the program
 *
 * This function initializes an array of car brands and outputs the number
 * of elements in the array. The size of the array is determined by dividing
 * the total byte size of the array by the byte size of a single std::string
 * element.
 *
 * @return 0 on successful execution
 */
int main() {

    std::string cars[] = {"Lexus", "Mazda", "Honda", "Ford"};

    std::cout << sizeof(cars)/sizeof(std::string) << " elements" << std::endl;

    return 0;
}

#include <iostream>

/**
 * @brief Main entry point of the program
 *
 * This function initializes an array of car brands and outputs each brand
 * to the console. The array contains four elements, each representing a
 * different brand. The brands are iterated and printed using standard output.
 *
 * @return 0 on successful execution
 */
int main() {

    std::string cars[4] = {"Lexus", "Mazda", "Honda", "Ford"};

    for (int i = 0; i < 4; i++) {
        std::cout << cars[i] << std::endl;
    }

    return 0;
}

#include <iostream>

/**
 * @brief Main entry point of the program
 *
 * This function initializes an array of car brands and outputs each brand
 * to the console. The array contains four elements, each representing a
 * different brand. The brands are iterated and printed using standard output.
 *
 * @return 0 on successful execution
 */
int main() {

    std::string cars[] = {"Lexus", "Mazda", "Honda", "Ford"};

    for (int i = 0; i < sizeof(cars)/sizeof(std::string); i++) {
        std::cout << cars[i] << std::endl;
    }

    return 0;
}

#include <iostream>

/**
 * @brief Main entry point of the program
 *
 * This function initializes an array of grade characters and outputs each
 * grade to the console using a for loop.
 *
 * @return 0 on successful execution
 */
int main() {

    char grades[] = {'A', 'B', 'C', 'D', 'F'};

    for (int i = 0; i < sizeof(grades)/sizeof(char); i++) {
        std::cout << grades[i] << std::endl;
    }

    return 0;
}

#include <iostream>

/**
 * @brief Main entry point of the program
 *
 * This function demonstrates how to use a foreach loop to iterate over an array of
 * strings and print each string to the console.
 *
 * @return 0 on successful execution
 */
int main() {

    std::string cars[] = {"Lexus", "Toyota", "Honda", "Ford"};

    for (std::string car : cars) {
        std::cout << car << std::endl;
    }

    return 0;
}

#include <iostream>

/**
 * @brief Main entry point of the program
 *
 * This function initializes an array of grades and outputs each grade to the console.
 * It uses a range-based for loop to iterate through the array and print each grade.
 *
 * @return 0 on successful execution
 */
int main() {

    int grades[] = {100, 90, 80, 70, 60};

    for (int grade : grades) {
        std::cout << grade << std::endl;
    }

    return 0;
}

#include <iostream>

double getTotal(double prices[], int size);

/**
 * @brief The main entry point of the program
 *
 * @details This function contains the main logic of the program.
 *          It creates an array of prices, calculates the total
 *          and prints it to the console.
 */
int main() {

    // pass an array to a function
    double prices[] = {10.99, 12.50, 9.99, 7.50, 6.00};
    int size = sizeof(prices) / sizeof(prices[0]);
    double total = getTotal(prices, size);

    std::cout << "Total: $" << total << std::endl;

    return 0;
}

/**
 * @brief Calculates the total of an array of prices
 *
 * @param prices the array of prices
 *
 * @return the total of the prices
 */
double getTotal(double prices[], int size) {
    double total = 0;
    for (int i = 0; i < size; i++) {
        total += prices[i];
    }
    return total;
}

#include <iostream>

int searchArray(int array[], int size, int element);

/**
 * @brief The main entry point of the program
 *
 * @details This function asks the user to input a number and checks if it is present in the array.
 *          If the number is present in the array, it outputs the index of the number.
 *          Otherwise, it tells the user that the number was not found in the array.
 */
int main() {

    int numbers[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int size = sizeof(numbers) / sizeof(int);
    int index;
    int myNum;

    std::cout << "Enter a number: ";
    std::cin >> myNum;

    index = searchArray(numbers, size, myNum);

    if (index != -1) {
        std::cout << "The number " << myNum << " is at index " << index << std::endl;
    }
    else {
        std::cout << "The number " << myNum << " was not found in the array" << std::endl;
    }

    return 0;
}

/**
 * @brief Searches an array for an element and returns the index of the element if found
 *
 * @param array the array to search
 * @param size the size of the array
 * @param element the element to search for
 *
 * @return the index of the element if found, -1 otherwise
 */
int searchArray(int array[], int size, int element) {

    for (int i = 0; i < size; i++) {
        if (array[i] == element) {
            return i;
        }
    }

    return -1;
}

#include <iostream>

int searchArray(std::string array[], int size, std::string element);

/**
 * @brief The main entry point of the program
 *
 * @details This function asks the user to input their favorite food and checks if it is present in the array.
 *          If the food is present in the array, it outputs the food.
 *          Otherwise, it tells the user that the food was not found in the array.
 */
int main() {

    std::string foods[] = {"apple", "banana", "cherry", "date", "elderberry"};
    int size = sizeof(foods) / sizeof(std::string);
    int index;
    std::string myFood;

    std::cout << "Enter your favorite food: ";
    std::cin >> myFood;

    index = searchArray(foods, size, myFood);

    if (index != -1) {
        std::cout << "Your favorite food is at index " << index << ": " << foods[index] << std::endl;
    }
    else {
        std::cout << "Your favorite food " << myFood << " is not in the list" << std::endl;
    }

    return 0;
}

/**
 * @brief Searches an array for an element and returns the index of the element if found
 *
 * @param array the array to search
 * @param size the size of the array
 * @param element the element to search for
 *
 * @return the index of the element if found, -1 otherwise
 */
int searchArray(std::string array[], int size, std::string element) {

    for (int i = 0; i < size; i++) {
        if (array[i] == element) {
            return i;
        }
    }

    return -1;
}

#include <iostream>

int main() {

    // sort an array
    // bubble sort
    int arr[] = {5, 2, 8, 1, 9, 3, 6, 4, 7};
    int size = sizeof(arr) / sizeof(arr[0]);

    for (int element : arr) {
        std::cout << element << " ";
    }

    return 0;
}

#include <iostream>

void sortArray(int arr[], int size);

/**
 * @brief Entry point of the program
 *
 * This program sorts an array of integers in descending order using the
 * bubble sort algorithm, and prints the sorted array to the console.
 *
 * @return 0 on success
 */
int main() {

    int array[] = {5, 2, 8, 1, 9, 3, 6, 4, 7};
    int size = sizeof(array) / sizeof(array[0]);

    sortArray(array, size);

    for (int element : array) {
        std::cout << element << " ";
    }

    return 0;
}

/**
 * @brief Sorts an array of integers in descending order using the
 *        bubble sort algorithm.
 *
 * @param arr the array to be sorted
 * @param size the size of the array
 */
void sortArray(int arr[], int size) {

    int temp;

    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size - i - 1; j++) {
            if (arr[j] < arr[j + 1]) {
                temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

#include <iostream>

int main() {
    
    // fill() = used to fill a container with a specific value
    //          fill(begin, end, value)

    std::string bikes[10] = {"Suzuki", "Honda", "Yamaha", "Kawasaki", "BMW", "Triumph", "Aprilia", "KTM", "MV Agusta", "Ducati"};

    for (std::string bike : bikes) {
        std::cout << bike << std::endl;
    }

    return 0;
}

#include <iostream>

/**
 * @brief The main entry point of the program
 *
 * @details This function initializes an array of strings, fills the array with
 *          the string "Triumph", and then iterates over the array and prints
 *          each string to the console.
 *
 * @return 0 on successful execution
 */
int main() {

    std::string bikes[100];

    fill(bikes, bikes + 100, "Triumph");

    for (std::string bike : bikes) {
        std::cout << bike << std::endl;
    }

    return 0;
}

#include <iostream>

/**
 * @brief Main entry point of the program
 *
 * This function creates an array of SIZE elements and fills it with the string "Triumph".
 * It then prints out each element of the array to the console.
 *
 * @return 0 on successful execution
 */
int main() {

    const int SIZE = 100;

    std::string bikes[SIZE];

    fill(bikes, bikes + SIZE, "Triumph");

    for (std::string bike : bikes) {
        std::cout << bike << std::endl;
    }

    return 0;
}

#include <iostream>

/**
 * @brief The main entry point of the program
 *
 * @details This function initializes an array of strings representing bike brands,
 *          fills the first half of the array with the string "Triumph" and the second
 *          half with the string "Honda". It then iterates over the array and prints
 *          each brand to the console.
 *
 * @return 0 on successful execution
 */
int main() {

    const int SIZE = 100;

    std::string bikes[SIZE];

    fill(bikes, bikes + (SIZE/2), "Triumph");
    fill(bikes + (SIZE/2), bikes + SIZE, "Honda");

    for (std::string bike : bikes) {
        std::cout << bike << std::endl;
    }

    return 0;
}

#include <iostream>

/**
 * @brief The main entry point of the program
 *
 * @details This function initializes an array of strings representing bike brands,
 *          fills the first third of the array with the string "Triumph", the second
 *          third with the string "Honda", and the final third with the string "Ducati". It
 *          then iterates over the array and prints each brand to the console.
 *
 * @return 0 on successful execution
 */
int main() {

    const int SIZE = 99;

    std::string bikes[SIZE];

    fill(bikes, bikes + (SIZE/3), "Triumph");
    fill(bikes + (SIZE/3), bikes + (SIZE/3)*2, "Honda");
    fill(bikes + (SIZE/3)*2, bikes + SIZE, "Ducati");

    for (std::string bike : bikes) {
        std::cout << bike << std::endl;
    }

    return 0;
}

#include <iostream>
#include <string>

/**
 * @brief A simple program that asks the user for five bike names and
 *        prints them out afterwards.
 *
 * @details This program does not do any error checking on the input. It
 *          simply assumes that the user will enter five valid bike names.
 */
int main() {

    std::string bikes[5];
    int size = sizeof(bikes) / sizeof(bikes[0]);

    for (int i = 0; i < size; i++) {
        std::cout << "Enter a bike #" << i + 1 << ": ";
        std::getline(std::cin, bikes[i]);
    }

    std::cout << "Your bikes are: " << std::endl;

    for (std::string bike : bikes) {
        std::cout << bike << std::endl;
    }

    return 0;
}

#include <iostream>
#include <string>

/**
 * @brief A simple program that asks the user for five bike names and
 *        prints them out afterwards.
 *
 * @details This program does not do any error checking on the input. It
 *          simply assumes that the user will enter five valid bike names.
 */
int main() {

    std::string bikes[5];
    int size = sizeof(bikes) / sizeof(bikes[0]);

    for (int i = 0; i < size; i++) {
        std::cout << "Enter a bike or 'q' to quit #" << i + 1 << ": ";
        std::getline(std::cin, bikes[i]);

        if (bikes[i] == "q") {
            break;
        }

        // the problem is that 'q' will be added to the array, which we don't want
    }

    std::cout << "Your bikes are: " << std::endl;

    for (std::string bike : bikes) {
        std::cout << bike << std::endl;
    }

    return 0;
}

#include <iostream>
#include <string>

/**
 * @brief A simple program that asks the user for five bike names and
 *        prints them out afterwards.
 *
 * @details This program does not do any error checking on the input. It
 *          simply assumes that the user will enter five valid bike names.
 */
int main() {

    std::string bikes[5];
    int size = sizeof(bikes) / sizeof(bikes[0]);
    std::string temp;

    for (int i = 0; i < size; i++) {
        std::cout << "Enter a bike or 'q' to quit #" << i + 1 << ": ";
        std::getline(std::cin, temp);

        if (temp == "q") {
            break;
        }
        else
        {
            bikes[i] = temp;
        }
    }

    std::cout << "Your bikes are: " << std::endl;

    for (std::string bike : bikes) {
        std::cout << bike << std::endl;
    }

    return 0;
}

#include <iostream>
#include <string>

/**
 * @brief A simple program that asks the user for five bike names and
 *        prints them out afterwards.
 *
 * @details This program does not do any error checking on the input. It
 *          simply assumes that the user will enter five valid bike names.
 */
int main() {

    // the problem is the empty string will be added to the array if the user enters fewer than 5

    std::string bikes[5];
    int size = sizeof(bikes) / sizeof(bikes[0]);
    std::string temp;

    for (int i = 0; i < size; i++) {
        std::cout << "Enter a bike or 'q' to quit #" << i + 1 << ": ";
        std::getline(std::cin, temp);

        if (temp == "q") {
            break;
        }
        else
        {
            bikes[i] = temp;
        }
    }

    std::cout << "Your bikes are: " << std::endl;

    for (std::string bike : bikes) {
        std::cout << bike << std::endl;
    }

    return 0;
}

#include <iostream>
#include <string>

/**
 * @brief A simple program that asks the user for five bike names and
 *        prints them out afterwards.
 *
 * @details This program does not do any error checking on the input. It
 *          simply assumes that the user will enter five valid bike names.
 */
int main() {

    std::string bikes[5];
    int size = sizeof(bikes) / sizeof(bikes[0]);
    std::string temp;

    for (int i = 0; i < size; i++) {
        std::cout << "Enter a bike or 'q' to quit #" << i + 1 << ": ";
        std::getline(std::cin, temp);

        if (temp == "q") {
            break;
        }
        else
        {
            bikes[i] = temp;
        }
    }

    std::cout << "Your bikes are: " << std::endl;

    // change the for loop to check for empty strings
    for (int i = 0; !bikes[i].empty(); i++) {
        std::cout << bikes[i] << std::endl;
    }

    return 0;
}

#include <iostream>

/**
 * @brief Main entry point of the program
 *
 * This function prints out three car models from the given array, one from each row.
 */
int main() {

    std::string models[][3] = {
        {"Focus", "Fusion", "Ranger"},
        {"Civic", "Accord", "CRV"},
        {"Camry", "Corolla", "RAV4"}
    };

    std::cout << models[0][0] << std::endl;
    std::cout << models[1][1] << std::endl;
    std::cout << models[2][2] << std::endl; 

    return 0;
}

#include <iostream>

/**
 * @brief Main entry point of the program
 *
 * This function creates a 2D array of strings and displays the contents of
 * the array to the user.
 *
 * @return 0 if the program is successful, non-zero otherwise.
 */
int main() {

    std::string models[][3] = {
        {"Focus", "Fusion", "Ranger"},
        {"Civic", "Accord", "CRV"},
        {"Camry", "Corolla", "RAV4"}
    };

    std::cout << models[0][0] << " ";
    std::cout << models[0][1] << " ";
    std::cout << models[0][2] << std::endl;

    std::cout << models[1][0] << " ";
    std::cout << models[1][1] << " ";
    std::cout << models[1][2] << std::endl;

    std::cout << models[2][0] << " ";
    std::cout << models[2][1] << " ";
    std::cout << models[2][2] << std::endl; 

    return 0;
}

#include <iostream>

/**
 * @brief Main entry point of the program
 *
 * This function prints out the locations of three car models from the given array, one from each row.
 */
int main() {

    std::string models[][3] = {
        {"Focus", "Fusion", "Ranger"},
        {"Civic", "Accord", "CRV"},
        {"Camry", "Corolla", "RAV4"}
    };

    int rows = sizeof(models) / sizeof(models[0]);
    int columns = sizeof(models[0]) / sizeof(models[0][0]);

    for (int i = 0; i < rows; i++) {
        std::cout << models[i] << std::endl;
    }

    return 0;
}

#include <iostream>

/**
 * @brief Main entry point of the program
 *
 * This function initializes a 2D array of strings representing car models and
 * outputs each model to the console. The size of the array is determined at
 * compile time using the sizeof operator.
 *
 * @return 0 on successful execution
 */
int main() {

    std::string models[][3] = {
        {"Focus", "Fusion", "Ranger"},
        {"Civic", "Accord", "CRV"},
        {"Camry", "Corolla", "RAV4"}
    };

    int rows = sizeof(models) / sizeof(models[0]);
    int columns = sizeof(models[0]) / sizeof(models[0][0]);

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < columns; j++) {
            std::cout << models[i][j] << " ";
        }
    }

    return 0;
}

#include <iostream>

/**
 * @brief Main entry point of the program
 *
 * This function initializes a 2D array with car models and prints
 * each model in a formatted manner. It calculates the number of rows
 * and columns in the array, then iterates over each element, displaying
 * them in a tabular format.
 */
int main() {

    std::string models[][3] = {
        {"Focus", "Fusion", "Ranger"},
        {"Civic", "Accord", "CRV"},
        {"Camry", "Corolla", "RAV4"}
    };

    int rows = sizeof(models) / sizeof(models[0]);
    int columns = sizeof(models[0]) / sizeof(models[0][0]);

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < columns; j++) {
            std::cout << models[i][j] << " ";
        }
        std::cout << std::endl;
    }

    return 0;
}

#include <iostream>

/**
 * @brief The main entry point of the program
 *
 * @details This function contains the game's logic and user interface. It
 *          prompts the user with a series of questions, and then displays
 *          the results of how many questions were answered correctly.
 *
 * @return 0 on successful execution
 */
int main() {

    std::string questions[] = {
        "1. What is the capital of France?",
        "2. What is the largest planet in our solar system?",
        "3. What is the smallest planet in our solar system?",
        "4. What is the largest mammal in the world?"
    };

    std::string options[] = {
        "a. Rome", "b. London", "c. Paris", "d. Madrid",
        "a. Jupiter", "b. Saturn", "c. Neptune", "d. Earth",
        "a. Earth", "b. Venus", "c. Mercury", "d. Mars",
        "a. Elephant", "b. Whale", "c. Lion", "d. Crocodile"
    };

    char answerKey[] = {'c', 'a', 'c', 'b'};

    int size = sizeof(questions) / sizeof(questions[0]);
    char guess;
    int score;

    for (int i = 0; i < size; i++) {
        std::cout << "***************************************************" << std::endl;
        std::cout << questions[i] << std::endl;
        std::cout << "***************************************************" << std::endl;

        for (int j = i * 4; j < (i * 4 + 4); j++) {
            std::cout << options[j] << std::endl;
        }

        std::cin >> guess;
        guess = tolower(guess);

        if (guess == answerKey[i]) {
            std::cout << "Correct!" << std::endl;
            score++;
        }
        else {
            std::cout << "Incorrect!" << std::endl;
            std::cout << "The correct answer is: " << answerKey[i] << std::endl;
        }
    }
    std::cout << "***************************************************" << std::endl;
    std::cout << "*                    RESULTS                      *" << std::endl;
    std::cout << "***************************************************" << std::endl;
    std::cout << "You got " << score << " out of " << size << " questions correct!" << std::endl;
    std::cout << "Score: " << (score/size * 100) << std::endl;

    return 0;
}

#include <iostream>

/**
 * @brief The main entry point of the program
 *
 * @details This function contains the game's logic and user interface. It
 *          prompts the user with a series of questions, and then displays
 *          the results of how many questions were answered correctly.
 *
 * @return 0 on successful execution
 */
int main() {

    std::string questions[] = {
        "1. What is the capital of France?",
        "2. What is the largest planet in our solar system?",
        "3. What is the smallest planet in our solar system?",
        "4. What is the largest mammal in the world?"
    };

    std::string options[] = {
        "a. Rome", "b. London", "c. Paris", "d. Madrid",
        "a. Jupiter", "b. Saturn", "c. Neptune", "d. Earth",
        "a. Earth", "b. Venus", "c. Mercury", "d. Mars",
        "a. Elephant", "b. Whale", "c. Lion", "d. Crocodile"
    };

    char answerKey[] = {'c', 'a', 'c', 'b'};

    int size = sizeof(questions) / sizeof(questions[0]);
    char guess;
    int score = 0;

    for (int i = 0; i < size; i++) {
        std::cout << "***************************************************" << std::endl;
        std::cout << questions[i] << std::endl;
        std::cout << "***************************************************" << std::endl;

        for (int j = i * 4; j < (i * 4 + 4); j++) {
            std::cout << options[j] << std::endl;
        }

        std::cin >> guess;
        guess = tolower(guess);

        if (guess == answerKey[i]) {
            std::cout << "Correct!" << std::endl;
            score++;
        }
        else {
            std::cout << "Incorrect!" << std::endl;
            std::cout << "The correct answer is: " << answerKey[i] << std::endl;
        }
    }
    std::cout << "***************************************************" << std::endl;
    std::cout << "*                    RESULTS                      *" << std::endl;
    std::cout << "***************************************************" << std::endl;
    std::cout << "You got " << score << " out of " << size << " questions correct!" << std::endl;
    std::cout << "Score: " << (score/(double)size * 100) << "%" << std::endl;

    return 0;
}

#include <iostream>

/**
 * @brief The main entry point of the program
 *
 * @details This function demonstrates how to print the memory address of a
 *          variable to the console.
 *
 * @return 0 on success
 */
int main() {

    std::string name = "Wayne";
    int age = 30;
    bool isMale = true;

    std::cout << "Address of name: " << &name << std::endl;
    std::cout << "Address of age: " << &age << std::endl;
    std::cout << "Address of isMale: " << &isMale << std::endl;

    return 0;
}

#include <iostream>

// this is pass by value
// it creates a copy of the objects
// and passes the copy by value
// therefore will NOT swap the original objects

void swap(std::string x, std::string y);

int main() {

    // pass by value = pass the value of an object by reference
    // pass by reference = pass the address of an object by reference

    std::string x = "Cool";
    std::string y = "Uncool";
    
    swap(x, y);

    std::cout << x << '\n';
    std::cout << y << '\n';

    return 0;
}

void swap(std::string x, std::string y) {
    std::string temp = x;
    x = y;
    y = temp;
}

#include <iostream>

// this is pass by reference
// we pass the locations and then
// swap the values at the locations

void swap(std::string &x, std::string &y);

int main() {

    // pass by value = pass the value of an object by reference
    // pass by reference = pass the address of an object by reference

    std::string x = "Cool";
    std::string y = "Uncool";
    
    swap(x, y);

    std::cout << x << '\n';
    std::cout << y << '\n';

    return 0;
}

void swap(std::string &x, std::string &y) {
    std::string temp = x;
    x = y;
    y = temp;
}

#include <iostream>

// this is pass by reference
// we pass the locations and then
// swap the values at the locations

void swap(std::string &x, std::string &y);

/**
 * @brief The main entry point of the program
 *
 * @details This function demonstrates how to swap two strings using pass by
 *          reference. It creates two strings, swaps them using the swap
 *          function, and then prints the swapped strings to the console.
 *
 * @return 0 on success
 */
int main() {

    // pass by value = pass the value of an object by reference
    // pass by reference = pass the address of an object by reference

    std::string x = "Cool";
    std::string y = "Uncool";
    
    swap(x, y);

    std::cout << x << '\n';
    std::cout << y << '\n';

    return 0;
}

void swap(std::string &x, std::string &y) {
    std::string temp = x;
    x = y;
    y = temp;
}

#include <iostream>

void printInfo(std::string name, int age);

int main() {

    // const parameters = parameters that cannot be changed after the function has been called
    //                    they are used to prevent the function from modifying the original value of the parameter
    //                    code is more secure and conveys intent better
    //                    useful for reference and pointers

    std::string name = "Wayne";
    int age = 57;

    printInfo(name, age);

    return 0;
}

void printInfo(std::string name, int age) {
    std::cout << "Name: " << name << std::endl;
    std::cout << "Age: " << age << std::endl;
}

#include <iostream>

// prevent unwanted changes by adding const to the parameters

void printInfo(const std::string name, const int age);

int main() {

    // const parameters = parameters that cannot be changed after the function has been called
    //                    they are used to prevent the function from modifying the original value of the parameter
    //                    code is more secure and conveys intent better
    // useful for reference (so the value at the address cannot be changed) and pointers (so the address itself cannot be changed)

    std::string name = "Wayne";
    int age = 57;

    printInfo(name, age);

    return 0;
}

void printInfo(const std::string name, const int age) {
    std::cout << "Name: " << name << std::endl;
    std::cout << "Age: " << age << std::endl;
}

#include <iostream>

// test credit card account numbers

int getDigit(const int number);
int sumOddDigits(const std::string number);
int sumEvenDigits(const std::string number);

int main() {

    // Luhn Algorithm
    // 1. Double every second digit starting from right to left. If the doubled result is 2 digits, split them up.
    // 2. Add all the digits together.
    // 3. Add all odd numbered digits from left to right of the original number.
    // 4 Sum the results from steps 2 and 3.
    // 5. If the sum from step 4 is divisible by 10, the number is valid.

    return 0;
}

int getDigit(const int number) {
    return 0;
}

int sumOddDigits(const std::string number) {
    return 0;
}   

int sumEvenDigits(const std::string number) {   
    return 0;
}

#include <iostream>
#include <string>

// Program to test credit card account numbers
    // Luhn Algorithm
    // 1. Double every second digit starting from right to left. If the doubled result is 2 digits, split them up.
    // 2. Add all the digits together.
    // 3. Add all odd numbered digits from left to right of the original number.
    // 4 Sum the results from steps 2 and 3.
    // 5. If the sum from step 4 is divisible by 10, the number is valid.

int getDigit(const int number);
int sumOddDigits(const std::string number);
int sumEvenDigits(const std::string number);

/**
 * The main entry point of the program.
 *
 * This function prompts the user for a credit card number, checks the number
 * using the Luhn Algorithm, and displays whether the number is valid or not.
 */
int main() {

    std::string cardNumber;
    int result;

    std::cout << "Enter your credit card number: ";
    std::getline(std::cin, cardNumber);

    result = sumOddDigits(cardNumber) + sumEvenDigits(cardNumber);

    if (result % 10 == 0) {
        std::cout << "The credit card number is valid." << std::endl;
    }
    else {
        std::cout << "The credit card number is not valid." << std::endl;
    }

    return 0;
}

/**
 * @brief Returns the sum of the digits of the given number.
 *
 * This is used in the Luhn Algorithm to calculate the sum of the digits of
 * every second digit, starting from the right, in the card number.
 *
 * @param number The number to get the sum of the digits from.
 *
 * @return The sum of the digits of the given number.
 */
int getDigit(const int number) {
    
    return number % 10 + (number / 10 % 10);
}

/**
 * @brief Calculates the sum of the digits of every second digit, 
 *        starting from the right, in the card number.
 *
 * @param cardNumber The credit card number as a string.
 * @return The sum of processed digits.
 */
int sumOddDigits(const std::string cardNumber) {
    
    int sum = 0;

    for (int i = cardNumber.size() - 1; i >= 0; i-=2) {
        sum += getDigit(cardNumber[i] - '0');
    }
    
    return sum;
}   

/**
 * @brief Calculates the sum of the digits of every second digit, 
 *        starting from the second-to-last, in the card number.
 *
 * @param cardNumber The credit card number as a string.
 * @return The sum of processed digits, where each digit is doubled.
 */
int sumEvenDigits(const std::string cardNumber) {   
    
    int sum = 0;

    for (int i = cardNumber.size() - 2; i >= 0; i-=2) {
        sum += getDigit(cardNumber[i] - '0')*2;
    }
    
    return sum;
}

#include <iostream>

int main() {

    // pointer = a variable that holds the address of another variable
    // & = the address of operator
    // * = the dereference operator
    // int* = the type of the pointer
    // int = the type of the variable that the pointer points to

    std::string name = "Wayne";
    std::string *namePtr = &name;

    std::cout << namePtr << std::endl;

    return 0;
}

#include <iostream>

/**
 * @brief Demonstrates the use of pointers in C++.
 *
 * @details This function initializes a string variable and a pointer 
 *          to that string, then prints the address stored in the pointer.
 *
 * @return 0 on successful execution.
 */
int main() {

    std::string name = "Wayne";
    std::string *namePtr = &name;

    // prints the address of the name variable
    std::cout << namePtr << std::endl;

    return 0;
}

#include <iostream>

/**
 * @brief Demonstrates the use of pointers in C++.
 *
 * @details This function initializes a string variable and a pointer 
 *          to that string, then prints the address stored in the pointer.
 *
 * @return 0 on successful execution.
 */
int main() {

    std::string name = "Wayne";
    std::string *namePtr = &name;

    // prints the value at the address stored in namePtr
    std::cout << *namePtr << std::endl;

    return 0;
}

#include <iostream>

/**
 * @brief Demonstrates the use of pointers in C++.
 *
 * @details This function initializes a string variable and a pointer 
 *          to that string, then prints the address stored in the pointer.
 *
 * @return 0 on successful execution.
 */
int main() {

    std::string name = "Wayne";
    int age = 30;

    std::string *namePtr = &name;
    int *agePtr = &age;

    // prints the address
    std::cout << namePtr << std::endl;
    std::cout << agePtr << std::endl;

    return 0;
}

#include <iostream>

/**
 * @brief Demonstrates the use of pointers in C++.
 *
 * @details This function initializes a string variable and a pointer 
 *          to that string, then prints the address stored in the pointer.
 *
 * @return 0 on successful execution.
 */
int main() {

    std::string name = "Wayne";
    int age = 30;

    std::string *namePtr = &name;
    int *agePtr = &age;

    // prints the value at the address
    std::cout << *namePtr << std::endl;
    std::cout << *agePtr << std::endl;

    return 0;
}

#include <iostream>

/**
 * @brief The main entry point of the program
 *
 * @details This function demonstrates pointers and addresses in C++.
 *          It shows how to declare and use pointers and how to use the address of operator (&)
 *          and the dereference operator (*).
 */
int main() {

    std::string name = "Wayne";
    int age = 30;
    std::string pizzas[5] = {"Pepperoni", "Hawaiian", "Mushroom", "Vegetarian", "Cheese"};

    std::string *namePtr = &name;
    int *agePtr = &age;
    // the array is a pointer to the first element
    // so no need for & (the address of operator)
    std::string *pizzasPtr = pizzas;

    // prints the value at the address
    std::cout << *namePtr << std::endl;
    std::cout << *agePtr << std::endl;
    std::cout << *pizzasPtr << std::endl;

    return 0;
}

#include <iostream>

int main() {

    // null value = when a pointer is pointing at a null value
    //              that pointer is not pointing to anything
    // null pointer = a pointer that is not pointing to anything
    //                useful when determining if an address 
    //                was successfully assigned to a pointer
    // nullptr = keyword representing the null pointer literal

    return 0;
}

#include <iostream>

/**
 * @brief Entry point of the program
 *
 * This program demonstrates the use of null pointers and the nullptr keyword.
 * It checks if a pointer has been assigned a null value and prints the result to the console.
 *
 * @return 0 on success
 */
int main() {

    // null value = when a pointer is pointing at a null value
    //              that pointer is not pointing to anything
    // null pointer = a pointer that is not pointing to anything
    //                useful when determining if an address 
    //                was successfully assigned to a pointer
    // nullptr = keyword representing the null pointer literal

    int *p = nullptr;
    int x = 567;

    p = &x;

    if (p == nullptr) {
        std::cout << "p was not assigned to nullptr" << std::endl;
    }
    else {
        std::cout << "p was assigned to nullptr" << std::endl;
    }
    
    return 0;
}

#include <iostream>

/**
 * @brief Entry point of the program
 *
 * This program demonstrates the use of null pointers and the nullptr keyword.
 * It checks if a pointer has been assigned a null value and prints the result to the console.
 *
 * @return 0 on success
 */
int main() {

    // null value = when a pointer is pointing at a null value
    //              that pointer is not pointing to anything
    // null pointer = a pointer that is not pointing to anything
    //                useful when determining if an address 
    //                was successfully assigned to a pointer
    // nullptr = keyword representing the null pointer literal

    int *p = nullptr;
    int x = 567;

    //p = &x;

    // IF THE POINTER IS NOT ASSIGNED, IT IS NOT SAFE TO DEREFERENCE!

    if (p == nullptr) {
        std::cout << "p was not assigned to nullptr" << std::endl;
    }
    else {
        std::cout << "p was assigned to nullptr" << std::endl;
    }
    
    return 0;
}

#include <iostream>

/**
 * @brief Entry point of the program
 *
 * This program demonstrates the use of null pointers and the nullptr keyword.
 * It checks if a pointer has been assigned a null value and prints the result to the console.
 *
 * @return 0 on success
 */
int main() {

    // null value = when a pointer is pointing at a null value
    //              that pointer is not pointing to anything
    // null pointer = a pointer that is not pointing to anything
    //                useful when determining if an address 
    //                was successfully assigned to a pointer
    // nullptr = keyword representing the null pointer literal

    int *p = nullptr;
    int x = 567;

    p = &x;

    // IF THE POINTER IS ASSIGNED, IT IS SAFE TO DEREFERENCE!

    if (p == nullptr) {
        std::cout << "p was not assigned" << std::endl;
    }
    else {
        std::cout << "p was assigned" << std::endl;
        std::cout << *p << std::endl;
    }
    
    return 0;
}

#include <iostream>

/**
 * @brief Entry point of the program
 *
 * This program demonstrates the use of null pointers and the nullptr keyword.
 * It checks if a pointer has been assigned a null value and prints the result to the console.
 *
 * @return 0 on success
 */
int main() {

    // null value = when a pointer is pointing at a null value
    //              that pointer is not pointing to anything
    // null pointer = a pointer that is not pointing to anything
    //                useful when determining if an address 
    //                was successfully assigned to a pointer
    // nullptr = keyword representing the null pointer literal

    int *p = nullptr;
    int x = 567;

    p = &x;

    // When using pointers, be careful that your code isn't 
    // dereferencing a null pointer or pointing to free memory
    // that has been deallocated, which can cause a segmentation fault

    if (p == nullptr) {
        std::cout << "p was not assigned" << std::endl;
    }
    else {
        std::cout << "p was assigned" << std::endl;
        std::cout << *p << std::endl;
    }
    
    return 0;
}

#include <iostream>

int main() {

    // create a tic-toc-toe game
    
    return 0;
}

#include <iostream>

void drawBoard(char *spaces);
void playerMove(char *spaces, char player);
void computerMove(char *spaces, char computer);
bool checkWinner(char *spaces, char player, char computer);
bool checkTie(char *spaces);

int main() {

    // create a tic-toc-toe game
    
    return 0;
}

void drawBoard(char *spaces) {
    // draw the tic-tac-toe board
}

void playerMove(char *spaces, char player) {
    // get the player's move
}

void computerMove(char *spaces, char computer) {
    // get the computer's move    
}

bool checkWinner(char *spaces, char player, char computer) {
    // check if there is a winner
}

bool checkTie(char *spaces) {
    // check if there is a tie
}

#include <iostream>

void drawBoard(char *spaces);
void playerMove(char *spaces, char player);
void computerMove(char *spaces, char computer);
bool checkWinner(char *spaces, char player, char computer);
bool checkTie(char *spaces);

int main() {

    // create a tic-toc-toe game
    char spaces[9] = {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '};
    char player = 'X';
    char computer = 'O';
    bool running = true;

    drawBoard(spaces);
    
    return 0;
}

void drawBoard(char *spaces) {
    // draw the tic-tac-toe board
}

void playerMove(char *spaces, char player) {
    // get the player's move
}

void computerMove(char *spaces, char computer) {
    // get the computer's move    
}

bool checkWinner(char *spaces, char player, char computer) {
    // check if there is a winner
    return 0;
}

bool checkTie(char *spaces) {
    // check if there is a tie
    return 0;
}

#include <iostream>

void drawBoard(char *spaces);
void playerMove(char *spaces, char player);
void computerMove(char *spaces, char computer);
bool checkWinner(char *spaces, char player, char computer);
bool checkTie(char *spaces);

int main() {

    // create a tic-toc-toe game
    char spaces[9] = {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '};
    char player = 'X';
    char computer = 'O';
    bool running = true;

    drawBoard(spaces);
    
    return 0;
}

void drawBoard(char *spaces) {
    // draw the tic-tac-toe board
    std::cout << " " << spaces[0] << " | " << spaces[1] << " | " << spaces[2] << std::endl;
    std::cout << " " << spaces[3] << " | " << spaces[4] << " | " << spaces[5] << std::endl;
    std::cout << " " << spaces[6] << " | " << spaces[7] << " | " << spaces[8] << std::endl;
}

void playerMove(char *spaces, char player) {
    // get the player's move
}

void computerMove(char *spaces, char computer) {
    // get the computer's move    
}

bool checkWinner(char *spaces, char player, char computer) {
    // check if there is a winner
    return 0;
}

bool checkTie(char *spaces) {
    // check if there is a tie
    return 0;
}

#include <iostream>

void drawBoard(char *spaces);
void playerMove(char *spaces, char player);
void computerMove(char *spaces, char computer);
bool checkWinner(char *spaces, char player, char computer);
bool checkTie(char *spaces);

int main() {

    // create a tic-toc-toe game
    char spaces[9] = {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '};
    char player = 'X';
    char computer = 'O';
    bool running = true;

    drawBoard(spaces);
    
    return 0;
}

void drawBoard(char *spaces) {
    // draw the tic-tac-toe board
    std::cout << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[0] << "  |  " << spaces[1] << "  |  " << spaces[2] << std::endl;
    std::cout << "_____|_____|_____" << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[3] << "  |  " << spaces[4] << "  |  " << spaces[5] << std::endl;
    std::cout << "_____|_____|_____" << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[6] << "  |  " << spaces[7] << "  |  " << spaces[8] << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << std::endl;
}

void playerMove(char *spaces, char player) {
    // get the player's move
}

void computerMove(char *spaces, char computer) {
    // get the computer's move    
}

bool checkWinner(char *spaces, char player, char computer) {
    // check if there is a winner
    return 0;
}

bool checkTie(char *spaces) {
    // check if there is a tie
    return 0;
}

#include <iostream>

void drawBoard(char *spaces);
void playerMove(char *spaces, char player);
void computerMove(char *spaces, char computer);
bool checkWinner(char *spaces, char player, char computer);
bool checkTie(char *spaces);

int main() {

    // create a tic-toc-toe game
    char spaces[9] = {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '};
    char player = 'X';
    char computer = 'O';
    bool running = true;

    drawBoard(spaces);
    
    return 0;
}

/**
 * @brief Draw the Tic-Tac-Toe board
 *
 * This function prints out the Tic-Tac-Toe board to the console.
 *
 * @param spaces The array of characters representing the spaces on the board
 */
void drawBoard(char *spaces) {
    // draw the tic-tac-toe board
    std::cout << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[0] << "  |  " << spaces[1] << "  |  " << spaces[2] << std::endl;
    std::cout << "_____|_____|_____" << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[3] << "  |  " << spaces[4] << "  |  " << spaces[5] << std::endl;
    std::cout << "_____|_____|_____" << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[6] << "  |  " << spaces[7] << "  |  " << spaces[8] << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << std::endl;
}

void playerMove(char *spaces, char player) {
    // get the player's move
}

void computerMove(char *spaces, char computer) {
    // get the computer's move    
}

bool checkWinner(char *spaces, char player, char computer) {
    // check if there is a winner
    return 0;
}

bool checkTie(char *spaces) {
    // check if there is a tie
    return 0;
}

#include <iostream>

void drawBoard(char *spaces);
void playerMove(char *spaces, char player);
void computerMove(char *spaces, char computer);
bool checkWinner(char *spaces, char player, char computer);
bool checkTie(char *spaces);

int main() {

    // create a tic-toc-toe game
    char spaces[9] = {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '};
    char player = 'X';
    char computer = 'O';
    bool running = true;

    drawBoard(spaces);

    while (running) {
        playerMove(spaces, player);
    }
    
    return 0;
}

/**
 * @brief Draw the Tic-Tac-Toe board
 *
 * This function prints out the Tic-Tac-Toe board to the console.
 *
 * @param spaces The array of characters representing the spaces on the board
 */
void drawBoard(char *spaces) {
    // draw the tic-tac-toe board
    std::cout << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[0] << "  |  " << spaces[1] << "  |  " << spaces[2] << std::endl;
    std::cout << "_____|_____|_____" << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[3] << "  |  " << spaces[4] << "  |  " << spaces[5] << std::endl;
    std::cout << "_____|_____|_____" << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[6] << "  |  " << spaces[7] << "  |  " << spaces[8] << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << std::endl;
}

void playerMove(char *spaces, char player) {
    // get the player's move
}

void computerMove(char *spaces, char computer) {
    // get the computer's move    
}

bool checkWinner(char *spaces, char player, char computer) {
    // check if there is a winner
    return 0;
}

bool checkTie(char *spaces) {
    // check if there is a tie
    return 0;
}

#include <iostream>

void drawBoard(char *spaces);
void playerMove(char *spaces, char player);
void computerMove(char *spaces, char computer);
bool checkWinner(char *spaces, char player, char computer);
bool checkTie(char *spaces);

int main() {

    // create a tic-toc-toe game
    char spaces[9] = {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '};
    char player = 'X';
    char computer = 'O';
    bool running = true;

    drawBoard(spaces);

    while (running) {
        playerMove(spaces, player);
    }
    
    return 0;
}

/**
 * @brief Draw the Tic-Tac-Toe board
 *
 * This function prints out the Tic-Tac-Toe board to the console.
 *
 * @param spaces The array of characters representing the spaces on the board
 */
void drawBoard(char *spaces) {
    std::cout << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[0] << "  |  " << spaces[1] << "  |  " << spaces[2] << std::endl;
    std::cout << "_____|_____|_____" << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[3] << "  |  " << spaces[4] << "  |  " << spaces[5] << std::endl;
    std::cout << "_____|_____|_____" << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[6] << "  |  " << spaces[7] << "  |  " << spaces[8] << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << std::endl;
}

void playerMove(char *spaces, char player) {
    // get the player's move
    int number;

    do
    {
        /* code */
    } while (/* condition */);    
}

void computerMove(char *spaces, char computer) {
    // get the computer's move    
}

bool checkWinner(char *spaces, char player, char computer) {
    // check if there is a winner
    return 0;
}

bool checkTie(char *spaces) {
    // check if there is a tie
    return 0;
}

#include <iostream>

void drawBoard(char *spaces);
void playerMove(char *spaces, char player);
void computerMove(char *spaces, char computer);
bool checkWinner(char *spaces, char player, char computer);
bool checkTie(char *spaces);

int main() {

    // create a tic-toc-toe game
    char spaces[9] = {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '};
    char player = 'X';
    char computer = 'O';
    bool running = true;

    drawBoard(spaces);

    while (running) {
        playerMove(spaces, player);
    }
    
    return 0;
}

/**
 * @brief Draw the Tic-Tac-Toe board
 *
 * This function prints out the Tic-Tac-Toe board to the console.
 *
 * @param spaces The array of characters representing the spaces on the board
 */
void drawBoard(char *spaces) {
    std::cout << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[0] << "  |  " << spaces[1] << "  |  " << spaces[2] << std::endl;
    std::cout << "_____|_____|_____" << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[3] << "  |  " << spaces[4] << "  |  " << spaces[5] << std::endl;
    std::cout << "_____|_____|_____" << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[6] << "  |  " << spaces[7] << "  |  " << spaces[8] << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << std::endl;
}

void playerMove(char *spaces, char player) {
    // get the player's move
    int number;

    do
    {
        /* code */
    } while (number < 1 || number > 9);    
}

void computerMove(char *spaces, char computer) {
    // get the computer's move    
}

bool checkWinner(char *spaces, char player, char computer) {
    // check if there is a winner
    return 0;
}

bool checkTie(char *spaces) {
    // check if there is a tie
    return 0;
}

#include <iostream>

void drawBoard(char *spaces);
void playerMove(char *spaces, char player);
void computerMove(char *spaces, char computer);
bool checkWinner(char *spaces, char player, char computer);
bool checkTie(char *spaces);

int main() {

    // create a tic-toc-toe game
    char spaces[9] = {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '};
    char player = 'X';
    char computer = 'O';
    bool running = true;

    drawBoard(spaces);

    while (running) {
        playerMove(spaces, player);
        drawBoard(spaces);
    }
    
    return 0;
}

/**
 * @brief Draw the Tic-Tac-Toe board
 *
 * This function prints out the Tic-Tac-Toe board to the console.
 *
 * @param spaces The array of characters representing the spaces on the board
 */
void drawBoard(char *spaces) {
    std::cout << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[0] << "  |  " << spaces[1] << "  |  " << spaces[2] << std::endl;
    std::cout << "_____|_____|_____" << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[3] << "  |  " << spaces[4] << "  |  " << spaces[5] << std::endl;
    std::cout << "_____|_____|_____" << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[6] << "  |  " << spaces[7] << "  |  " << spaces[8] << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << std::endl;
}

void playerMove(char *spaces, char player) {
    // get the player's move
    int number;

    do
    {
        std::cout << "Enter a number (1-9): ";
        std::cin >> number;
        number--;

        if (spaces[number] == ' ') {
            spaces[number] = player;
        }
    } while (number < 1 || number > 9);    
}

void computerMove(char *spaces, char computer) {
    // get the computer's move    
}

bool checkWinner(char *spaces, char player, char computer) {
    // check if there is a winner
    return 0;
}

bool checkTie(char *spaces) {
    // check if there is a tie
    return 0;
}

#include <iostream>

void drawBoard(char *spaces);
void playerMove(char *spaces, char player);
void computerMove(char *spaces, char computer);
bool checkWinner(char *spaces, char player, char computer);
bool checkTie(char *spaces);

int main() {

    // create a tic-toc-toe game
    char spaces[9] = {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '};
    char player = 'X';
    char computer = 'O';
    bool running = true;

    drawBoard(spaces);

    while (running) {
        playerMove(spaces, player);
        drawBoard(spaces);

        computerMove(spaces, computer);
        drawBoard(spaces);
    }
    
    return 0;
}

/**
 * @brief Draw the Tic-Tac-Toe board
 *
 * This function prints out the Tic-Tac-Toe board to the console.
 *
 * @param spaces The array of characters representing the spaces on the board
 */
void drawBoard(char *spaces) {
    std::cout << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[0] << "  |  " << spaces[1] << "  |  " << spaces[2] << std::endl;
    std::cout << "_____|_____|_____" << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[3] << "  |  " << spaces[4] << "  |  " << spaces[5] << std::endl;
    std::cout << "_____|_____|_____" << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[6] << "  |  " << spaces[7] << "  |  " << spaces[8] << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << std::endl;
}

/**
 * @brief Allows the player to make a move on the Tic-Tac-Toe board.
 *
 * This function prompts the player to enter a number corresponding to 
 * a position on the Tic-Tac-Toe board, and updates the board with the 
 * player's symbol if the selected position is empty.
 *
 * @param spaces The array representing the current state of the board.
 * @param player The character symbol representing the player ('X' or 'O').
 */
void playerMove(char *spaces, char player) {
    int number;

    do
    {
        std::cout << "Enter a number (1-9): ";
        std::cin >> number;
        number--;

        if (spaces[number] == ' ') {
            spaces[number] = player;
        }
    } while (number < 1 || number > 9);    
}

void computerMove(char *spaces, char computer) {
    // get the computer's move    
}

bool checkWinner(char *spaces, char player, char computer) {
    // check if there is a winner
    return 0;
}

bool checkTie(char *spaces) {
    // check if there is a tie
    return 0;
}

#include <iostream>
#include <ctime>

void drawBoard(char *spaces);
void playerMove(char *spaces, char player);
void computerMove(char *spaces, char computer);
bool checkWinner(char *spaces, char player, char computer);
bool checkTie(char *spaces);

int main() {

    // create a tic-toc-toe game
    char spaces[9] = {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '};
    char player = 'X';
    char computer = 'O';
    bool running = true;

    drawBoard(spaces);

    while (running) {
        playerMove(spaces, player);
        drawBoard(spaces);

        computerMove(spaces, computer);
        drawBoard(spaces);
    }
    
    return 0;
}

/**
 * @brief Draw the Tic-Tac-Toe board
 *
 * This function prints out the Tic-Tac-Toe board to the console.
 *
 * @param spaces The array of characters representing the spaces on the board
 */
void drawBoard(char *spaces) {
    std::cout << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[0] << "  |  " << spaces[1] << "  |  " << spaces[2] << std::endl;
    std::cout << "_____|_____|_____" << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[3] << "  |  " << spaces[4] << "  |  " << spaces[5] << std::endl;
    std::cout << "_____|_____|_____" << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[6] << "  |  " << spaces[7] << "  |  " << spaces[8] << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << std::endl;
}

/**
 * @brief Allows the player to make a move on the Tic-Tac-Toe board.
 *
 * This function prompts the player to enter a number corresponding to 
 * a position on the Tic-Tac-Toe board, and updates the board with the 
 * player's symbol if the selected position is empty.
 *
 * @param spaces The array representing the current state of the board.
 * @param player The character symbol representing the player ('X' or 'O').
 */
void playerMove(char *spaces, char player) {
    int number;

    do
    {
        std::cout << "Enter a number (1-9): ";
        std::cin >> number;
        number--;

        if (spaces[number] == ' ') {
            spaces[number] = player;
        }
    } while (number < 1 || number > 9);    
}

void computerMove(char *spaces, char computer) {
    // get the computer's move
    int number;
    srand(time(0));
}

bool checkWinner(char *spaces, char player, char computer) {
    // check if there is a winner
    return 0;
}

bool checkTie(char *spaces) {
    // check if there is a tie
    return 0;
}

#include <iostream>
#include <ctime>

void drawBoard(char *spaces);
void playerMove(char *spaces, char player);
void computerMove(char *spaces, char computer);
bool checkWinner(char *spaces, char player, char computer);
bool checkTie(char *spaces);

int main() {

    // create a tic-toc-toe game
    char spaces[9] = {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '};
    char player = 'X';
    char computer = 'O';
    bool running = true;

    drawBoard(spaces);

    while (running) {
        playerMove(spaces, player);
        drawBoard(spaces);

        computerMove(spaces, computer);
        drawBoard(spaces);
    }
    
    return 0;
}

/**
 * @brief Draw the Tic-Tac-Toe board
 *
 * This function prints out the Tic-Tac-Toe board to the console.
 *
 * @param spaces The array of characters representing the spaces on the board
 */
void drawBoard(char *spaces) {
    std::cout << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[0] << "  |  " << spaces[1] << "  |  " << spaces[2] << std::endl;
    std::cout << "_____|_____|_____" << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[3] << "  |  " << spaces[4] << "  |  " << spaces[5] << std::endl;
    std::cout << "_____|_____|_____" << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[6] << "  |  " << spaces[7] << "  |  " << spaces[8] << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << std::endl;
}

/**
 * @brief Allows the player to make a move on the Tic-Tac-Toe board.
 *
 * This function prompts the player to enter a number corresponding to 
 * a position on the Tic-Tac-Toe board, and updates the board with the 
 * player's symbol if the selected position is empty.
 *
 * @param spaces The array representing the current state of the board.
 * @param player The character symbol representing the player ('X' or 'O').
 */
void playerMove(char *spaces, char player) {
    int number;

    do
    {
        std::cout << "Enter a number (1-9): ";
        std::cin >> number;
        number--;

        if (spaces[number] == ' ') {
            spaces[number] = player;
        }
    } while (number < 1 || number > 9);    
}

void computerMove(char *spaces, char computer) {
    // get the computer's move
    int number;
    srand(time(0));

    while (true) {
        number = rand() % 9;

        if (spaces[number] == ' ') {
            spaces[number] = computer;
            break;
        }
    }
}

bool checkWinner(char *spaces, char player, char computer) {
    // check if there is a winner
    return 0;
}

bool checkTie(char *spaces) {
    // check if there is a tie
    return 0;
}

#include <iostream>
#include <ctime>

void drawBoard(char *spaces);
void playerMove(char *spaces, char player);
void computerMove(char *spaces, char computer);
bool checkWinner(char *spaces, char player, char computer);
bool checkTie(char *spaces);

int main() {

    // create a tic-toc-toe game
    char spaces[9] = {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '};
    char player = 'X';
    char computer = 'O';
    bool running = true;

    drawBoard(spaces);

    while (running) {
        playerMove(spaces, player);
        drawBoard(spaces);

        computerMove(spaces, computer);
        drawBoard(spaces);
    }
    
    return 0;
}

/**
 * @brief Draw the Tic-Tac-Toe board
 *
 * This function prints out the Tic-Tac-Toe board to the console.
 *
 * @param spaces The array of characters representing the spaces on the board
 */
void drawBoard(char *spaces) {
    std::cout << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[0] << "  |  " << spaces[1] << "  |  " << spaces[2] << std::endl;
    std::cout << "_____|_____|_____" << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[3] << "  |  " << spaces[4] << "  |  " << spaces[5] << std::endl;
    std::cout << "_____|_____|_____" << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[6] << "  |  " << spaces[7] << "  |  " << spaces[8] << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << std::endl;
}

/**
 * @brief Allows the player to make a move on the Tic-Tac-Toe board.
 *
 * This function prompts the player to enter a number corresponding to 
 * a position on the Tic-Tac-Toe board, and updates the board with the 
 * player's symbol if the selected position is empty.
 *
 * @param spaces The array representing the current state of the board.
 * @param player The character symbol representing the player ('X' or 'O').
 */
void playerMove(char *spaces, char player) {
    int number;

    do
    {
        std::cout << "Enter a number (1-9): ";
        std::cin >> number;
        number--;

        if (spaces[number] == ' ') {
            spaces[number] = player;
        }
    } while (number < 0 || number > 9);    
}

void computerMove(char *spaces, char computer) {
    // get the computer's move
    int number;
    srand(time(0));

    while (true) {
        number = rand() % 9;

        if (spaces[number] == ' ') {
            spaces[number] = computer;
            break;
        }
    }
}

bool checkWinner(char *spaces, char player, char computer) {
    // check if there is a winner
    return 0;
}

bool checkTie(char *spaces) {
    // check if there is a tie
    return 0;
}

#include <iostream>
#include <ctime>

void drawBoard(char *spaces);
void playerMove(char *spaces, char player);
void computerMove(char *spaces, char computer);
bool checkWinner(char *spaces, char player, char computer);
bool checkTie(char *spaces);

int main() {

    // create a tic-toc-toe game
    char spaces[9] = {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '};
    char player = 'X';
    char computer = 'O';
    bool running = true;

    drawBoard(spaces);

    while (running) {
        playerMove(spaces, player);
        drawBoard(spaces);

        computerMove(spaces, computer);
        drawBoard(spaces);
    }
    
    return 0;
}

/**
 * @brief Draw the Tic-Tac-Toe board
 *
 * This function prints out the Tic-Tac-Toe board to the console.
 *
 * @param spaces The array of characters representing the spaces on the board
 */
void drawBoard(char *spaces) {
    std::cout << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[0] << "  |  " << spaces[1] << "  |  " << spaces[2] << std::endl;
    std::cout << "_____|_____|_____" << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[3] << "  |  " << spaces[4] << "  |  " << spaces[5] << std::endl;
    std::cout << "_____|_____|_____" << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[6] << "  |  " << spaces[7] << "  |  " << spaces[8] << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << std::endl;
}

/**
 * @brief Allows the player to make a move on the Tic-Tac-Toe board.
 *
 * This function prompts the player to enter a number corresponding to 
 * a position on the Tic-Tac-Toe board, and updates the board with the 
 * player's symbol if the selected position is empty.
 *
 * @param spaces The array representing the current state of the board.
 * @param player The character symbol representing the player ('X' or 'O').
 */
void playerMove(char *spaces, char player) {
    int number;

    do
    {
        std::cout << "Enter a number (1-9): ";
        std::cin >> number;
        number--;

        if (spaces[number] == ' ') {
            spaces[number] = player;
        }
    } while (number < 0 || number > 9);    
}

/**
 * @brief Gets the computer's move on the Tic-Tac-Toe board.
 *
 * This function uses the random number generator to select a random
 * number between 0 and 8, which corresponds to a position on the
 * Tic-Tac-Toe board. The computer's move is placed on the board if the
 * selected position is empty.
 *
 * @param spaces The array representing the current state of the board.
 * @param computer The character symbol representing the computer ('X' or 'O').
 */
void computerMove(char *spaces, char computer) {
    int number;
    srand(time(0));

    while (true) {
        number = rand() % 9;

        if (spaces[number] == ' ') {
            spaces[number] = computer;
            break;
        }
    }
}

bool checkWinner(char *spaces, char player, char computer) {
    // check if there is a winner
    return 0;
}

bool checkTie(char *spaces) {
    // check if there is a tie
    return 0;
}

#include <iostream>
#include <ctime>

void drawBoard(char *spaces);
void playerMove(char *spaces, char player);
void computerMove(char *spaces, char computer);
bool checkWinner(char *spaces, char player, char computer);
bool checkTie(char *spaces);

int main() {

    // create a tic-toc-toe game
    char spaces[9] = {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '};
    char player = 'X';
    char computer = 'O';
    bool running = true;

    drawBoard(spaces);

    while (running) {
        playerMove(spaces, player);
        drawBoard(spaces);

        if (checkWinner(spaces, player, computer)) {
            running = false;
            break;
        }

        if (checkTie(spaces)) {
            running = false;
            break;
        }

        computerMove(spaces, computer);
        drawBoard(spaces);
    }
    
    return 0;
}

/**
 * @brief Draw the Tic-Tac-Toe board
 *
 * This function prints out the Tic-Tac-Toe board to the console.
 *
 * @param spaces The array of characters representing the spaces on the board
 */
void drawBoard(char *spaces) {
    std::cout << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[0] << "  |  " << spaces[1] << "  |  " << spaces[2] << std::endl;
    std::cout << "_____|_____|_____" << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[3] << "  |  " << spaces[4] << "  |  " << spaces[5] << std::endl;
    std::cout << "_____|_____|_____" << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[6] << "  |  " << spaces[7] << "  |  " << spaces[8] << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << std::endl;
}

/**
 * @brief Allows the player to make a move on the Tic-Tac-Toe board.
 *
 * This function prompts the player to enter a number corresponding to 
 * a position on the Tic-Tac-Toe board, and updates the board with the 
 * player's symbol if the selected position is empty.
 *
 * @param spaces The array representing the current state of the board.
 * @param player The character symbol representing the player ('X' or 'O').
 */
void playerMove(char *spaces, char player) {
    int number;

    do
    {
        std::cout << "Enter a number (1-9): ";
        std::cin >> number;
        number--;

        if (spaces[number] == ' ') {
            spaces[number] = player;
        }
    } while (number < 0 || number > 9);    
}

/**
 * @brief Gets the computer's move on the Tic-Tac-Toe board.
 *
 * This function uses the random number generator to select a random
 * number between 0 and 8, which corresponds to a position on the
 * Tic-Tac-Toe board. The computer's move is placed on the board if the
 * selected position is empty.
 *
 * @param spaces The array representing the current state of the board.
 * @param computer The character symbol representing the computer ('X' or 'O').
 */
void computerMove(char *spaces, char computer) {
    int number;
    srand(time(0));

    while (true) {
        number = rand() % 9;

        if (spaces[number] == ' ') {
            spaces[number] = computer;
            break;
        }
    }
}

bool checkWinner(char *spaces, char player, char computer) {
    // check if there is a winner
    return 0;
}

bool checkTie(char *spaces) {
    // check if there is a tie
    return 0;
}

#include <iostream>
#include <ctime>

void drawBoard(char *spaces);
void playerMove(char *spaces, char player);
void computerMove(char *spaces, char computer);
bool checkWinner(char *spaces, char player, char computer);
bool checkTie(char *spaces);

int main() {

    // create a tic-toc-toe game
    char spaces[9] = {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '};
    char player = 'X';
    char computer = 'O';
    bool running = true;

    drawBoard(spaces);

    while (running) {
        playerMove(spaces, player);
        drawBoard(spaces);

        if (checkWinner(spaces, player, computer)) {
            running = false;
            break;
        }

        if (checkTie(spaces)) {
            running = false;
            break;
        }

        computerMove(spaces, computer);
        drawBoard(spaces);
    }
    
    return 0;
}

/**
 * @brief Draw the Tic-Tac-Toe board
 *
 * This function prints out the Tic-Tac-Toe board to the console.
 *
 * @param spaces The array of characters representing the spaces on the board
 */
void drawBoard(char *spaces) {
    std::cout << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[0] << "  |  " << spaces[1] << "  |  " << spaces[2] << std::endl;
    std::cout << "_____|_____|_____" << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[3] << "  |  " << spaces[4] << "  |  " << spaces[5] << std::endl;
    std::cout << "_____|_____|_____" << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[6] << "  |  " << spaces[7] << "  |  " << spaces[8] << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << std::endl;
}

/**
 * @brief Allows the player to make a move on the Tic-Tac-Toe board.
 *
 * This function prompts the player to enter a number corresponding to 
 * a position on the Tic-Tac-Toe board, and updates the board with the 
 * player's symbol if the selected position is empty.
 *
 * @param spaces The array representing the current state of the board.
 * @param player The character symbol representing the player ('X' or 'O').
 */
void playerMove(char *spaces, char player) {
    int number;

    do
    {
        std::cout << "Enter a number (1-9): ";
        std::cin >> number;
        number--;

        if (spaces[number] == ' ') {
            spaces[number] = player;
        }
    } while (number < 0 || number > 9);    
}

/**
 * @brief Gets the computer's move on the Tic-Tac-Toe board.
 *
 * This function uses the random number generator to select a random
 * number between 0 and 8, which corresponds to a position on the
 * Tic-Tac-Toe board. The computer's move is placed on the board if the
 * selected position is empty.
 *
 * @param spaces The array representing the current state of the board.
 * @param computer The character symbol representing the computer ('X' or 'O').
 */
void computerMove(char *spaces, char computer) {
    int number;
    srand(time(0));

    while (true) {
        number = rand() % 9;

        if (spaces[number] == ' ') {
            spaces[number] = computer;
            break;
        }
    }
}

bool checkWinner(char *spaces, char player, char computer) {
    // check if there is a winner
    if (spaces[0] == player && spaces[1] == player && spaces[2] == player) {
        spaces[0] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }  
    return 0;
}

bool checkTie(char *spaces) {
    // check if there is a tie
    return 0;
}

#include <iostream>
#include <ctime>

void drawBoard(char *spaces);
void playerMove(char *spaces, char player);
void computerMove(char *spaces, char computer);
bool checkWinner(char *spaces, char player, char computer);
bool checkTie(char *spaces);

int main() {

    // create a tic-toc-toe game
    char spaces[9] = {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '};
    char player = 'X';
    char computer = 'O';
    bool running = true;

    drawBoard(spaces);

    while (running) {
        playerMove(spaces, player);
        drawBoard(spaces);

        if (checkWinner(spaces, player, computer)) {
            running = false;
            break;
        }

        if (checkTie(spaces)) {
            running = false;
            break;
        }

        computerMove(spaces, computer);
        drawBoard(spaces);
    }
    
    return 0;
}

/**
 * @brief Draw the Tic-Tac-Toe board
 *
 * This function prints out the Tic-Tac-Toe board to the console.
 *
 * @param spaces The array of characters representing the spaces on the board
 */
void drawBoard(char *spaces) {
    std::cout << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[0] << "  |  " << spaces[1] << "  |  " << spaces[2] << std::endl;
    std::cout << "_____|_____|_____" << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[3] << "  |  " << spaces[4] << "  |  " << spaces[5] << std::endl;
    std::cout << "_____|_____|_____" << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[6] << "  |  " << spaces[7] << "  |  " << spaces[8] << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << std::endl;
}

/**
 * @brief Allows the player to make a move on the Tic-Tac-Toe board.
 *
 * This function prompts the player to enter a number corresponding to 
 * a position on the Tic-Tac-Toe board, and updates the board with the 
 * player's symbol if the selected position is empty.
 *
 * @param spaces The array representing the current state of the board.
 * @param player The character symbol representing the player ('X' or 'O').
 */
void playerMove(char *spaces, char player) {
    int number;

    do
    {
        std::cout << "Enter a number (1-9): ";
        std::cin >> number;
        number--;

        if (spaces[number] == ' ') {
            spaces[number] = player;
        }
    } while (number < 0 || number > 9);    
}

/**
 * @brief Gets the computer's move on the Tic-Tac-Toe board.
 *
 * This function uses the random number generator to select a random
 * number between 0 and 8, which corresponds to a position on the
 * Tic-Tac-Toe board. The computer's move is placed on the board if the
 * selected position is empty.
 *
 * @param spaces The array representing the current state of the board.
 * @param computer The character symbol representing the computer ('X' or 'O').
 */
void computerMove(char *spaces, char computer) {
    int number;
    srand(time(0));

    while (true) {
        number = rand() % 9;

        if (spaces[number] == ' ') {
            spaces[number] = computer;
            break;
        }
    }
}

bool checkWinner(char *spaces, char player, char computer) {
    // check if there is a winner
    if ((spaces[0] != ' ') && (spaces[0] == player) && (spaces[1] == player) && (spaces[2] == player)) {
        spaces[0] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }  
    return 0;
}

bool checkTie(char *spaces) {
    // check if there is a tie
    return 0;
}

#include <iostream>
#include <ctime>

void drawBoard(char *spaces);
void playerMove(char *spaces, char player);
void computerMove(char *spaces, char computer);
bool checkWinner(char *spaces, char player, char computer);
bool checkTie(char *spaces);

int main() {

    // create a tic-toc-toe game
    char spaces[9] = {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '};
    char player = 'X';
    char computer = 'O';
    bool running = true;

    drawBoard(spaces);

    while (running) {
        playerMove(spaces, player);
        drawBoard(spaces);

        if (checkWinner(spaces, player, computer)) {
            running = false;
            break;
        }

        if (checkTie(spaces)) {
            running = false;
            break;
        }

        computerMove(spaces, computer);
        drawBoard(spaces);
    }
    
    return 0;
}

/**
 * @brief Draw the Tic-Tac-Toe board
 *
 * This function prints out the Tic-Tac-Toe board to the console.
 *
 * @param spaces The array of characters representing the spaces on the board
 */
void drawBoard(char *spaces) {
    std::cout << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[0] << "  |  " << spaces[1] << "  |  " << spaces[2] << std::endl;
    std::cout << "_____|_____|_____" << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[3] << "  |  " << spaces[4] << "  |  " << spaces[5] << std::endl;
    std::cout << "_____|_____|_____" << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[6] << "  |  " << spaces[7] << "  |  " << spaces[8] << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << std::endl;
}

/**
 * @brief Allows the player to make a move on the Tic-Tac-Toe board.
 *
 * This function prompts the player to enter a number corresponding to 
 * a position on the Tic-Tac-Toe board, and updates the board with the 
 * player's symbol if the selected position is empty.
 *
 * @param spaces The array representing the current state of the board.
 * @param player The character symbol representing the player ('X' or 'O').
 */
void playerMove(char *spaces, char player) {
    int number;

    do
    {
        std::cout << "Enter a number (1-9): ";
        std::cin >> number;
        number--;

        if (spaces[number] == ' ') {
            spaces[number] = player;
        }
    } while (number < 0 || number > 9);    
}

/**
 * @brief Gets the computer's move on the Tic-Tac-Toe board.
 *
 * This function uses the random number generator to select a random
 * number between 0 and 8, which corresponds to a position on the
 * Tic-Tac-Toe board. The computer's move is placed on the board if the
 * selected position is empty.
 *
 * @param spaces The array representing the current state of the board.
 * @param computer The character symbol representing the computer ('X' or 'O').
 */
void computerMove(char *spaces, char computer) {
    int number;
    srand(time(0));

    while (true) {
        number = rand() % 9;

        if (spaces[number] == ' ') {
            spaces[number] = computer;
            break;
        }
    }
}

bool checkWinner(char *spaces, char player, char computer) {
    // check rows
    if ((spaces[0] != ' ') && (spaces[0] == player) && (spaces[1] == player) && (spaces[2] == player)) {
        spaces[0] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    else if ((spaces[3] != ' ') && (spaces[3] == player) && (spaces[4] == player) && (spaces[5] == player)) {
        spaces[3] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    else if ((spaces[6] != ' ') && (spaces[6] == player) && (spaces[7] == player) && (spaces[8] == player)) {
        spaces[6] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    // check columns
    else if ((spaces[0] != ' ') && (spaces[0] == player) && (spaces[3] == player) && (spaces[6] == player)) {
        spaces[0] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    else if ((spaces[1] != ' ') && (spaces[1] == player) && (spaces[4] == player) && (spaces[7] == player)) {
        spaces[1] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    else if ((spaces[2] != ' ') && (spaces[2] == player) && (spaces[5] == player) && (spaces[8] == player)) {
        spaces[2] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    // check diagonals
    else if ((spaces[0] != ' ') && (spaces[0] == player) && (spaces[4] == player) && (spaces[8] == player)) {
        spaces[0] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    else if ((spaces[2] != ' ') && (spaces[2] == player) && (spaces[4] == player) && (spaces[6] == player)) {
        spaces[2] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    else {
        return false;
    }
        
    return true;
}

bool checkTie(char *spaces) {
    // check if there is a tie
    return 0;
}

#include <iostream>
#include <ctime>

void drawBoard(char *spaces);
void playerMove(char *spaces, char player);
void computerMove(char *spaces, char computer);
bool checkWinner(char *spaces, char player, char computer);
bool checkTie(char *spaces);

int main() {

    // create a tic-toc-toe game
    char spaces[9] = {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '};
    char player = 'X';
    char computer = 'O';
    bool running = true;

    drawBoard(spaces);

    while (running) {
        playerMove(spaces, player);
        drawBoard(spaces);

        if (checkWinner(spaces, player, computer)) {
            running = false;
            break;
        }
        else if (checkTie(spaces)) {
            running = false;
            break;
        }

        computerMove(spaces, computer);
        drawBoard(spaces);
        
        if (checkWinner(spaces, player, computer)) {
            running = false;
            break;
        }
        else if (checkTie(spaces)) {
            running = false;
            break;
        }
    }
    
    return 0;
}

/**
 * @brief Draw the Tic-Tac-Toe board
 *
 * This function prints out the Tic-Tac-Toe board to the console.
 *
 * @param spaces The array of characters representing the spaces on the board
 */
void drawBoard(char *spaces) {
    std::cout << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[0] << "  |  " << spaces[1] << "  |  " << spaces[2] << std::endl;
    std::cout << "_____|_____|_____" << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[3] << "  |  " << spaces[4] << "  |  " << spaces[5] << std::endl;
    std::cout << "_____|_____|_____" << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[6] << "  |  " << spaces[7] << "  |  " << spaces[8] << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << std::endl;
}

/**
 * @brief Allows the player to make a move on the Tic-Tac-Toe board.
 *
 * This function prompts the player to enter a number corresponding to 
 * a position on the Tic-Tac-Toe board, and updates the board with the 
 * player's symbol if the selected position is empty.
 *
 * @param spaces The array representing the current state of the board.
 * @param player The character symbol representing the player ('X' or 'O').
 */
void playerMove(char *spaces, char player) {
    int number;

    do
    {
        std::cout << "Enter a number (1-9): ";
        std::cin >> number;
        number--;

        if (spaces[number] == ' ') {
            spaces[number] = player;
        }
    } while (number < 0 || number > 9);    
}

/**
 * @brief Gets the computer's move on the Tic-Tac-Toe board.
 *
 * This function uses the random number generator to select a random
 * number between 0 and 8, which corresponds to a position on the
 * Tic-Tac-Toe board. The computer's move is placed on the board if the
 * selected position is empty.
 *
 * @param spaces The array representing the current state of the board.
 * @param computer The character symbol representing the computer ('X' or 'O').
 */
void computerMove(char *spaces, char computer) {
    int number;
    srand(time(0));

    while (true) {
        number = rand() % 9;

        if (spaces[number] == ' ') {
            spaces[number] = computer;
            break;
        }
    }
}

bool checkWinner(char *spaces, char player, char computer) {
    // check rows
    if ((spaces[0] != ' ') && (spaces[0] == player) && (spaces[1] == player) && (spaces[2] == player)) {
        spaces[0] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    else if ((spaces[3] != ' ') && (spaces[3] == player) && (spaces[4] == player) && (spaces[5] == player)) {
        spaces[3] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    else if ((spaces[6] != ' ') && (spaces[6] == player) && (spaces[7] == player) && (spaces[8] == player)) {
        spaces[6] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    // check columns
    else if ((spaces[0] != ' ') && (spaces[0] == player) && (spaces[3] == player) && (spaces[6] == player)) {
        spaces[0] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    else if ((spaces[1] != ' ') && (spaces[1] == player) && (spaces[4] == player) && (spaces[7] == player)) {
        spaces[1] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    else if ((spaces[2] != ' ') && (spaces[2] == player) && (spaces[5] == player) && (spaces[8] == player)) {
        spaces[2] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    // check diagonals
    else if ((spaces[0] != ' ') && (spaces[0] == player) && (spaces[4] == player) && (spaces[8] == player)) {
        spaces[0] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    else if ((spaces[2] != ' ') && (spaces[2] == player) && (spaces[4] == player) && (spaces[6] == player)) {
        spaces[2] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    else {
        return false;
    }
        
    return true;
}

bool checkTie(char *spaces) {
    // check if there is a tie
    return 0;
}

#include <iostream>
#include <ctime>

void drawBoard(char *spaces);
void playerMove(char *spaces, char player);
void computerMove(char *spaces, char computer);
bool checkWinner(char *spaces, char player, char computer);
bool checkTie(char *spaces);

int main() {

    // create a tic-toc-toe game
    char spaces[9] = {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '};
    char player = 'X';
    char computer = 'O';
    bool running = true;

    drawBoard(spaces);

    while (running) {
        playerMove(spaces, player);
        drawBoard(spaces);

        if (checkWinner(spaces, player, computer)) {
            running = false;
            break;
        }
        else if (checkTie(spaces)) {
            running = false;
            break;
        }

        computerMove(spaces, computer);
        drawBoard(spaces);
        
        if (checkWinner(spaces, player, computer)) {
            running = false;
            break;
        }
        else if (checkTie(spaces)) {
            running = false;
            break;
        }
    }
    
    return 0;
}

/**
 * @brief Draw the Tic-Tac-Toe board
 *
 * This function prints out the Tic-Tac-Toe board to the console.
 *
 * @param spaces The array of characters representing the spaces on the board
 */
void drawBoard(char *spaces) {
    std::cout << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[0] << "  |  " << spaces[1] << "  |  " << spaces[2] << std::endl;
    std::cout << "_____|_____|_____" << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[3] << "  |  " << spaces[4] << "  |  " << spaces[5] << std::endl;
    std::cout << "_____|_____|_____" << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[6] << "  |  " << spaces[7] << "  |  " << spaces[8] << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << std::endl;
}

/**
 * @brief Allows the player to make a move on the Tic-Tac-Toe board.
 *
 * This function prompts the player to enter a number corresponding to 
 * a position on the Tic-Tac-Toe board, and updates the board with the 
 * player's symbol if the selected position is empty.
 *
 * @param spaces The array representing the current state of the board.
 * @param player The character symbol representing the player ('X' or 'O').
 */
void playerMove(char *spaces, char player) {
    int number;

    do
    {
        std::cout << "Enter a number (1-9): ";
        std::cin >> number;
        number--;

        if (spaces[number] == ' ') {
            spaces[number] = player;
        }
    } while (number < 0 || number > 9);    
}

/**
 * @brief Gets the computer's move on the Tic-Tac-Toe board.
 *
 * This function uses the random number generator to select a random
 * number between 0 and 8, which corresponds to a position on the
 * Tic-Tac-Toe board. The computer's move is placed on the board if the
 * selected position is empty.
 *
 * @param spaces The array representing the current state of the board.
 * @param computer The character symbol representing the computer ('X' or 'O').
 */
void computerMove(char *spaces, char computer) {
    int number;
    srand(time(0));

    while (true) {
        number = rand() % 9;

        if (spaces[number] == ' ') {
            spaces[number] = computer;
            break;
        }
    }
}

/**
 * @brief Check if the game is over.
 *
 * This function checks if the current state of the board represents a
 * winning situation for either the player or the computer. If a winning
 * situation is found, the function prints out a message declaring the
 * winner and returns true. Otherwise, it returns false.
 *
 * @param spaces The array representing the current state of the board.
 * @param player The character symbol representing the player ('X' or 'O').
 * @param computer The character symbol representing the computer ('X' or 'O').
 * @return True if a winning situation is found, false otherwise.
 */
bool checkWinner(char *spaces, char player, char computer) {
    // check rows
    if ((spaces[0] != ' ') && (spaces[0] == player) && (spaces[1] == player) && (spaces[2] == player)) {
        spaces[0] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    else if ((spaces[3] != ' ') && (spaces[3] == player) && (spaces[4] == player) && (spaces[5] == player)) {
        spaces[3] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    else if ((spaces[6] != ' ') && (spaces[6] == player) && (spaces[7] == player) && (spaces[8] == player)) {
        spaces[6] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    // check columns
    else if ((spaces[0] != ' ') && (spaces[0] == player) && (spaces[3] == player) && (spaces[6] == player)) {
        spaces[0] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    else if ((spaces[1] != ' ') && (spaces[1] == player) && (spaces[4] == player) && (spaces[7] == player)) {
        spaces[1] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    else if ((spaces[2] != ' ') && (spaces[2] == player) && (spaces[5] == player) && (spaces[8] == player)) {
        spaces[2] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    // check diagonals
    else if ((spaces[0] != ' ') && (spaces[0] == player) && (spaces[4] == player) && (spaces[8] == player)) {
        spaces[0] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    else if ((spaces[2] != ' ') && (spaces[2] == player) && (spaces[4] == player) && (spaces[6] == player)) {
        spaces[2] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    else {
        return false;
    }
        
    return true;
}

bool checkTie(char *spaces) {
    // check if there is a tie
    return 0;
}

#include <iostream>
#include <ctime>

void drawBoard(char *spaces);
void playerMove(char *spaces, char player);
void computerMove(char *spaces, char computer);
bool checkWinner(char *spaces, char player, char computer);
bool checkTie(char *spaces);

int main() {

    // create a tic-toc-toe game
    char spaces[9] = {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '};
    char player = 'X';
    char computer = 'O';
    bool running = true;

    drawBoard(spaces);

    while (running) {
        playerMove(spaces, player);
        drawBoard(spaces);

        if (checkWinner(spaces, player, computer)) {
            running = false;
            break;
        }
        else if (checkTie(spaces)) {
            running = false;
            break;
        }

        computerMove(spaces, computer);
        drawBoard(spaces);
        
        if (checkWinner(spaces, player, computer)) {
            running = false;
            break;
        }
        else if (checkTie(spaces)) {
            running = false;
            break;
        }
    }
    
    return 0;
}

/**
 * @brief Draw the Tic-Tac-Toe board
 *
 * This function prints out the Tic-Tac-Toe board to the console.
 *
 * @param spaces The array of characters representing the spaces on the board
 */
void drawBoard(char *spaces) {
    std::cout << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[0] << "  |  " << spaces[1] << "  |  " << spaces[2] << std::endl;
    std::cout << "_____|_____|_____" << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[3] << "  |  " << spaces[4] << "  |  " << spaces[5] << std::endl;
    std::cout << "_____|_____|_____" << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[6] << "  |  " << spaces[7] << "  |  " << spaces[8] << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << std::endl;
}

/**
 * @brief Allows the player to make a move on the Tic-Tac-Toe board.
 *
 * This function prompts the player to enter a number corresponding to 
 * a position on the Tic-Tac-Toe board, and updates the board with the 
 * player's symbol if the selected position is empty.
 *
 * @param spaces The array representing the current state of the board.
 * @param player The character symbol representing the player ('X' or 'O').
 */
void playerMove(char *spaces, char player) {
    int number;

    do
    {
        std::cout << "Enter a number (1-9): ";
        std::cin >> number;
        number--;

        if (spaces[number] == ' ') {
            spaces[number] = player;
        }
    } while (number < 0 || number > 9);    
}

/**
 * @brief Gets the computer's move on the Tic-Tac-Toe board.
 *
 * This function uses the random number generator to select a random
 * number between 0 and 8, which corresponds to a position on the
 * Tic-Tac-Toe board. The computer's move is placed on the board if the
 * selected position is empty.
 *
 * @param spaces The array representing the current state of the board.
 * @param computer The character symbol representing the computer ('X' or 'O').
 */
void computerMove(char *spaces, char computer) {
    int number;
    srand(time(0));

    while (true) {
        number = rand() % 9;

        if (spaces[number] == ' ') {
            spaces[number] = computer;
            break;
        }
    }
}

/**
 * @brief Check if the game is over.
 *
 * This function checks if the current state of the board represents a
 * winning situation for either the player or the computer. If a winning
 * situation is found, the function prints out a message declaring the
 * winner and returns true. Otherwise, it returns false.
 *
 * @param spaces The array representing the current state of the board.
 * @param player The character symbol representing the player ('X' or 'O').
 * @param computer The character symbol representing the computer ('X' or 'O').
 * @return True if a winning situation is found, false otherwise.
 */
bool checkWinner(char *spaces, char player, char computer) {
    // check rows
    if ((spaces[0] != ' ') && (spaces[0] == player) && (spaces[1] == player) && (spaces[2] == player)) {
        spaces[0] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    else if ((spaces[3] != ' ') && (spaces[3] == player) && (spaces[4] == player) && (spaces[5] == player)) {
        spaces[3] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    else if ((spaces[6] != ' ') && (spaces[6] == player) && (spaces[7] == player) && (spaces[8] == player)) {
        spaces[6] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    // check columns
    else if ((spaces[0] != ' ') && (spaces[0] == player) && (spaces[3] == player) && (spaces[6] == player)) {
        spaces[0] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    else if ((spaces[1] != ' ') && (spaces[1] == player) && (spaces[4] == player) && (spaces[7] == player)) {
        spaces[1] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    else if ((spaces[2] != ' ') && (spaces[2] == player) && (spaces[5] == player) && (spaces[8] == player)) {
        spaces[2] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    // check diagonals
    else if ((spaces[0] != ' ') && (spaces[0] == player) && (spaces[4] == player) && (spaces[8] == player)) {
        spaces[0] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    else if ((spaces[2] != ' ') && (spaces[2] == player) && (spaces[4] == player) && (spaces[6] == player)) {
        spaces[2] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    else {
        return false;
    }
        
    return true;
}

bool checkTie(char *spaces) {
    // check if there is a tie
    for (int i = 0; i < 9; i++) {
        if (spaces[i] == ' ') {
            return false;
        }
    }

    std::cout << "It's a tie!" << std::endl;

    return true;
}

#include <iostream>
#include <ctime>

void drawBoard(char *spaces);
void playerMove(char *spaces, char player);
void computerMove(char *spaces, char computer);
bool checkWinner(char *spaces, char player, char computer);
bool checkTie(char *spaces);

int main() {

    // create a tic-toc-toe game
    char spaces[9] = {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '};
    char player = 'X';
    char computer = 'O';
    bool running = true;

    drawBoard(spaces);

    while (running) {
        playerMove(spaces, player);
        drawBoard(spaces);

        if (checkWinner(spaces, player, computer)) {
            running = false;
            break;
        }
        else if (checkTie(spaces)) {
            running = false;
            break;
        }

        computerMove(spaces, computer);
        drawBoard(spaces);
        
        if (checkWinner(spaces, player, computer)) {
            running = false;
            break;
        }
        else if (checkTie(spaces)) {
            running = false;
            break;
        }
    }

    std::cout << "Game over" << std::endl;
    
    return 0;
}

/**
 * @brief Draw the Tic-Tac-Toe board
 *
 * This function prints out the Tic-Tac-Toe board to the console.
 *
 * @param spaces The array of characters representing the spaces on the board
 */
void drawBoard(char *spaces) {
    std::cout << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[0] << "  |  " << spaces[1] << "  |  " << spaces[2] << std::endl;
    std::cout << "_____|_____|_____" << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[3] << "  |  " << spaces[4] << "  |  " << spaces[5] << std::endl;
    std::cout << "_____|_____|_____" << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[6] << "  |  " << spaces[7] << "  |  " << spaces[8] << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << std::endl;
}

/**
 * @brief Allows the player to make a move on the Tic-Tac-Toe board.
 *
 * This function prompts the player to enter a number corresponding to 
 * a position on the Tic-Tac-Toe board, and updates the board with the 
 * player's symbol if the selected position is empty.
 *
 * @param spaces The array representing the current state of the board.
 * @param player The character symbol representing the player ('X' or 'O').
 */
void playerMove(char *spaces, char player) {
    int number;

    do
    {
        std::cout << "Enter a number (1-9): ";
        std::cin >> number;
        number--;

        if (spaces[number] == ' ') {
            spaces[number] = player;
        }
    } while (number < 0 || number > 9);    
}

/**
 * @brief Gets the computer's move on the Tic-Tac-Toe board.
 *
 * This function uses the random number generator to select a random
 * number between 0 and 8, which corresponds to a position on the
 * Tic-Tac-Toe board. The computer's move is placed on the board if the
 * selected position is empty.
 *
 * @param spaces The array representing the current state of the board.
 * @param computer The character symbol representing the computer ('X' or 'O').
 */
void computerMove(char *spaces, char computer) {
    int number;
    srand(time(0));

    while (true) {
        number = rand() % 9;

        if (spaces[number] == ' ') {
            spaces[number] = computer;
            break;
        }
    }
}

/**
 * @brief Check if the game is over.
 *
 * This function checks if the current state of the board represents a
 * winning situation for either the player or the computer. If a winning
 * situation is found, the function prints out a message declaring the
 * winner and returns true. Otherwise, it returns false.
 *
 * @param spaces The array representing the current state of the board.
 * @param player The character symbol representing the player ('X' or 'O').
 * @param computer The character symbol representing the computer ('X' or 'O').
 * @return True if a winning situation is found, false otherwise.
 */
bool checkWinner(char *spaces, char player, char computer) {
    // check rows
    if ((spaces[0] != ' ') && (spaces[0] == player) && (spaces[1] == player) && (spaces[2] == player)) {
        spaces[0] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    else if ((spaces[3] != ' ') && (spaces[3] == player) && (spaces[4] == player) && (spaces[5] == player)) {
        spaces[3] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    else if ((spaces[6] != ' ') && (spaces[6] == player) && (spaces[7] == player) && (spaces[8] == player)) {
        spaces[6] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    // check columns
    else if ((spaces[0] != ' ') && (spaces[0] == player) && (spaces[3] == player) && (spaces[6] == player)) {
        spaces[0] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    else if ((spaces[1] != ' ') && (spaces[1] == player) && (spaces[4] == player) && (spaces[7] == player)) {
        spaces[1] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    else if ((spaces[2] != ' ') && (spaces[2] == player) && (spaces[5] == player) && (spaces[8] == player)) {
        spaces[2] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    // check diagonals
    else if ((spaces[0] != ' ') && (spaces[0] == player) && (spaces[4] == player) && (spaces[8] == player)) {
        spaces[0] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    else if ((spaces[2] != ' ') && (spaces[2] == player) && (spaces[4] == player) && (spaces[6] == player)) {
        spaces[2] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    else {
        return false;
    }
        
    return true;
}

/**
 * @brief Checks if the game has ended in a tie
 *
 * Iterates through the array of spaces and checks if any of them are empty.
 * If any of them are empty, the function returns false. Otherwise, it outputs
 * a message indicating that the game has ended in a tie and returns true.
 *
 * @param spaces The array of spaces to check
 *
 * @return True if the game has ended in a tie, false otherwise
 */
bool checkTie(char *spaces) {
    for (int i = 0; i < 9; i++) {
        if (spaces[i] == ' ') {
            return false;
        }
    }

    std::cout << "It's a tie!" << std::endl;

    return true;
}

#include <iostream>
#include <ctime>

void drawBoard(char *spaces);
void playerMove(char *spaces, char player);
void computerMove(char *spaces, char computer);
bool checkWinner(char *spaces, char player, char computer);
bool checkTie(char *spaces);

/**
 * @brief The main entry point of the Tic Tac Toe game
 * 
 * This function initializes the game board, player and computer symbols, and
 * runs the game loop.
 * 
 * The game loop consists of the following steps:
 * 1. Draw the game board
 * 2. Prompt the user for their move
 * 3. Check if the user has won
 * 4. If not, prompt the computer for its move
 * 5. Check if the computer has won
 * 6. Repeat steps 2-5 until either the user or computer wins, or the game
 *    is a tie.
 * 
 * At the end of the game, a message is displayed to indicate that the game
 * is over.
 */
int main() {

    char spaces[9] = {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '};
    char player = 'X';
    char computer = 'O';
    bool running = true;

    drawBoard(spaces);

    while (running) {
        playerMove(spaces, player);
        drawBoard(spaces);

        if (checkWinner(spaces, player, computer)) {
            running = false;
            break;
        }
        else if (checkTie(spaces)) {
            running = false;
            break;
        }

        computerMove(spaces, computer);
        drawBoard(spaces);
        
        if (checkWinner(spaces, player, computer)) {
            running = false;
            break;
        }
        else if (checkTie(spaces)) {
            running = false;
            break;
        }
    }

    std::cout << "Game over" << std::endl;
    
    return 0;
}

/**
 * @brief Draw the Tic-Tac-Toe board
 *
 * This function prints out the Tic-Tac-Toe board to the console.
 *
 * @param spaces The array of characters representing the spaces on the board
 */
void drawBoard(char *spaces) {
    std::cout << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[0] << "  |  " << spaces[1] << "  |  " << spaces[2] << std::endl;
    std::cout << "_____|_____|_____" << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[3] << "  |  " << spaces[4] << "  |  " << spaces[5] << std::endl;
    std::cout << "_____|_____|_____" << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << "  " << spaces[6] << "  |  " << spaces[7] << "  |  " << spaces[8] << std::endl;
    std::cout << "     |     |     " << std::endl;
    std::cout << std::endl;
}

/**
 * @brief Allows the player to make a move on the Tic-Tac-Toe board.
 *
 * This function prompts the player to enter a number corresponding to 
 * a position on the Tic-Tac-Toe board, and updates the board with the 
 * player's symbol if the selected position is empty.
 *
 * @param spaces The array representing the current state of the board.
 * @param player The character symbol representing the player ('X' or 'O').
 */
void playerMove(char *spaces, char player) {
    int number;

    do
    {
        std::cout << "Enter a number (1-9): ";
        std::cin >> number;
        number--;

        if (spaces[number] == ' ') {
            spaces[number] = player;
        }
    } while (number < 0 || number > 9);    
}

/**
 * @brief Gets the computer's move on the Tic-Tac-Toe board.
 *
 * This function uses the random number generator to select a random
 * number between 0 and 8, which corresponds to a position on the
 * Tic-Tac-Toe board. The computer's move is placed on the board if the
 * selected position is empty.
 *
 * @param spaces The array representing the current state of the board.
 * @param computer The character symbol representing the computer ('X' or 'O').
 */
void computerMove(char *spaces, char computer) {
    int number;
    srand(time(0));

    while (true) {
        number = rand() % 9;

        if (spaces[number] == ' ') {
            spaces[number] = computer;
            break;
        }
    }
}

/**
 * @brief Check if the game is over.
 *
 * This function checks if the current state of the board represents a
 * winning situation for either the player or the computer. If a winning
 * situation is found, the function prints out a message declaring the
 * winner and returns true. Otherwise, it returns false.
 *
 * @param spaces The array representing the current state of the board.
 * @param player The character symbol representing the player ('X' or 'O').
 * @param computer The character symbol representing the computer ('X' or 'O').
 * @return True if a winning situation is found, false otherwise.
 */
bool checkWinner(char *spaces, char player, char computer) {
    // check rows
    if ((spaces[0] != ' ') && (spaces[0] == player) && (spaces[1] == player) && (spaces[2] == player)) {
        spaces[0] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    else if ((spaces[3] != ' ') && (spaces[3] == player) && (spaces[4] == player) && (spaces[5] == player)) {
        spaces[3] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    else if ((spaces[6] != ' ') && (spaces[6] == player) && (spaces[7] == player) && (spaces[8] == player)) {
        spaces[6] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    // check columns
    else if ((spaces[0] != ' ') && (spaces[0] == player) && (spaces[3] == player) && (spaces[6] == player)) {
        spaces[0] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    else if ((spaces[1] != ' ') && (spaces[1] == player) && (spaces[4] == player) && (spaces[7] == player)) {
        spaces[1] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    else if ((spaces[2] != ' ') && (spaces[2] == player) && (spaces[5] == player) && (spaces[8] == player)) {
        spaces[2] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    // check diagonals
    else if ((spaces[0] != ' ') && (spaces[0] == player) && (spaces[4] == player) && (spaces[8] == player)) {
        spaces[0] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    else if ((spaces[2] != ' ') && (spaces[2] == player) && (spaces[4] == player) && (spaces[6] == player)) {
        spaces[2] == player ? std::cout << "Player wins!" << std::endl : std::cout << "Computer wins!" << std::endl;
    }
    else {
        return false;
    }
        
    return true;
}

/**
 * @brief Checks if the game has ended in a tie
 *
 * Iterates through the array of spaces and checks if any of them are empty.
 * If any of them are empty, the function returns false. Otherwise, it outputs
 * a message indicating that the game has ended in a tie and returns true.
 *
 * @param spaces The array of spaces to check
 *
 * @return True if the game has ended in a tie, false otherwise
 */
bool checkTie(char *spaces) {
    for (int i = 0; i < 9; i++) {
        if (spaces[i] == ' ') {
            return false;
        }
    }

    std::cout << "It's a tie!" << std::endl;

    return true;
}

#include <iostream>
int main() {

    // dynamic memory allocation = the process of creating memory on the heap
    //                           = memory that is allocated after the program is compiled and running
    // Use the 'new' keyword to allocate memory on the heap
    // Use the 'delete' keyword to deallocate memory on the heap
    // Useful when we don't know how much memory we need
    // Program is more flexible and can be more memory efficient
    // especially when handling user input or large datasets

    // declare an unassigned pointer
    int *p = NULL;  // this is a null pointer

    // is NULL the same as nullptr in C++?

    // in general yes, both assign the null value to pointer-like types

    // It doesn't convert to numeric values in either language. One difference though is that in C++ nullptr can convert to bool. This is not true in C#.

    // allocate memory on the heap
    p = new int;    // this is a pointer to an integer

    // assign a value to the memory
    *p = 42;

    // print the address of the memory
    std::cout << "The address of the memory is: " << p << std::endl;

    // print the value of the memory
    std::cout << "The value of the memory is: " << *p << std::endl;

    return 0;
}
#include <iostream>

int main() {

    // dynamic memory allocation = the process of creating memory on the heap
    //                           = memory that is allocated after the program is compiled and running
    // Use the 'new' keyword to allocate memory on the heap
    // Use the 'delete' keyword to deallocate memory on the heap
    // Useful when we don't know how much memory we need
    // Program is more flexible and can be more memory efficient
    // especially when handling user input or large datasets

    // declare an unassigned pointer
    int *p = NULL;  // this is a null pointer

    // is NULL the same as nullptr in C++?

    // in general yes, both assign the null value to pointer-like types

    // It doesn't convert to numeric values in either language. One difference though is that in C++ nullptr can convert to bool. This is not true in C#.

    // allocate memory on the heap
    p = new int;    // this is a pointer to an integer

    // assign a value to the memory
    *p = 42;

    // print the address of the memory
    std::cout << "The address of the memory is: " << p << std::endl;

    // print the value of the memory
    std::cout << "The value of the memory is: " << *p << std::endl;

    // deallocate memory on the heap
    delete p;

    // FAILURE TO FREE THE MEMORY CAN CAUSE A MEMORY LEAK

    return 0;
}

#include <iostream>

/**
 * @brief The main entry point of the program
 *
 * @details This function demonstrates the use of dynamic memory allocation in C++.
 *          It allocates memory on the heap using the 'new' keyword, assigns a value
 *          to the memory, prints the address and value of the memory, and then
 *          deallocates the memory using the 'delete' keyword.
 *
 * @return 0 on successful execution
 */
int main() {

    // dynamic memory allocation = the process of creating memory on the heap
    // whenever you use the 'new' operator, you should also use the 'delete' operator
    //                           = memory that is allocated after the program is compiled and running
    // Use the 'new' keyword to allocate memory on the heap
    // Use the 'delete' keyword to deallocate memory on the heap
    // Useful when we don't know how much memory we need
    // Program is more flexible and can be more memory efficient
    // especially when handling user input or large datasets

    // declare an unassigned pointer
    int *p = NULL;  // this is a null pointer

    // is NULL the same as nullptr in C++?

    // in general yes, both assign the null value to pointer-like types

    // It doesn't convert to numeric values in either language. One difference though is that in C++ nullptr can convert to bool. This is not true in C#.

    // allocate memory on the heap
    p = new int;    // this is a pointer to an integer

    // assign a value to the memory
    *p = 42;

    // print the address of the memory
    std::cout << "The address of the memory is: " << p << std::endl;

    // print the value of the memory
    std::cout << "The value of the memory is: " << *p << std::endl;

    // deallocate memory on the heap
    delete p;

    // FAILURE TO FREE THE MEMORY CAN CAUSE A MEMORY LEAK

    return 0;
}

#include <iostream>

int main() {
    
    // dynamic memory allocation = the process of creating memory on the heap
    // whenever you use the 'new' operator, you should also use the 'delete' operator
    
    char *pGrades = NULL;
    int size;

    std::cout << "Enter the number of students: ";
    std::cin >> size;

    pGrades = new char[size];

    for (int i = 0; i < size; i++) {
        std::cout << "Enter the grade for student " << i + 1 << ": ";
        std::cin >> pGrades[i];
    }

    for (int i = 0; i < size; i++) {
        std::cout << "Grade for student " << i + 1 << ": " << pGrades[i] << std::endl;
    }

    delete[] pGrades;

    return 0;
}

#include <iostream>

int main() {
    
    // recursion =  a function that calls itself
    //              used to solve a problem by breaking it down into smaller parts
    //              and solving each part recursively

    // (iterative vs recursive)

    // iterative =  a function that uses a loop to solve a problem
    // recursive =  a function that calls itself to solve a problem

    // advantages of recursion
    //              less code and cleaner
    //              useful for sorting and searching algorithms
    // disadvantages of recursion
    //              slower performance
    //              harder to debug
    //              uses more memory

    return 0;
}

#include <iostream>

// iterative function

void walk(int steps);

int main() {
    
    walk(10);

    return 0;
}

void walk(int steps) {
    for (int i = 0; i < steps; i++) {
        std::cout << "You walk one step" << std::endl;
    }
}

#include <iostream>

// recursive function

void walk(int steps);

int main() {
    
    walk(10);

    return 0;
}

void walk(int steps) {
    if(steps > 0) {
        std::cout << "You walk one step" << std::endl;
        walk(steps - 1);
    }
}

#include <iostream>

// recursive function

// this is a very simple example and the trade-off is that it's not very efficient
// it uses a lot of stack space and in this instance, one would probably use the
// for loop instead
// identifying best use case on a case by case basis is essential

void walk(int steps);

int main() {
    
    walk(10);

    return 0;
}

void walk(int steps) {
    if(steps > 0) {
        std::cout << "You walk one step" << std::endl;
        walk(steps - 1);
    }
}

#include <iostream>

// factorial function = a function that multiplies a number by itself

int factorial(int n);

int main() {
    
    std::cout << factorial(10) << std::endl;

    return 0;
}

int factorial(int n) {
    int result = 1;
    for (int i = 1; i <= n; i++) {
        result *= i;
    }
    return result;
}

OR

#include <iostream>

// factorial function = a function that multiplies a number by itself

int factorial(int n);

int main() {
    
    std::cout << factorial(10) << std::endl;

    return 0;
}

int factorial(int n) {
    if(n > 1) {
        return n * factorial(n - 1);
    }
    else {
        return 1;
    }
}

#include <iostream>

// function template = a function that can be called with different parameter types
//                    can be used to create generic functions
//                    useful for creating reusable code
//                    can be used to create overloaded functions    
//                    can be used to create generic classes

int max(int a, int b) {
    return a > b ? a : b;
}

int main() {

    std::cout << max(1, 2) << std::endl;    

    return 0;
}

#include <iostream>

// function template = a function that can be called with different parameter types
//                    can be used to create generic functions
//                    useful for creating reusable code
//                    can be used to create overloaded functions    
//                    can be used to create generic classes

int max(int a, int b) {
    return a > b ? a : b;
}

int main() {

    // if you want to use doubles, the result is truncated
    std::cout << max(1.1, 2.2) << std::endl;    

    return 0;
}

#include <iostream>

// function template = a function that can be called with different parameter types
//                    can be used to create generic functions
//                    useful for creating reusable code
//                    can be used to create overloaded functions    
//                    can be used to create generic classes

int max(int a, int b) {
    return a > b ? a : b;
}
// so you'd normally have to write an overloaded function with the new data type
double max(double a, double b) {
    return a > b ? a : b;
}

int main() {

    std::cout << max(1.1, 2.2) << std::endl;    

    return 0;
}

#include <iostream>

// function template = a function that can be called with different parameter types
//                    can be used to create generic functions
//                    useful for creating reusable code
//                    can be used to create overloaded functions    
//                    can be used to create generic classes

int max(int a, int b) {
    return a > b ? a : b;
}

double max(double a, double b) {
    return a > b ? a : b;
}

int main() {

    // what about characters?
    std::cout << max('1', '2') << std::endl;    
    // this returns the maximum ASCII value of '1' and '2'

    return 0;
}

#include <iostream>

// function template = a function that can be called with different parameter types
//                    can be used to create generic functions
//                    useful for creating reusable code
//                    can be used to create overloaded functions    
//                    can be used to create generic classes

int max(int a, int b) {
    return a > b ? a : b;
}

double max(double a, double b) {
    return a > b ? a : b;
}
// so another overloaded function with the new data type
char max(char a, char b) {
    return a > b ? a : b;
}

int main() {

    std::cout << max('1', '2') << std::endl;    

    return 0;
}

#include <iostream>

// function template = a function that can be called with different parameter types
//                    can be used to create generic functions
//                    useful for creating reusable code
//                    can be used to create overloaded functions    
//                    can be used to create generic classes

// instead of all that repetition, you can use a function template
// template parameter declaration = a parameter that is used to specify the type of data that is passed to the function
template <typename T>
// must be declared before the function template definition
T max(T a, T b) {
    return a > b ? a : b;
}
// this will work for any data type

int main() {

    std::cout << max('1', '2') << std::endl;    

    return 0;
}

#include <iostream>

// function template = a function that can be called with different parameter types
//                    can be used to create generic functions
//                    useful for creating reusable code
//                    can be used to create overloaded functions    
//                    can be used to create generic classes

// if you need to mix and match data types (ie. int and double)
// this will now throw a compiler error because T can only store one data type

template <typename T>

T max(T a, T b) {
    return a > b ? a : b;
}

int main() {

    std::cout << max(1, 2.1) << std::endl;    

    return 0;
}

#include <iostream>

// function template = a function that can be called with different parameter types
//                    can be used to create generic functions
//                    useful for creating reusable code
//                    can be used to create overloaded functions    
//                    can be used to create generic classes

// if you wish to pass in two different data types

// adjust the declaration
template <typename T, typename U>

// adjust the definition
U max(T a, U b) {
    return a > b ? a : b;
}
// changing the return to a double will solve it

int main() {

    std::cout << max(1, 2.1) << std::endl;    

    return 0;
}

#include <iostream>

// function template = a function that can be called with different parameter types
//                    can be used to create generic functions
//                    useful for creating reusable code
//                    can be used to create overloaded functions    
//                    can be used to create generic classes

// if you wish to pass in two different data types

// adjust the declaration
template <typename T, typename U>

// adjust the definition
auto max(T a, U b) {
    return a > b ? a : b;
}
// using auto makes it more dynamic

int main() {

    std::cout << max(1, 2.1) << std::endl;    

    return 0;
}

#include <iostream>

// struct = a user defined data type
//          can be used to create custom data types
//          can be used to create generic classes
//          can be used to create custom containers
//          a structure that groups related data together under one name
//          arrays can only contain one data type
//          structs can contain multiple data types
//          variables inside a struct are called members

int main() {

    return 0;
}

#include <iostream>

// struct = a user defined data type
//          can be used to create custom data types
//          can be used to create generic classes
//          can be used to create custom containers
//          a structure that groups related data together under one name
//          arrays can only contain one data type
//          structs can contain multiple data types
//          variables inside a struct are called members
//          members can be accessed using dot notation

struct student
{
    std::string name;
    double gpa;
    bool enrolled;
};


int main() {

    student student1;
    student1.name = "John Doe";
    student1.gpa = 3.5;
    student1.enrolled = true;

    return 0;
}

#include <iostream>

// struct = a user defined data type
//          can be used to create custom data types
//          can be used to create generic classes
//          can be used to create custom containers
//          a structure that groups related data together under one name
//          arrays can only contain one data type
//          structs can contain multiple data types
//          variables inside a struct are called members
//          members can be accessed using dot notation

struct student
{
    std::string name;
    double gpa;
    bool enrolled;
};


int main() {

    student student1;
    student1.name = "John Doe";
    student1.gpa = 3.5;
    student1.enrolled = true;

    std::cout << "Name: " << student1.name << std::endl;
    std::cout << "GPA: " << student1.gpa << std::endl;
    std::cout << "Enrolled: " << student1.enrolled << std::endl;

    return 0;
}

#include <iostream>

// struct = a user defined data type
//          can be used to create custom data types
//          can be used to create generic classes
//          can be used to create custom containers
//          a structure that groups related data together under one name
//          arrays can only contain one data type
//          structs can contain multiple data types
//          variables inside a struct are called members
//          members can be accessed using dot notation

struct student
{
    std::string name;
    double gpa;
    bool enrolled;
};


int main() {

    student student1;
    student1.name = "John Doe";
    student1.gpa = 3.5;
    student1.enrolled = true;

    student student2;
    student2.name = "Jane Doe";
    student2.gpa = 4.0;
    student2.enrolled = true;

    std::cout << "Name: " << student1.name << std::endl;
    std::cout << "GPA: " << student1.gpa << std::endl;
    std::cout << "Enrolled: " << student1.enrolled << std::endl;

    std::cout << "Name: " << student2.name << std::endl;
    std::cout << "GPA: " << student2.gpa << std::endl;
    std::cout << "Enrolled: " << student2.enrolled << std::endl;

    return 0;
}

#include <iostream>

// struct = a user defined data type
//          can be used to create custom data types
//          can be used to create generic classes
//          can be used to create custom containers
//          a structure that groups related data together under one name
//          arrays can only contain one data type
//          structs can contain multiple data types
//          variables inside a struct are called members
//          members can be accessed using dot notation

struct student
{
    std::string name;
    double gpa;
    bool enrolled;
};


int main() {

    student student1;
    student1.name = "John Doe";
    student1.gpa = 3.5;
    student1.enrolled = true;

    student student2;
    student2.name = "Jane Doe";
    student2.gpa = 4.0;
    student2.enrolled = true;

    student student3;
    student3.name = "Joe Doe";
    student3.gpa = 2.8;
    student3.enrolled = true;

    std::cout << "Name: " << student1.name << std::endl;
    std::cout << "GPA: " << student1.gpa << std::endl;
    std::cout << "Enrolled: " << student1.enrolled << std::endl;

    std::cout << "Name: " << student2.name << std::endl;
    std::cout << "GPA: " << student2.gpa << std::endl;
    std::cout << "Enrolled: " << student2.enrolled << std::endl;

    std::cout << "Name: " << student3.name << std::endl;
    std::cout << "GPA: " << student3.gpa << std::endl;
    std::cout << "Enrolled: " << student3.enrolled << std::endl;

    return 0;
}

#include <iostream>

// struct = a user defined data type
//          can be used to create custom data types
//          can be used to create generic classes
//          can be used to create custom containers
//          a structure that groups related data together under one name
//          arrays can only contain one data type
//          structs can contain multiple data types
//          variables inside a struct are called members
//          members can be accessed using dot notation


// you can also set a default value on members
struct student
{
    std::string name;
    double gpa;
    bool enrolled = true;
};

int main() {

    student student1;
    student1.name = "John Doe";
    student1.gpa = 3.5;

    student student2;
    student2.name = "Jane Doe";
    student2.gpa = 4.0;

    student student3;
    student3.name = "Joe Doe";
    student3.gpa = 2.8;

    std::cout << "Name: " << student1.name << std::endl;
    std::cout << "GPA: " << student1.gpa << std::endl;
    std::cout << "Enrolled: " << student1.enrolled << std::endl;

    std::cout << "Name: " << student2.name << std::endl;
    std::cout << "GPA: " << student2.gpa << std::endl;
    std::cout << "Enrolled: " << student2.enrolled << std::endl;

    std::cout << "Name: " << student3.name << std::endl;
    std::cout << "GPA: " << student3.gpa << std::endl;
    std::cout << "Enrolled: " << student3.enrolled << std::endl;

    return 0;
}

#include <iostream>

// pass a struct to a function

int main() {

    return 0;
}

#include <iostream>

// pass a struct to a function
struct Car {
    std::string make;
    std::string model;
    int year;
    std::string color;
};

int main() {

    return 0;
}

#include <iostream>

// pass a struct to a function
struct Car {
    std::string make;
    std::string model;
    int year;
    std::string color;
};

int main() {

    Car car1;
    Car car2;

    return 0;
}

#include <iostream>

// pass a struct to a function
struct Car {
    std::string make;
    std::string model;
    int year;
    std::string color;
};

int main() {

    Car car1;
    Car car2;

    car1.make = "Lexus";
    car1.model = "IS300";
    car1.year = 2022;
    car1.color = "Black";

    car2.make = "Honda";
    car2.model = "Civic";
    car2.year = 2021;
    car2.color = "Red";

    // we can access struct members as before
    std::cout << "Make: " << car1.make << std::endl;
    std::cout << "Model: " << car1.model << std::endl;
    std::cout << "Year: " << car1.year << std::endl;
    std::cout << "Color: " << car1.color << std::endl;

    std::cout << "Make: " << car2.make << std::endl;
    std::cout << "Model: " << car2.model << std::endl;
    std::cout << "Year: " << car2.year << std::endl;
    std::cout << "Color: " << car2.color << std::endl;

    return 0;
}

#include <iostream>

// pass a struct to a function
struct Car {
    std::string make;
    std::string model;
    int year;
    std::string color;
};

int main() {

    Car car1;
    Car car2;

    car1.make = "Lexus";
    car1.model = "IS300";
    car1.year = 2022;
    car1.color = "Black";

    car2.make = "Honda";
    car2.model = "Civic";
    car2.year = 2021;
    car2.color = "Red";

    return 0;
}
// or display the structs in a function
void displayCar(Car car) {
    std::cout << "Make: " << car.make << std::endl;
    std::cout << "Model: " << car.model << std::endl;
    std::cout << "Year: " << car.year << std::endl;
    std::cout << "Color: " << car.color << std::endl;
}

#include <iostream>

// pass a struct to a function
struct Car {
    std::string make;
    std::string model;
    int year;
    std::string color;
};

void displayCar(Car car);

int main() {

    Car car1;
    Car car2;

    car1.make = "Lexus";
    car1.model = "IS300";
    car1.year = 2022;
    car1.color = "Black";

    car2.make = "Honda";
    car2.model = "Civic";
    car2.year = 2021;
    car2.color = "Red";

    // then call that function
    displayCar(car1);
    displayCar(car2);

    return 0;
}
void displayCar(Car car) {
    std::cout << "Make: " << car.make << std::endl;
    std::cout << "Model: " << car.model << std::endl;
    std::cout << "Year: " << car.year << std::endl;
    std::cout << "Color: " << car.color << std::endl;
}

#include <iostream>

// pass a struct to a function

// remember thst structs are passed by value not by reference
// therefore a copy of the struct is made and passed

struct Car {
    std::string make;
    std::string model;
    int year;
    std::string color;
};

void displayCar(Car car);

int main() {

    Car car1;
    Car car2;

    car1.make = "Lexus";
    car1.model = "IS300";
    car1.year = 2022;
    car1.color = "Black";

    car2.make = "Honda";
    car2.model = "Civic";
    car2.year = 2021;
    car2.color = "Red";

    displayCar(car1);
    displayCar(car2);

    return 0;
}
void displayCar(Car car) {
    std::cout << "Make: " << car.make << std::endl;
    std::cout << "Model: " << car.model << std::endl;
    std::cout << "Year: " << car.year << std::endl;
    std::cout << "Color: " << car.color << std::endl;
}

#include <iostream>

// pass a struct to a function

// remember that structs are passed by value not by reference
// therefore a copy of the struct is made and passed

// the addresses are different

struct Car {
    std::string make;
    std::string model;
    int year;
    std::string color;
};

void displayCar(Car car);

int main() {

    Car car1;
    Car car2;

    car1.make = "Lexus";
    car1.model = "IS300";
    car1.year = 2022;
    car1.color = "Black";

    car2.make = "Honda";
    car2.model = "Civic";
    car2.year = 2021;
    car2.color = "Red";

    // display the address of car1
    std::cout << "Car1 address: " << &car1 << std::endl;
    // display the address of car2
    std::cout << "Car2 address: " << &car2 << std::endl;
    displayCar(car1);
    displayCar(car2);

    return 0;
}
void displayCar(Car car) {
    // display the addresses of the members passed to the function
    std::cout << "Car address: " << &car << std::endl;
    std::cout << "Make: " << car.make << std::endl;
    std::cout << "Model: " << car.model << std::endl;
    std::cout << "Year: " << car.year << std::endl;
    std::cout << "Color: " << car.color << std::endl;
}

#include <iostream>

// pass a struct to a function

// to pass the original struct to the function

struct Car {
    std::string make;
    std::string model;
    int year;
    std::string color;
};

void displayCar(Car &car);

int main() {

    Car car1;
    Car car2;

    car1.make = "Lexus";
    car1.model = "IS300";
    car1.year = 2022;
    car1.color = "Black";

    car2.make = "Honda";
    car2.model = "Civic";
    car2.year = 2021;
    car2.color = "Red";

    // display the address of car1
    std::cout << "Car1 address: " << &car1 << std::endl;
    // display the address of car2
    std::cout << "Car2 address: " << &car2 << std::endl;
    displayCar(car1);
    displayCar(car2);

    return 0;
}
void displayCar(Car &car) {
    // display the addresses of the members passed to the function
    std::cout << "Car address: " << &car << std::endl;
    std::cout << "Make: " << car.make << std::endl;
    std::cout << "Model: " << car.model << std::endl;
    std::cout << "Year: " << car.year << std::endl;
    std::cout << "Color: " << car.color << std::endl;
}

#include <iostream>

// pass a struct to a function

// to paint the cars

struct Car {
    std::string make;
    std::string model;
    int year;
    std::string color;
};

void displayCar(Car &car);
void paintCar(Car &car, std::string color);

int main() {

    Car car1;
    Car car2;

    car1.make = "Lexus";
    car1.model = "IS300";
    car1.year = 2022;
    car1.color = "Black";

    car2.make = "Honda";
    car2.model = "Civic";
    car2.year = 2021;
    car2.color = "Red";

    // display the address of car1
    std::cout << "Car1 address: " << &car1 << std::endl;
    // display the address of car2
    std::cout << "Car2 address: " << &car2 << std::endl;

    paintCar(car1, "Maroon");
    paintCar(car2, "White");

    displayCar(car1);
    displayCar(car2);

    return 0;
}
void displayCar(Car &car) {
    // display the addresses of the members passed to the function
    std::cout << "Car address: " << &car << std::endl;
    std::cout << "Make: " << car.make << std::endl;
    std::cout << "Model: " << car.model << std::endl;
    std::cout << "Year: " << car.year << std::endl;
    std::cout << "Color: " << car.color << std::endl;
}
void paintCar(Car &car, std::string color) {
    car.color = color;
}

#include <iostream>

// pass a struct to a function

// if you didn't use the Address of operator (&)
// then the function would be passed a copy of the struct
// and the cars wouldn't be painted

struct Car {
    std::string make;
    std::string model;
    int year;
    std::string color;
};

void displayCar(Car &car);
void paintCar(Car car, std::string color);

int main() {

    Car car1;
    Car car2;

    car1.make = "Lexus";
    car1.model = "IS300";
    car1.year = 2022;
    car1.color = "Black";

    car2.make = "Honda";
    car2.model = "Civic";
    car2.year = 2021;
    car2.color = "Red";

    // display the address of car1
    std::cout << "Car1 address: " << &car1 << std::endl;
    // display the address of car2
    std::cout << "Car2 address: " << &car2 << std::endl;

    paintCar(car1, "Maroon");
    paintCar(car2, "White");

    displayCar(car1);
    displayCar(car2);

    return 0;
}
void displayCar(Car &car) {
    // display the addresses of the members passed to the function
    std::cout << "Car address: " << &car << std::endl;
    std::cout << "Make: " << car.make << std::endl;
    std::cout << "Model: " << car.model << std::endl;
    std::cout << "Year: " << car.year << std::endl;
    std::cout << "Color: " << car.color << std::endl;
}
void paintCar(Car car, std::string color) {
    car.color = color;
}

#include <iostream>

// enums = a user defined data type
//         can be used to create custom data types
//         can be used to create generic classes
//         can be used to create custom containers
//         a type that represents a set of constants
//         consists of paired names and values
//         useful if you have a set of potential options
//         useful if you have a set of related values

int main() {

    return 0;
}

#include <iostream>

// enums = a user defined data type
//         can be used to create custom data types
//         can be used to create generic classes
//         can be used to create custom containers
//         a type that represents a set of constants
//         consists of paired names and values
//         useful if you have a set of potential options
//         useful if you have a set of related values

int main() {

    std::string firstName = "Wayne";

    // you can't use strings in switches
    switch (firstName) {
    case "Wayne":
        std::cout << "Wayne" << std::endl;
        break;
    case "John":
        std::cout << "John" << std::endl;
        break;
    case "Jane":
        std::cout << "Jane" << std::endl;
        break;
    case "Bob":
        std::cout << "Bob" << std::endl;
        break;
    default:
        std::cout << "Unknown" << std::endl;
        break;
    }

    // this will throw an error because firstName is a string

    return 0;
}

#include <iostream>

// so use an enum
enum name {
    Wayne = 0,
    John = 1,
    Jane = 2,
    Bob = 3
};

int main() {

    name firstName = Jane;

    switch (firstName) {
    case 0:
        std::cout << "Wayne" << std::endl;
        break;
    case 1:
        std::cout << "John" << std::endl;
        break;
    case 2:
        std::cout << "Jane" << std::endl;
        break;
    case 3:
        std::cout << "Bob" << std::endl;
        break;
    default:
        std::cout << "Unknown" << std::endl;
        break;
    }

    return 0;
}

#include <iostream>

// this is more readable

enum name {
    Wayne,
    John,
    Jane,
    Bob
};

int main() {

    name firstName = Jane;

    switch (firstName) {
    case Wayne:
        std::cout << "Wayne" << std::endl;
        break;
    case John:
        std::cout << "John" << std::endl;
        break;
    case Jane:
        std::cout << "Jane" << std::endl;
        break;
    case Bob:
        std::cout << "Bob" << std::endl;
        break;
    default:
        std::cout << "Unknown" << std::endl;
        break;
    }

    return 0;
}

#include <iostream>

// this is more readable

enum name {
    Wayne,
    John,
    Jane,
    Bob
};

int main() {

    name firstName = Jane;

    switch (firstName) {
    case Wayne:
        std::cout << "Wayne" << std::endl;
        break;
    case John:
        std::cout << "John" << std::endl;
        break;
    case Jane:
        std::cout << "Jane" << std::endl;
        break;
    case Bob:
        std::cout << "Bob" << std::endl;
        break;
    default:
        std::cout << "Unknown" << std::endl;
        break;
    }

    // if you don't assign values to the enum, tey will be automatically assigned

    return 0;
}

#include <iostream>

enum name {
    Wayne,
    John,
    Jane,
    Bob
};

// other examples

enum Flavors {
    VANILLA,
    CHOCOLATE,
    STRAWBERRY,
    RASPBERRY
};

enum Colors {
    RED,
    GREEN,
    BLUE
};

enum Days {
    MONDAY = 1,
    TUESDAY = 2,
    WEDNESDAY = 3,
    THURSDAY = 4,
    FRIDAY = 5
};

enum parts {
    gearlever = 56437,
    steeringwheel = 97543,
    seat = 12345,
    engine = 23456,
    transmission = 34567,
    exhaust = 45678,
    brake = 56789,
    clutch = 67890
};

int main() {

    name firstName = Jane;

    switch (firstName) {
    case Wayne:
        std::cout << "Wayne" << std::endl;
        break;
    case John:
        std::cout << "John" << std::endl;
        break;
    case Jane:
        std::cout << "Jane" << std::endl;
        break;
    case Bob:
        std::cout << "Bob" << std::endl;
        break;
    default:
        std::cout << "Unknown" << std::endl;
        break;
    }

    return 0;
}

#include <iostream>

// objects = instances of classes
//          can be used to store data
//          can be used to perform actions
//          can be used to represent real-world entities
// to create an object, you must create a class
// classes act as blueprints for creating objects

int main() {

    return 0;
}

#include <iostream>

// objects = instances of classes
//          can be used to store data
//          can be used to perform actions
//          can be used to represent real-world entities
// to create an object, you must create a class
// classes act as blueprints for creating objects

class Person {
    public:
        std::string name;
        int age;
        bool isMale;

        // methods = functions that belong to a class
        //          can be used to perform actions on the object
        void eat() {
            std::cout << name << " is eating" << std::endl;
        }
        void drink() {
            std::cout << name << " is drinking" << std::endl;
        }
        void sleep() {
            std::cout << name << " is sleeping" << std::endl;
        }
};

int main() {

    Person person1;

    person1.name = "Karl";
    person1.age = 30;
    person1.isMale = true;
    
    std::cout << person1.name << std::endl;
    std::cout << person1.age << std::endl;
    std::cout << person1.isMale << std::endl;

    return 0;
}

#include <iostream>

// objects = instances of classes
//          can be used to store data
//          can be used to perform actions
//          can be used to represent real-world entities
// to create an object, you must create a class
// classes act as blueprints for creating objects

class Person {
    public:
        std::string name;
        int age;
        bool isMale;

        // methods = functions that belong to a class
        //          can be used to perform actions on the object
        void eat() {
            std::cout << name << " is eating" << std::endl;
        }
        void drink() {
            std::cout << name << " is drinking" << std::endl;
        }
        void sleep() {
            std::cout << name << " is sleeping" << std::endl;
        }
};

int main() {

    Person person1;
    Person person2;

    person1.name = "Karl";
    person1.age = 30;
    person1.isMale = true;

    person2.name = "Erin";
    person2.age = 25;
    person2.isMale = false;

    std::cout << person2.name << std::endl;
    std::cout << person2.age << std::endl;
    std::cout << person2.isMale << std::endl;

    person2.eat();
    person2.drink();
    person2.sleep();

    return 0;
}

#include <iostream>

// objects 
// assigning default values

class Person {
    public:
        std::string name = "Fred";
        int age = 71;
        bool isMale = true;

        void eat() {
            std::cout << name << " is eating" << std::endl;
        }
        void drink() {
            std::cout << name << " is drinking" << std::endl;
        }
        void sleep() {
            std::cout << name << " is sleeping" << std::endl;
        }
};

int main() {

    Person person1;
    Person person2;

    std::cout << person1.name << std::endl;
    std::cout << person1.age << std::endl;
    std::cout << person1.isMale << std::endl;

    std::cout << person2.name << std::endl;
    std::cout << person2.age << std::endl;
    std::cout << person2.isMale << std::endl;

    return 0;
}

#include <iostream>

class Car {
    public:
        std::string make;
        std::string model;
        int year;
        std::string color;

        void accelerate() {
            std::cout << "The " << make << " is accelerating" << std::endl;
        }
        void brake() {
            std::cout << "The " << make << " is braking" << std::endl;
        }
};

int main() {

    Car car1;
    car1.make = "Lexus";
    car1.model = "IS300";
    car1.year = 2022;
    car1.color = "White";

    std::cout << "Make: " << car1.make << std::endl;
    std::cout << "Model: " << car1.model << std::endl;
    std::cout << "Year: " << car1.year << std::endl;
    std::cout << "Color: " << car1.color << std::endl;

    return 0;
}

#include <iostream>

class Car {
    public:
        std::string make;
        std::string model;
        int year;
        std::string color;

        void accelerate() {
            std::cout << "The " << make << " is accelerating" << std::endl;
        }
        void brake() {
            std::cout << "The " << make << " is braking" << std::endl;
        }
};

int main() {

    Car car1;
    car1.make = "Lexus";
    car1.model = "IS300";
    car1.year = 2022;
    car1.color = "White";

    std::cout << "Make: " << car1.make << std::endl;
    std::cout << "Model: " << car1.model << std::endl;
    std::cout << "Year: " << car1.year << std::endl;
    std::cout << "Color: " << car1.color << std::endl;

    car1.accelerate();
    car1.brake();

    return 0;
}

#include <iostream>

class Car {
    public:
        std::string make;
        std::string model;
        int year;
        std::string color;

        void accelerate() {
            std::cout << "The " << make << " is accelerating" << std::endl;
        }
        void brake() {
            std::cout << "The " << make << " is braking" << std::endl;
        }
};

int main() {

    Car car1;
    Car car2;

    car1.make = "Lexus";
    car1.model = "IS300";
    car1.year = 2022;
    car1.color = "White";

    car2.make = "Honda";
    car2.model = "Civic";
    car2.year = 2021;
    car2.color = "Red";

    std::cout << "Make: " << car1.make << std::endl;
    std::cout << "Model: " << car1.model << std::endl;
    std::cout << "Year: " << car1.year << std::endl;
    std::cout << "Color: " << car1.color << std::endl;

    std::cout << "Make: " << car2.make << std::endl;
    std::cout << "Model: " << car2.model << std::endl;
    std::cout << "Year: " << car2.year << std::endl;
    std::cout << "Color: " << car2.color << std::endl;

    car1.accelerate();
    car1.brake();

    car2.accelerate();
    car2.brake();

    return 0;
}

#include <iostream>

// constructor = functions that are used to create an object
//               they are used to initialize the object
//               they are used to set the initial values of the object
//               they are used to perform actions on the object
//               special methods that are called when an object is instantiated
//               useful for assigning values to attributes as arguments

class Motorcycle {
    public:
        std::string make;
        std::string model;
        int year;
        std::string color;
        std::string licensePlate;

        Motorcycle(std::string make, std::string model, int year, std::string color, std::string licensePlate) {
            this->make = make;
            this->model = model;
            this->year = year;
            this->color = color;
            this->licensePlate = licensePlate;
        }
};

int main() {

    Motorcycle motorcycle1("Triumph", "Street Triple", 2023, "Yellow", "W4YN3M");

    std::cout << "Make: " << motorcycle1.make << std::endl;
    std::cout << "Model: " << motorcycle1.model << std::endl;
    std::cout << "Year: " << motorcycle1.year << std::endl;
    std::cout << "Color: " << motorcycle1.color << std::endl;
    std::cout << "License Plate: " << motorcycle1.licensePlate << std::endl;

    return 0;
}

#include <iostream>

// constructor = functions that are used to create an object
//               they are used to initialize the object
//               they are used to set the initial values of the object
//               they are used to perform actions on the object
//               special methods that are called when an object is instantiated
//               useful for assigning values to attributes as arguments

class Motorcycle {
    public:
        std::string make;
        std::string model;
        int year;
        std::string color;
        std::string licensePlate;

        // constructors can also be set up like this
        Motorcycle(std::string v, std::string w, int x, std::string y, std::string z) {
            make = v;
            model = w;
            year = x;
            color = y;
            licensePlate = z;
        }
};

int main() {

    Motorcycle motorcycle1("Triumph", "Street Triple", 2023, "Yellow", "W4YN3M");

    std::cout << "Make: " << motorcycle1.make << std::endl;
    std::cout << "Model: " << motorcycle1.model << std::endl;
    std::cout << "Year: " << motorcycle1.year << std::endl;
    std::cout << "Color: " << motorcycle1.color << std::endl;
    std::cout << "License Plate: " << motorcycle1.licensePlate << std::endl;

    return 0;
}

#include <iostream>

// constructor = functions that are used to create an object
//               they are used to initialize the object
//               they are used to set the initial values of the object
//               they are used to perform actions on the object
//               special methods that are called when an object is instantiated
//               useful for assigning values to attributes as arguments

class Motorcycle {
    public:
        std::string make;
        std::string model;
        int year;
        std::string color;
        std::string licensePlate;

        // constructors can also be set up like this
        Motorcycle(std::string v, std::string w, int x, std::string y, std::string z) {
            make = v;
            model = w;
            year = x;
            color = y;
            licensePlate = z;
        }
};

int main() {

    Motorcycle motorcycle1("Triumph", "Street Triple", 2023, "Yellow", "W4YN3M");
    Motorcycle motorcycle2("Honda", "CB1000", 2022, "Red", "MCR431");

    std::cout << "Make: " << motorcycle1.make << std::endl;
    std::cout << "Model: " << motorcycle1.model << std::endl;
    std::cout << "Year: " << motorcycle1.year << std::endl;
    std::cout << "Color: " << motorcycle1.color << std::endl;
    std::cout << "License Plate: " << motorcycle1.licensePlate << std::endl;

    std::cout << "Make: " << motorcycle2.make << std::endl;
    std::cout << "Model: " << motorcycle2.model << std::endl;
    std::cout << "Year: " << motorcycle2.year << std::endl;
    std::cout << "Color: " << motorcycle2.color << std::endl;
    std::cout << "License Plate: " << motorcycle2.licensePlate << std::endl;

    return 0;
}

#include <iostream>

// overloaded constructors = multiple constructors with the same name but different parameters
// allows fo varying arguments when instantiating an object

int main() {

    return 0;
}

#include <iostream>

// overloaded constructors = multiple constructors with the same name but different parameters
// allows fo varying arguments when instantiating an object

class Pizza {
    public:
        std::string topping1;

    Pizza(std::string topping1) {
        this->topping1 = topping1;
    }
};

int main() {

    Pizza pizza1("Pepperoni");

    std::cout << pizza1.topping1 << std::endl;

    return 0;
}

#include <iostream>

// overloaded constructors = multiple constructors with the same name but different parameters
// allows fo varying arguments when instantiating an object

class Pizza {
    public:
        std::string topping1;

    Pizza(std::string topping1) {
        this->topping1 = topping1;
    }
};

int main() {

    Pizza pizza1("Pepperoni");
    Pizza pizza2("Mushroom", "Peppers");
    // this will throw an error because Pizza is expecting only one argument

    std::cout << pizza1.topping1 << std::endl;

    return 0;
}

#include <iostream>

// overloaded constructors = multiple constructors with the same name but different parameters
// allows fo varying arguments when instantiating an object

class Pizza {
    public:
        std::string topping1;
        std::string topping2;

    Pizza(std::string topping1) {
        this->topping1 = topping1;
    }

    // we can create another constructor 
    Pizza(std::string topping1, std::string topping2) {
        this->topping1 = topping1;
        this->topping2 = topping2;
    }
};

int main() {

    Pizza pizza1("Pepperoni");
    Pizza pizza2("Mushroom", "Peppers");

    std::cout << pizza2.topping1 << std::endl;
    std::cout << pizza2.topping2 << std::endl;

    return 0;
}

#include <iostream>

// overloaded constructors = multiple constructors with the same name but different parameters
// allows fo varying arguments when instantiating an object

class Pizza {
    public:
        std::string topping1;
        std::string topping2;

    Pizza(std::string topping1) {
        this->topping1 = topping1;
    }

    Pizza(std::string topping1, std::string topping2) {
        this->topping1 = topping1;
        this->topping2 = topping2;
    }
};

int main() {

    Pizza pizza1("Pepperoni");
    Pizza pizza2("Mushroom", "Peppers");
    // what if we want a plain pizza with no toppings
    Pizza pizza3();

    std::cout << pizza2.topping1 << std::endl;
    std::cout << pizza2.topping2 << std::endl;

    return 0;
}

#include <iostream>

// overloaded constructors = multiple constructors with the same name but different parameters
// allows fo varying arguments when instantiating an object

class Pizza {
    public:
        std::string topping1;
        std::string topping2;

    Pizza(std::string topping1) {
        this->topping1 = topping1;
    }

    Pizza(std::string topping1, std::string topping2) {
        this->topping1 = topping1;
        this->topping2 = topping2;
    }
};

int main() {

    Pizza pizza1("Pepperoni");
    Pizza pizza2("Mushroom", "Peppers");
    // what if we want a plain pizza with no toppings
    Pizza pizza3;
    // the compiler tells us to remove the ()

    std::cout << pizza2.topping1 << std::endl;
    std::cout << pizza2.topping2 << std::endl;

    return 0;
}

#include <iostream>

// overloaded constructors = multiple constructors with the same name but different parameters
// allows fo varying arguments when instantiating an object

class Pizza {
    public:
        std::string topping1;
        std::string topping2;

    Pizza(std::string topping1) {
        this->topping1 = topping1;
    }

    Pizza(std::string topping1, std::string topping2) {
        this->topping1 = topping1;
        this->topping2 = topping2;
    }
};

int main() {

    Pizza pizza1("Pepperoni");
    Pizza pizza2("Mushroom", "Peppers");
    // what if we want a plain pizza with no toppings
    Pizza pizza3;
    // but we still throw an error because Pizza cannot be called with no parameters

    std::cout << pizza2.topping1 << std::endl;
    std::cout << pizza2.topping2 << std::endl;

    return 0;
}

#include <iostream>

// overloaded constructors = multiple constructors with the same name but different parameters
// allows fo varying arguments when instantiating an object

class Pizza {
    public:
        std::string topping1;
        std::string topping2;

    // so adding this
    Pizza() {

    }
    // solves the problem
    
    Pizza(std::string topping1) {
        this->topping1 = topping1;
    }

    Pizza(std::string topping1, std::string topping2) {
        this->topping1 = topping1;
        this->topping2 = topping2;
    }
};

int main() {

    Pizza pizza1("Pepperoni");
    Pizza pizza2("Mushroom", "Peppers");
    // what if we want a plain pizza with no toppings
    Pizza pizza3;
    // but we still throw an error because Pizza cannot be called with no parameters

    std::cout << pizza2.topping1 << std::endl;
    std::cout << pizza2.topping2 << std::endl;


    return 0;
}

#include <iostream>

// abstraction = hiding the implementation details of a class or function
//               from the user
// getter = a function that returns the value of a private member variable
// setter = a function that sets the value of a private member variable

int main() {

    return 0;
}

#include <iostream>

// abstraction = hiding the implementation details of a class or function
//               from the user
// getter = a function that returns the value of a private member variable
// setter = a function that sets the value of a private member variable

class Stove {
    public:
        int temperature = 0;
    
};

int main() {

    Stove stove;
    // since temperature is public, it is accessible outside the class and can be modified

    return 0;
}

#include <iostream>

// abstraction = hiding the implementation details of a class or function
//               from the user
// getter = a function that returns the value of a private member variable
// setter = a function that sets the value of a private member variable

class Stove {
    public:
        int temperature = 0;
    
};

int main() {

    Stove stove;
    // since temperature is public, it is accessible outside the class and can be modified
    stove.temperature = 500;

    std::cout << "Temperature: " << stove.temperature << std::endl;

    return 0;
}

#include <iostream>

// abstraction = hiding the implementation details of a class or function
//               from the user
// getter = a function that returns the value of a private member variable
// setter = a function that sets the value of a private member variable

class Stove {
    // setting the class attributes to private
    // so they can only be accessed from within the class
    private:
        int temperature = 0;
    
};

int main() {

    Stove stove;

    stove.temperature = 500;

    std::cout << "Temperature: " << stove.temperature << std::endl;
    // now the programmer can't access the temperature variable

    return 0;
}

#include <iostream>

// abstraction = hiding the implementation details of a class or function
//               from the user
// getter = a function that returns the value of a private member variable
// setter = a function that sets the value of a private member variable

class Stove {
    // setting the class attributes to private
    // so they can only be accessed from within the class
    private:
        int temperature = 0;
    // to access the temperature variable, we need a getter
    public:
    int getTemperature() {
        return temperature;
    }   
};

int main() {

    Stove stove;

    // we still can't modify the temperature variable
    // stove.temperature = 500;

    // but we can access it through the getter
    std::cout << "Temperature: " << stove.getTemperature() << std::endl;

    return 0;
}

#include <iostream>

// abstraction = hiding the implementation details of a class or function
//               from the user
// getter = a function that returns the value of a private member variable
// setter = a function that sets the value of a private member variable

class Stove {
    // setting the class attributes to private
    // so they can only be accessed from within the class
    private:
    int temperature = 0;

    // to access the temperature variable, we need a getter
    public:

    int getTemperature() {
        return temperature;
    }   
    // if you want to set the temperature, you need a setter (writeable as well as readable)
    void setTemperature(int temp) {
        this->temperature = temp;
    }
};

/**
 * @brief The main entry point of the program.
 *
 * @details This function demonstrates the use of a class with private
 *          member variables and public getter and setter methods. It
 *          creates an instance of the Stove class, sets its temperature
 *          using the setter method, and prints the temperature using the
 *          getter method.
 *
 * @return 0 on successful execution.
 */
int main() {

    Stove stove;

    stove.setTemperature(500);

    // but we can access it through the getter
    std::cout << "Temperature: " << stove.getTemperature() << std::endl;

    return 0;
}

#include <iostream>

// abstraction = hiding the implementation details of a class or function
//               from the user
// getter = a function that returns the value of a private member variable
// setter = a function that sets the value of a private member variable

class Stove {
    // setting the class attributes to private
    // so they can only be accessed from within the class
    private:
    int temperature = 0;

    // to access the temperature variable, we need a getter
    public:

    int getTemperature() {
        return temperature;
    }   
    // if you want to set the temperature, you need a setter (writeable as well as readable)
    void setTemperature(int temp) {
        // within the steer, we can add additional logic or validation
        if (temp < 0) {
            this->temperature = 0;
        }
        else if(temp > 280) {
            std::cout << "The temperature is too high" << std::endl;            
        }
        else {
            this->temperature = temp;
        }
    }
};

/**
 * @brief The main entry point of the program.
 *
 * @details This function demonstrates the use of a class with private
 *          member variables and public getter and setter methods. It
 *          creates an instance of the Stove class, sets its temperature
 *          using the setter method, and prints the temperature using the
 *          getter method.
 *
 * @return 0 on successful execution.
 */
int main() {

    Stove stove;

    stove.setTemperature(500);

    // but we can access it through the getter
    std::cout << "Temperature: " << stove.getTemperature() << std::endl;

    return 0;
}

#include <iostream>

// abstraction = hiding the implementation details of a class or function
//               from the user
// getter = a function that returns the value of a private member variable
// setter = a function that sets the value of a private member variable

class Stove {
    // setting the class attributes to private
    // so they can only be accessed from within the class
    private:
    int temperature = 0;

    // to access the temperature variable, we need a getter
    public:
    // we can also add a constructor to invoke the setter
    Stove(int temperature) {
        setTemperature(temperature);
    }

    int getTemperature() {
        return temperature;
    }   
    // if you want to set the temperature, you need a setter (writeable as well as readable)
    void setTemperature(int temp) {
        // within the steer, we can add additional logic or validation
        if (temp < 0) {
            this->temperature = 0;
        }
        else if(temp > 280) {
            std::cout << "The temperature is too high" << std::endl;            
        }
        else {
            this->temperature = temp;
        }
    }
};

/**
 * @brief The main entry point of the program.
 *
 * @details This function demonstrates the use of a class with private
 *          member variables and public getter and setter methods. It
 *          creates an instance of the Stove class, sets its temperature
 *          using the setter method, and prints the temperature using the
 *          getter method.
 *
 * @return 0 on successful execution.
 */
int main() {

    Stove stove(200);

    // stove.setTemperature(500);

    // but we can access it through the getter
    std::cout << "Temperature: " << stove.getTemperature() << std::endl;

    return 0;
}

#include <iostream>

// inheritance = when a class receives features from another class
// child class = class that inherits from another class
// parent class = class that is inherited from
// useful to reuse code and reduce code duplication

int main() {

    return 0;
}

#include <iostream>

// inheritance = when a class receives features from another class
// child class = class that inherits from another class
// parent class = class that is inherited from
// useful to reuse code and reduce code duplication

class Animal {
    public:
    bool isAlive = true;
};

class Dog : public Animal {
};

int main() {

    Dog dog;

    std::cout << dog.isAlive << std::endl;

    return 0;
}

#include <iostream>

// inheritance = when a class receives features from another class
// child class = class that inherits from another class
// parent class = class that is inherited from
// useful to reuse code and reduce code duplication

class Animal {
    public:
    bool isAlive = true;
    void eat() {
        std::cout << "The animal is eating." << std::endl;
    }
};

class Dog : public Animal {
};

int main() {

    Dog dog;

    std::cout << dog.isAlive << std::endl;
    dog.eat();

    return 0;
}

#include <iostream>

// inheritance = when a class receives features from another class
// child class = class that inherits from another class
// parent class = class that is inherited from
// useful to reuse code and reduce code duplication

class Animal {
    public:
    bool isAlive = true;
    void eat() {
        std::cout << "The animal is eating." << std::endl;
    }
};

class Dog : public Animal {
    public:
    void bark() {
        std::cout << "The dog is barking." << std::endl;
    }
};

int main() {

    Dog dog;

    std::cout << dog.isAlive << std::endl;
    dog.eat();
    dog.bark();

    return 0;
}

#include <iostream>

// inheritance = when a class receives features from another class
// child class = class that inherits from another class
// parent class = class that is inherited from
// useful to reuse code and reduce code duplication

class Animal {
    public:
    bool isAlive = true;
    void eat() {
        std::cout << "The animal is eating." << std::endl;
    }
};

class Dog : public Animal {
    public:
    void bark() {
        std::cout << "The dog is barking." << std::endl;
    }
};
class Cat : public Animal {
    public:
    void meow() {
        std::cout << "The cat goes meow." << std::endl;
    }
};

int main() {

    Dog dog;
    Cat cat;

    std::cout << dog.isAlive << std::endl;
    dog.eat();
    dog.bark();

    std::cout << cat.isAlive << std::endl;
    cat.eat();
    cat.meow();

    // of course, cats can't bark and dogs can't meow

    return 0;
}

#include <iostream>

// inheritance
// another example

class Shape {
    public:
    double area;
    double volume;
};
class Cube : public Shape {
    public:
    double side;   
    /**
     * @brief Constructor to create a cube with given side length
     *
     * @param side The length of each side of the cube
     */
    Cube(double side) {
        this->side = side;
        this->area = 6 * side * side;
        this->volume = side * side * side;
    } 
};
class Sphere : public Shape {
    public:
    double radius;
    /**
     * @brief Constructor to create a sphere with given radius
     *
     * @param radius The radius of the sphere
     *
     * @details Calculates the area and volume of the sphere based on the radius
     */
    Sphere(double radius) {
        this->radius = radius;
        this->area = 4 * 3.14159 * (radius * radius);
        this->volume = (4 / 3.0) * 3.14159 * (radius * radius * radius);
    }
};

/**
 * @brief The main entry point of the program
 *
 * This function creates a Cube and a Sphere object with a side length and radius of 10, respectively.
 * It calculates their areas and volumes, and outputs the results to the console.
 *
 * @return 0 on successful execution
 */
int main() {

    Cube cube(10);
    Sphere sphere(10);

    std::cout << "The area of the cube is: " << cube.area<< "cm^2" << std::endl;
    std::cout << "The volume of the cube is: " << cube.volume << "cm^3" << std::endl;
    std::cout << "The area of the sphere is: " << sphere.area << "cm^2" << std::endl;
    std::cout << "The volume of the sphere is: " << sphere.volume << "cm^3" << std::endl;

    return 0;
}