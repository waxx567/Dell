public class SquareASortedList {
    /*
    Given a list of integers sorted in ascending order return a list of integers that contains the square of each value in the input list sorted in ascending order.
    Example 1
    Input: nums = [2, 4, 6, 8]
    Output: [4, 16, 36, 64];
    Example 2
    Input: nums = [-10, 2, 4, 6, 8]
    Output: [4, 16, 36, 64, 100]
    */
    public static List<Integer> squareList(List<Integer> nums){
        // Create a new list to hold the squared numbers
        List<Integer> squaredNums = new List<Integer>();
    
        // Pointers to start at the beginning and end of the input list
        Integer left = 0;
        Integer right = nums.size() - 1;
    
        // Temporary list to hold te squared values in reverse order
        List<Integer> temp = new List<Integer>();
        
        // Traverse the list from the end to the beginning of the squaredNums list
        while (left <= right) {
            Integer leftSquare = nums[left] * nums[left];
            Integer rightSquare = nums[right] * nums[right];
            
            if (leftSquare > rightSquare) {
                // Add the larger square to the result list
                temp.add(leftSquare);
                // Move the left pointer to the right
                left++;
            } else {
                // Add the larger square to the result list
                temp.add(rightSquare);
                // Move the right pointer to the left
                right--;
            }
        }
    
        // Reverse the list to get it in ascending order
        for (Integer i = temp.size() - 1; i >= 0; i--) {
            squaredNums.add(temp[i]);
        }
        
        return squaredNums;
    }
}