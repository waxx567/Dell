public with sharing class MaintenanceRequestHelper {
    /*
        Globals
    */
    static String CLOSED = 'Closed';
    static String REPAIR = 'Repair';
    static String ROUTINE_MAINTENANCE = 'Routine Maintenance';


    /*
        Method handles any instance where an update occurs on a Maintenance Request
        Takes a list of cases as input which we are calling newCases
        Calls a helper method on the list of closed cases it creates
    */
    public static void afterUpdateHandler(List<Case> newCases) {
        List<Case> closedCases = new List<Case>();

        // If cases in the new list meet the requirements, add them to the closedCases list
        for (Case nc : newCases) {
            if (nc.Status == CLOSED && (nc.Type == REPAIR || nc.Type == ROUTINE_MAINTENANCE)) {
                closedCases.add(nc);
            }
        }

        // Call the method that updates work orders on the closedCases list if it is not empty
        if (closedCases.size() > 0) {
            updateWorkOrders(closedCases);
        }
    }
    

    /*
        Method creates a new Routine Maintenance Request when any Maintenance Request is closed
    */
    public static void updateWorkOrders(List<Case> caseList) {
        List<Case> newCaseList = new List<Case>();
        List<Equipment_Maintenance_Item__c> insertItemList = new List<Equipment_Maintenance_Item__c>();
        // Call the helper method to get the date of the next request
        Map<String, Integer> nextMaintenanceDate = nextDateHelper(caseList); 
        // Call the helper method to retrieve the items to be cloned for the new request
        Map<String, List<Equipment_Maintenance_Item__c>> maintenanceItems = maintenanceItemHelper(caseList); 

        for (Case c : caseList) {
            Case newCase = new Case();

            newCase.Date_Reported__c = Date.today();

            // Convert the current case ID to a string and assign it to the new case
            newCase.Cloned_Case_Id__c = String.valueOf(c.Id);

            // Clone values to the new case
            newCase.Vehicle__c = c.Vehicle__c;
            newCase.Type = ROUTINE_MAINTENANCE;
            newCase.Subject = ROUTINE_MAINTENANCE;

            // Assign the new maintenance request date
            newCase.Date_Due__c = Date.today();
            // If the case exists, add the number of days to today to get the next due date
            if (nextMaintenanceDate.get(c.Id) != null) {
                newCase.Date_Due__c = newCase.Date_Due__c.addDays(nextMaintenanceDate.get(c.Id));
            }

            newCaseList.add(newCase);
        }

        if (newCaseList.size() > 0) {
            insert newCaseList;

            for (Case nc : newCaseList) {
                // Convert the current case ID string to a value of type Id
                Id itemId = Id.valueOf(nc.Cloned_Case_Id__c);
                // Create a list of maintenance items that have that ID
                List<Equipment_Maintenance_Item__c> itemList = maintenanceItems.get(itemId);

                // Add information to items and items to the insert list if the item list is not empty
                if (itemList.size() > 0) {
                    for (Equipment_Maintenance_Item__c emi : itemList) {
                        Equipment_Maintenance_Item__c newItem = new Equipment_Maintenance_Item__c();

                        newItem.Maintenance_Request__c = nc.Id;
                        newItem.Equipment__c = emi.Equipment__c;
                        newItem.Quantity__c = emi.Quantity__c;

                        insertItemList.add(newItem);
                    }
                }
            }
            // Insert the item list into the database if it is not empty
            if (insertItemList.size() > 0) {
                insert insertItemList;
            }
        }
    } 

    /*
        Method calculates the due date for the next Maintenance Request
        Populate a map of aggregate results and days to add, and return that map
    */
    public static Map<String, Integer> nextDateHelper(List<Case> caseList) {
        Map<String, Integer> dueDate = new Map<String, Integer>();
        Map<Id,Case> keyMap = new Map<Id,Case>(caseList);

        // Query the database for maintenance cycle information
        List<AggregateResult> resultsList = [
            SELECT Maintenance_Request__c cId, MIN(Equipment__r.Maintenance_Cycle__c) cycle 
            FROM Equipment_Maintenance_Item__c 
            WHERE Maintenance_Request__c 
            IN :keyMap.keySet() 
            AND Equipment__r.Maintenance_Cycle__c != null 
            GROUP BY Maintenance_Request__c
        ]; 

        // Populate the dueDate map with the update date and the number of days to add
        for (AggregateResult ar : resultsList) {
            dueDate.put(String.valueOf(ar.get('cId')), Integer.valueOf(ar.get('cycle')));
        }

        return dueDate;
    }

    /*
        Method returns all maintenance items associated with Maintenance Requests that have been closed
    */
    public static Map<String, List<Equipment_Maintenance_Item__c>> maintenanceItemHelper(List<Case> caseList) {
        Map<String,List<Equipment_Maintenance_Item__c>> maintenanceItemMap = new Map<String,List<Equipment_Maintenance_Item__c>>();
        Map<Id,Case> caseMap = new Map<Id,Case>(caseList);

        // Query the database for equipment maintenance item inventory information
        List<Equipment_Maintenance_Item__c> emiList = [
            SELECT Id, Maintenance_Request__c, Equipment__c, Quantity__c
            FROM Equipment_Maintenance_Item__c
            WHERE Maintenance_Request__c 
            IN :caseMap.keySet()
        ];

        for (Equipment_Maintenance_Item__c item : emiList) {
            if (maintenanceItemMap.containsKey(item.Maintenance_Request__c)) {
                List<Equipment_Maintenance_Item__c> temp = maintenanceItemMap.get(item.Maintenance_Request__c);
                temp.add(item);
                maintenanceItemMap.put(item.Maintenance_Request__c, temp);
            } else {
                maintenanceItemMap.put(item.Maintenance_Request__c, new List<Equipment_Maintenance_Item__c>{item});
            }
        }

        return maintenanceItemMap;
    }
}