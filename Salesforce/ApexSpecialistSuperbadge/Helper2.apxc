public with sharing class MaintenanceRequestHelper {
   
    // Method to update work orders and create follow-up maintenance cases if certain conditions are met
    public static void updateWorkOrders(List<Case> updWorkOrders, Map<Id, Case> nonUpdCaseMap) {
       
        // Set to hold IDs of valid Cases that meet the criteria for further processing
        Set<Id> validIds = new Set<Id>();
       
        // Iterate through the list of work orders that might be updated
        for (Case c : updWorkOrders) {
            // Check if the corresponding Case in nonUpdCaseMap is not closed and the current Case is closed
            if (nonUpdCaseMap.get(c.Id).Status != 'Closed' && c.Status == 'Closed') {
                // Check if the Case type is either 'Repair' or 'Routine Maintenance'
                if (c.Type == 'Repair' || c.Type == 'Routine Maintenance') {
                    // Add the Case ID to the set of valid IDs
                    validIds.add(c.Id);
                }
            }
        }
       
        // Proceed only if there are valid IDs that need to be processed
        if (!validIds.isEmpty()) {
           
            // List to store the new Cases that will be created
            List<Case> newCases = new List<Case>();
           
            // Query to retrieve Cases with their related data for the valid IDs
            Map<Id, Case> closedCasesM = new Map<Id, Case>([SELECT Id, Vehicle__c, Equipment__c, Equipment__r.Maintenance_Cycle__c,
                                                            (SELECT Id, Equipment__c, Quantity__c FROM Equipment_Maintenance_Items__r)
                                                            FROM Case WHERE Id IN :validIds]);
           
            // Map to store the minimum maintenance cycle for each Case
            Map<Id, Decimal> maintenanceCycles = new Map<Id, Decimal>();
           
            // Aggregate query to get the minimum maintenance cycle for each valid Case
            AggregateResult[] results = [SELECT Maintenance_Request__c, MIN(Equipment__r.Maintenance_Cycle__c) cycle
                                         FROM Equipment_Maintenance_Item__c
                                         WHERE Maintenance_Request__c IN :validIds
                                         GROUP BY Maintenance_Request__c];
           
            // Populate the maintenanceCycles map with the results of the aggregate query
            for (AggregateResult ar : results) {
                maintenanceCycles.put((Id) ar.get('Maintenance_Request__c'), (Decimal) ar.get('cycle'));
            }
           
            // Loop through the Cases retrieved earlier
            for (Case cc : closedCasesM.values()) {
                // Create a new Case for routine maintenance, linking it to the closed Case
                Case nc = new Case(
                    ParentId = cc.Id,
                    Status = 'New',
                    Subject = 'Routine Maintenance',
                    Type = 'Routine Maintenance',
                    Vehicle__c = cc.Vehicle__c,
                    Equipment__c = cc.Equipment__c,
                    Origin = 'Web',
                    Date_Reported__c = Date.Today()
                );
               
                // If a maintenance cycle exists for the Case, set the due date for the new Case
                if (maintenanceCycles.containsKey(cc.Id)) {
                    nc.Date_Due__c = Date.today().addDays((Integer) maintenanceCycles.get(cc.Id));
                }
               
                // Add the newly created Case to the list of new Cases
                newCases.add(nc);
            }
           
            // Insert the new Cases into the database
            insert newCases;
           
            // List to store the cloned Equipment Maintenance Items
            List<Equipment_Maintenance_Item__c> clonedWPs = new List<Equipment_Maintenance_Item__c>();
           
            // Loop through the newly created Cases
            for (Case nc : newCases) {
                // Clone each Equipment Maintenance Item related to the original closed Case
                for (Equipment_Maintenance_Item__c wp : closedCasesM.get(nc.ParentId).Equipment_Maintenance_Items__r) {
                    Equipment_Maintenance_Item__c wpClone = wp.clone();
                    wpClone.Maintenance_Request__c = nc.Id;  // Link the cloned item to the new Case
                    clonedWPs.add(wpClone);  // Add the cloned item to the list
                }
            }
           
            // Insert the cloned Equipment Maintenance Items into the database
            insert clonedWPs;
        }
    }
}