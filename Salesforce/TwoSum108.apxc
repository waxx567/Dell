public class TwoSum108 {
    /*
    You are given a list of unsorted integers and a target value. If the list contains two values that add up to target, return a list containing the indexes of the two numbers. You may not use a number more than once. Every input will have a solution.
    Tests will include lists of up to 10,000 members. Only solutions that run in linear time will pass.
    Example 1
    Input: nums = [2,8,11,15], target = 10 Output: [0,1] nums[0] + nums[1] = 10
    Example 2
    Input: nums = [6,6,3,22, 1, 11, 56], target = 4 Output: [2,4] nums[2] + nums[4] = 4
    Hint: A solution that uses only one pass (a single loop) will pass.
    Hint: Think of the complement. If you see a number n at an index, seeing target - n at a different index means you have an answer.
    Hint: Use a Map to maintain a collection of numbers already seen along with their indexes.
    */
    public static List<Integer> twoSum(List<Integer> nums, Integer target) {
        // A map to store the number and its index
        Map<Integer, Integer> numMap = new Map<Integer, Integer>(); 
        List<Integer> indices = new List<Integer>();
    
        // Loop through the list of numbers
        for (Integer i = 0; i < nums.size(); i++) {
            Integer currentNum = nums[i];
            Integer complement = target - currentNum;     
    
            // If the complement exists in the map
            if (numMap.containsKey(complement)) {
                indices.add(numMap.get(complement));
                indices.add(i);
                return indices; // A solution has been found
            }
    
            // Add the current number and its index to the map
            numMap.put(currentNum, i);       
        }
    
        // Return empty if no solution is found (even though the problem guarantees a solution)
        return indices;
    }
    
    /*
    Step 1: Use a Map<Integer, Integer> to store the number as the key and its index as the value.
    Step 2: For each number in the list, calculate the complement (target - current number).
    Step 3: Check if the complement exists in the Map. If it does, the two numbers that add up to the target have been found, so return their indices.
    Step 4: If the complement is not found, add the current number and its index to the Map and continue.
    */
}