public class FindCommonCharacters {
    /*
    Apex practice problem #118
    Given list of strings: strs, implement a method that will return all the common characters in the list. The character should be repeated in the list according the minimum frequency that it occurs in the list. The input will only consist of lower case letters in the English alphabet.
    Example 1
    input: strs = ['cook', 'lock', 'cool,]
    output: ['c', 'o'];
    input: strs = ['bella', 'label', 'roller']
    output: ['e', 'l', 'l'];
    Hint: Try solving with two maps
    Hint: Convert the string to ASCII using the getChars() method to make it easier to solve. Refer to www.asciitable.com to understand what Integer is which character.
    */
    public List<String> commonChars(List<String> strs){
        // Map to store the frequency of characters for each string
        Map<String, Integer> map1 = new Map<String, Integer>(); 
        
        // Process the First String
        String firstStr = strs[0];
        for (Integer i = 0; i < firstStr.length(); i++) {
            String ch = firstStr.substring(i, 1 + 1); // Get each character as a string
            if (!map1.containsKey(ch)) {
                map1.put(ch, 1); // First occurrence
            } else {
                map1.put(ch, map1.get(ch) + 1); // Increment count
            }
        }

        // Process remaining strings
        for (Integer i = 1; i < strs.size(); i++) {
            // Map to store minimum frequencies of all characters across all strings
            Map<Integer, Integer> tempMap = new Map<Integer, Integer>(); 
            String currentStr = strs[i];
            for (Integer j = 0; j < currentStr.length(); j++) {
                String ch = currentStr.substring(j, j + 1);
            }
        }


        // The result list will hold the common characters that appear in all strings.
        List<String> result = new List<String>();

        // Iterate through the first string and count the frequency of each character
        // Convert the string into characters using getChars() and store the counts in map1
        Integer i = 1;
        while (i <= strs[0].length()) {
            if (map1.keySet().contains(strs[i].getChars())) {
                map1.get(i)++;
                map1.put(strs[i].getChars(), i);
                i++;
            } 
            else {                
                map1.put(strs[i].getChars(), i);
                i++;
            }
        }

        // 3. Iterate Over the Remaining Strings
        // Once all strings are processed, iterate over the character map to collect the characters that appear in all strings.
        // If a character appears at least once in each string, add it to the result list according to its minimum frequency across all strings.

        // 5. Edge Cases
        // Consider cases where:
        // A string is empty or there are no common characters.
        // Characters appear in different frequencies across strings.
    }
}