public class IndexWordsByLength {
    // Create a function that takes in a String “input” and returns a map<Integer, List<String>> whose keys are the length of each word in the sentence and whose value are all the words of that length. If there are no words, an empty map is returned.
    public static Map<Integer, List<String>> mapWordsIndex(String input) {
    
        // Create map to hold return values
        Map<Integer, List<String>> wordsIndexedByLength = new Map<Integer, List<String>>();

        // If there are no words
        if (input.length() == 0) {
            return wordsIndexedByLength;
        }
        // Split input string into words and store them in a list
        List<String> words = input.split(' ');
        // Remove the full stop off the final word
        words[words.size()-1] = words[words.size()-1].removeEnd('.');
        
        // Loop through words
        for (String word : words) {
            Integer wordLength = word.length();
    
            List<String> wordsOfThisLength = wordsIndexedByLength.get(wordLength);
    
            if (wordsOfThisLength == null) {
                wordsOfThisLength = new List<String>();
                     
                wordsIndexedByLength.put(wordLength, wordsOfThisLength);
            }
    
            wordsOfThisLength.add(word);
        }
    
        return wordsIndexedByLength;

    }
}

// IndexWordsByLength.mapWordsIndex('The dogs like to bark.');

/*
public static Map<Integer, List<String>> indexWordsByLength(String input) {
    List<String> words = getWords(input);

    Map<Integer, List<String>> wordsIndexedByLength = new Map<Integer, List<String>>();

    for (String word : words) {
        Integer wordLength = word.length();

        List<String> wordsOfThisLength = wordsIndexedByLength.get(wordLength);

        if (wordsOfThisLength == null) {
            wordsOfThisLength = new List<String>();
                 
            wordsIndexedByLength.put(wordLength, wordsOfThisLength);
        }

        wordsOfThisLength.add(word);
    }

    return wordsIndexedByLength;
}
*/