public class Defrag {
    /*
    You are given a List of Integers which represents memory with -1 representing empty space and all other Integers representing. Your task is to move all the empty spaces to the end of the list while maintaining the order of the rest of the elements.
    Note: that you must do this in-place without making a copy of the array.
    Examples:
    Input: [-1,1,-1,3,12]
    Output: [1,3,12,-1,-1]
    Input: [-1,1,0,15,2]
    Output: [1,0,15,2,-1]
    */
    public static void defragging(Integer[] memory)
    {
        // Pointer to place non -1 elements
        Integer pos = 0; 

        // Step 1: Move all non -1 elements to the front of the list
        for (Integer i = 0; i < memory.size(); i++) {
            if (memory[i] != -1) {
                memory[pos] = memory[i];
                pos++;
            }
        }

        // Step 2: Fill the rest with -1
        while (pos < memory.size()) {
            memory[pos] = -1;
            pos++;
        }
    }
}

/*
One pointer `pos` tracks the next position to place non--1 values, and the other pointer `i` iterates over the list to find those non -1 values.

Step 1: A single loop to move all non -1 values to the front of the list, keeping their relative order intact. `pos` keeps track of the next empty position where a valid element (not -1) should be placed.
Step 2: Once all valid elements have been moved, fill the remaining positions with -1.

Time Complexity: 
This solution runs in O(n) time, where n is the length of the input list. It only requires a single traversal of the list, making it efficient.

This method ensures that all valid elements are shifted to the front while maintaining their order.
It avoids the complications of modifying the list (adding/removing elements) during iteration.
*/