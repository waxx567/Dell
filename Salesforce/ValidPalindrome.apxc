public class ValidPalindrome {
    /*
    A String is a considered a valid palindrome if it reads the same forwards and backwards. For the purpose of this problem, we consider a String to be a valid palindrome if it reads the same forwards and backwards after after converting all characters to lowercase, and removing all characters that are not a number or a letter.
    Given a String str, return true if is a valid palindrome given the definition above, and return false if it is not. Assume that the input will contain only English numbers and letters (0-9, a-z, A-Z) along with punctuation and spaces.
    Examples:
    isPalindrome('A man, a plan, a canal: Panama') returns true
    isPalindrome('Panama') returns false
    */ 
    public Boolean isPalindrome(String str){
        // Remove non-alphanumeric characters and convert to lowercase
        Pattern nonAlphanumeric = Pattern.compile('[^a-zA-Z0-9]');
        Matcher matcher = nonAlphanumeric.matcher(str);
        str = matcher.replaceAll('').toLowerCase();
        
        // Two-pointer technique to check palindrome
        Integer left = 0;
        Integer right = str.length() - 1;
        
        while (left < right) {
            // If characters don't match, it is not a palindrome
            if (str.charAt(left) != str.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }
        
        return true;
    }
}