public class Convert15IdTo18Id {
    // Nowhere near as efficient as `Convert15To18ID.apxc` but this one works
    public String convert15to18DigitId(String fifteenDigit) 
    {
        // Validate input
        if (fifteenDigit == null || fifteenDigit.length() != 15) {
            return '-1';
        }
        // Caracters and binaries
        List<String> characters = new List<String>{
            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 
            'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 
            'Y', 'Z', '0', '1', '2', '3', '4', '5'
        };
        List<String> binaries = new List<String>{
            '00000', '00001', '00010', '00011', '00100', '00101',
            '01100', '00111', '01000', '01001', '01010', '01011',
            '00110', '01101', '01110', '01111', '10000', '10001',
            '10010', '10011', '10100', '10101', '10110', '10111',
            '11000', '11001', '11010', '11011', '11100', '11101',
            '11110', '11111'
        };

        String suffix = '';

        List<String> segments = new List<String>();
        String firstSegment = fifteenDigit.substring(0, 5);
        String middleSegment = fifteenDigit.substring(5, 10);
        String lastSegment = fifteenDigit.substring(10, 15);
        segments.add(firstSegment);
        segments.add(middleSegment);
        segments.add(lastSegment);

        // Handle firstSegment
        String[] firstChars = firstSegment.split('');
        String firstBinaryString = '';
        // Loop over first segment character list
        for (String f : firstChars) {
            if (f.isNumeric() || f.isAllLowerCase()) {
                firstBinaryString += '0';
            }
            else {
                firstBinaryString += '1';
            }
        }

        for (String s : binaries) {
            Integer firstIndex = binaries.indexOf(s);
            Boolean sMatch = s.equals(firstBinaryString);
            if (sMatch) {
                suffix += characters[firstIndex];
            }
        }
        System.debug('suffix: ' + suffix);

        // Handle middleSegment
        String[] middleChars = middleSegment.split('');
        String middleBinaryString = '';
        // Loop over middle segment character list
        for (String m : middleChars) {
            if (m.isNumeric() || m.isAllLowerCase()) {
                middleBinaryString += '0';
            }
            else {
                middleBinaryString += '1';
            }
        }

        for (String t : binaries) {
            Integer middleIndex = binaries.indexOf(t);
            Boolean tMatch = t.equals(middleBinaryString);
            if (tMatch) {
                suffix += characters[middleIndex];
            }
        }

        // Handle lastSegment
        String[] lastChars = lastSegment.split('');
        String lastBinaryString = '';
        // Loop over last segment character list
        for (String l : lastChars) {
            if (l.isNumeric() || l.isAllLowerCase()) {
                lastBinaryString += '0';
            }
            else {
                lastBinaryString += '1';
            }
        }

        for (String u : binaries) {
            Integer lastIndex = binaries.indexOf(u);
            Boolean uMatch = u.equals(lastBinaryString);
            if (uMatch) {
                suffix += characters[lastIndex];
            }
        }
        
        return fifteenDigit + suffix;
    }
}