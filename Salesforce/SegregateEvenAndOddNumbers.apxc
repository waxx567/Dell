public class SegregateEvenAndOddNumbers {
    /*
    Given a List of Integers (List<Integer>), write a function that segregates even and odd numbers. The function should put all even numbers first, and then odd numbers.
    You are required to modify the list that is passed. Try doing so without creating any extra lists, which would mean an O(1) space complexity.
    Example 1:
    Input: [5, 4, 3, 2, 1, 6]
    Output: [2, 4, 6, 1, 3, 5]
    The above output may vary since you are not required to order the even and odd numbers in any sequence. As long as even numbers come before odd numbers, the answer is valid. [4, 6, 2, 5, 1, 3] and [6, 4, 2, 3, 1, 5] are also valid answers.
    Example 2:
    Input: [12, 34, 45, 9, 8, 90, 3]
    Output: [8, 12, 34, 90, 3, 9, 45]
    Hint: Increment left index while we see even at left
    Decrement right index while we see odd at right
    Keep doing this in two pointer approach
    Hint: Swap left and right value if they are in the wrong position.
    Hint: To Check even and odd use Math.mod(Integer, Integer) function from the Math class.
    */
    public static void segregateEvenOdd(List<Integer> numbers){    
        Integer left = 0;
        Integer right = numbers.size() - 1;
    
        while (left < right) {
            // Find the first odd number from the left
            while (left < right && Math.mod(numbers.get(left), 2) == 0) {
                left++;
            }
    
            // Find the first even number from the right
            while (left < right && Math.mod(numbers.get(right), 2) != 0) {
                right--;
            }
    
            // Swap the odd number at left with the even number at right
            if (left < right) {
                Integer temp = numbers.get(left);
                numbers.set(left, numbers.get(right));
                numbers.set(right, temp);
    
                // Move the pointers
                left++;
                right--;
            }
        }
    }
}