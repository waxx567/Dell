public class sortListOfsObjects {
    // Implement the method getAccounts(), function, which accepts a list of accounts as input and returns a new list of accounts sorted in descending order based on the Annual Revenue field.
    public List<Account> getAccounts(List<Account> accounts) {
        // code here
    }
    // write extra class here
    public class OpportunityWrapper implements Comparable {

        public Opportunity oppy;
        
        // Constructor
        public OpportunityWrapper(Opportunity op) {
            // Guard against wrapping a null 
            if(op == null) {
                Exception ex = new NullPointerException();
                ex.setMessage('Opportunity argument cannot be null'); 
                throw ex;
            }
            oppy = op;
        }
        
        // Compare opportunities based on the opportunity amount.
        public Integer compareTo(Object compareTo) {
            // Cast argument to OpportunityWrapper
            OpportunityWrapper compareToOppy = (OpportunityWrapper)compareTo;
            
            // The return value of 0 indicates that both elements are equal.
            Integer returnValue = 0;
            if ((oppy.Amount == null) && (compareToOppy.oppy.Amount == null)) {
                // both wrappers have null Amounts
                returnValue = 0;
            } else if ((oppy.Amount == null) && (compareToOppy.oppy.Amount != null)){
                // nulls-first implementation
                returnValue = -1;
            } else if ((oppy.Amount != null) && (compareToOppy.oppy.Amount == null)){
                // nulls-first implementation
                returnValue = 1;
            } else if (oppy.Amount > compareToOppy.oppy.Amount) {
                // Set return value to a positive value.
                returnValue = 1;
            } else if (oppy.Amount < compareToOppy.oppy.Amount) {
                // Set return value to a negative value.
                returnValue = -1;
            } 
            return returnValue;
        }
    }
}