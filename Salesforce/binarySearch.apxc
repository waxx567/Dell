public class BinarySearch {
    /*
    Given a list of opportunities sorted by the Amount field and an Integer target, implement a solution to search the list and return the index of the opportunity with an amount that is equal to the target.
    In the list does not contain a matching value return negative 1.
    Example 1
    input: opportunities = [ {opp1, amount = 100}, {opp2, amount = 200}, {opp3, amount = 300}] target = 200;
    output: 1; this is the index of opportunity with an amount = to the target
    Example 2
    input: opportunities = [ {opp1, amount = 100}, {opp2, amount = 200}, {opp3, amount = 300}] target = 500;
    output: -1; The list does not contain a matching value
    Important constraint: A solution that uses a loop to check ALL opportunities will time out. Look for a solution faster than the linear solution.
    Hint: The solution needs to run faster than O(n) or linear time. Is there way to use sorted data to our advantage?
    Hint: Make use of a divide and conquer strategy. Look at the middle element to decide how to divide.
    Hint: Binary search video tutorial https://youtu.be/KaW5Oq0Zark
    */
    public static Integer search(List<Opportunity> opportunities, Integer target){
        // System.debug('Target: ' + target);
        // Pointers
        Integer left = 0;
        Integer right = opportunities.size() - 1;
    
        while (left <= right) {
            // Find the middle
            Integer middle = left + (right - left) / 2; // see explanation below
            // System.debug('Middle index: ' + middle);
            Decimal middleAmount = opportunities[middle].Amount;
            // System.debug('Middle Amount: ' + middleAmount);
    
            if (middleAmount == target) {
                return middle;
            }
            if (target < middleAmount) {
                right = middle - 1;
            } else {
                left = middle + 1;
            }
        }
    
        return -1;
    }    
}

/*
Line 21 explanation:
Using (left + right) / 2 directly to calculate the middle index might seem simpler, 
but it can cause an integer overflow in some programming languages when left and 
right are large numbers. Even though this is less of a concern in Apex (since Integer 
values are not likely to overflow in this context), the safer approach is to use 
left + (right - left) / 2, which avoids the risk of overflow by keeping the 
calculation within the range of valid indices.
*/