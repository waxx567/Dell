public class LongestSubstringWithDistinctCharacters {
    /*
    Apex practice problem #116
    Given a string str and an Integer k, return the size of the largest substring of str consisting of k distinct characters
    Example 1
    input: str = 'araaaci' k = 2
    output: 4; largest substring with 2 distinct characters = 'araa';
    Example 2
    input: str = 'string', k = 10
    output: 6, there are fewer than 10 distinct characters
    Example 3
    input: str = 'araaci', k = 1
    output: 2, longest substring with 1 distinct character is aa
    Hint: Try to use a sliding window pattern, use a map to track values
    Hint: When the size of the map is greater than k, discard values
    */

    /*
    Plan:
    1. Sliding Window: Use two pointers (left and right) to represent the current window.
    2. Map: Use a map to track the frequency of characters in the current window.
    3. Adjust Window: If the number of distinct characters exceeds k, move the left pointer to reduce the window size.
    4. Max Length: Keep track of the maximum length of any window that satisfies the condition.
    */
    public static Integer longestDistinctSubstring(String str, Integer k){
        // Handle edge cases
        if (str == null || str.isEmpty() || k <= 0) {
            return 0;
        }

        Map<String,Integer> charCountMap = new Map<String,Integer>();
        Integer left = 0;
        Integer maxLength = 0;

        // Sliding window from left to right
        for (Integer right = 0; right < str.length(); right++) {
            // Get the current character as a single-character string
            String currentChar = str.substring(right, right + 1);

            // Add the current caracter to the map or update is frequency
            if (!charCountMap.containsKey(currentChar)) {
                charCountMap.put(currentChar, 0);
            }
            charCountMap.put(currentChar, charCountMap.get(currentChar) + 1);

            // If the window contains more than 'k' distinct characters, shrink the window
        }
    }
}