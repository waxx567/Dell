public with sharing class MaintenanceRequestHelper {
    /*
        Globals
    */
    static String CLOSED = 'Closed';
    static String REPAIR = 'Repair';
    static String ROUTINE_MAINTENANCE = 'Routine Maintenance';

    /*
        Method handles any instance where an update occurs on a Maintenance Request
        Takes a list of cases as input which we are calling newCases
        Call a helper method on the list of closed cases
    */
    public static void afterUpdateHandler(List<Case> newCases) {
        List<Case> closedCases = new List<Case>();

        // If cases in the list have been closed, and are of Type 'Repair' or 'Routine Maintenance'
        // Add them to the closedCases case list
        for (Case nc : newCases) {
            if (nc.Status == CLOSED && (nc.Type == REPAIR || nc.Type == ROUTINE_MAINTENANCE)) {
                closedCases.add(nc);
            }
        }

        // Call the updateWorkOrders method on the closedCases list
        if (closedCases.size() > 0) {
            updateWorkOrders(closedCases);
        }
    }
    
    /*
        Method to create a new Routine Maintenance Request when any Maintenance Request is closed
    */
    public static void updateWorkOrders(List<Case> caseList) {
        List<Case> newCaseList = new List<Case>();
        List<Equipment_Maintenance_Item__c> insertList = new List<Equipment_Maintenance_Item__c>();
        // Call helper method to get date of next request
        Map<String, Integer> nextMaintenanceDate = nextDateHelper(caseList); 
        // Call helper method to retrieve items to be cloned for new request
        Map<String, List<Equipment_Maintenance_Item__c>> maintenanceItems = maintenanceItemHelper(caseList); 

        for (Case c : caseList) {
            Case newCase = new Case();

            newCase.Date_Reported__c = Date.today();

            // Convert current case ID to a string and assign to the new case
            String cloneId = String.valueOf(c.Id);
            newCase.Cloned_Case_Id__c = cloneId;

            // Clone values to the new case
            newCase.Vehicle__c = c.Vehicle__c;
            newCase.Type = ROUTINE_MAINTENANCE;
            newCase.Subject = ROUTINE_MAINTENANCE;

            // Assign new maintenance request date
            if (nextMaintenanceDate.get(c.Id) != null) {
                if (c.Date_Due__c != null) {
                    Integer difference = Date.today().daysBetween(c.Date_Due__c);
                    newCase.Date_Due__c = Date.today().addDays(difference);                    
                }
            } else {
                newCase.Date_Due__c = Date.today();
            }
            // System.debug('due date: ' + newCase.Date_Due__c);

            newCaseList.add(newCase);
        }

        if (newCaseList.size() > 0) {

            insert newCaseList;

            for (Case nc : newCaseList) {
                // Convert current case ID string to type Id
                Id itemId = Id.valueOf(nc.Cloned_Case_Id__c);
                // Create a list of maintenance items that have that ID
                List<Equipment_Maintenance_Item__c> itemList = maintenanceItems.get(itemId);

                if (itemList.size() > 0) {

                    for (Equipment_Maintenance_Item__c emi : itemList) {
                        Equipment_Maintenance_Item__c newItem = new Equipment_Maintenance_Item__c();

                        newItem.Maintenance_Request__c = nc.Id;
                        newItem.Equipment__c = emi.Equipment__c;
                        newItem.Quantity__c = emi.Quantity__c;

                        insertList.add(newItem);
                    }
                }
            }

            if (insertList.size() > 0) {
                insert insertList;
            }
        }
    } 

    /*
        Method calculates the due date for the next Maintenance Request
        Populate a map of aggregate results and days to add, and return it
    */
    public static Map<String, Integer> nextDateHelper(List<Case> caseList) {
        Map<String, Integer> dueDate = new Map<String, Integer>();
        Map<Id,Case> keyMap = new Map<Id,Case>(caseList);

        // Query the database for maintenance cycle information
        List<AggregateResult> resultsList = [
            SELECT Maintenance_Request__c cId, MIN(Equipment__r.Maintenance_Cycle__c) cycle 
            FROM Equipment_Maintenance_Item__c 
            WHERE Maintenance_Request__c 
            IN :keyMap.keySet() 
            AND Equipment__r.Maintenance_Cycle__c != null 
            GROUP BY Maintenance_Request__c
        ]; 
        // System.debug('resultsList: ' + resultsList);

        // Populate the dueDate map with the update date and the number of days to add
        for (AggregateResult ar : resultsList) {
            String updateDate = String.valueOf(ar.get('cId'));

            Integer daysToAdd = 0;
            if (ar.get('cycle') != null) {
                daysToAdd += Integer.valueOf(ar.get('cycle'));
            }

            dueDate.put(updateDate, daysToAdd);
        }

        return dueDate;
    }

    /*
        Method returns all maintenance items associated with Maintenance Requests that have been closed
    */
    public static Map<String, List<Equipment_Maintenance_Item__c>> maintenanceItemHelper(List<Case> caseList) {
        Map<String,List<Equipment_Maintenance_Item__c>> maintenanceItemMap = new Map<String,List<Equipment_Maintenance_Item__c>>();
        Map<Id,Case> caseMap = new Map<Id,Case>(caseList);
        List<Equipment_Maintenance_Item__c> emiList = [
            SELECT Id, Maintenance_Request__c, Equipment__c, Quantity__c
            FROM Equipment_Maintenance_Item__c
            WHERE Maintenance_Request__c 
            IN :caseMap.keySet()
        ];

        for (Equipment_Maintenance_Item__c item : emiList) {
            if (maintenanceItemMap.containsKey(item.Maintenance_Request__c)) {
                List<Equipment_Maintenance_Item__c> temp = maintenanceItemMap.get(item.Maintenance_Request__c);
                temp.add(item);
                maintenanceItemMap.put(item.Maintenance_Request__c, temp);
            } else {
                maintenanceItemMap.put(item.Maintenance_Request__c, new List<Equipment_Maintenance_Item__c>{item});
            }
        }

        return maintenanceItemMap;
    }
}