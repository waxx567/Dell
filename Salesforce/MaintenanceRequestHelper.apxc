public with sharing class MaintenanceRequestHelper {
    /*
        Globals
    */
    static String CLOSED = 'Closed';
    static String REPAIR = 'Repair';
    static String ROUTINE_MAINTENANCE = 'Routine Maintenance';

    /*
        Method handles instance where an update occurs on a Maintenance Request
        Takes a list of cases as input which we are calling newCases
    */
    public static void afterUpdateHandler(List<Case> newCases) {
        List<Case> closedCases = new List<Case>();

        for (Case nc : newCases) {
            // If cases in the list have been closed , and are of Type 'Repair' or 'Routine Maintenance'
            if (nc.Status == CLOSED && (nc.Type == REPAIR || nc.Type == ROUTINE_MAINTENANCE)) {
                closedCases.add(nc);
            }
        }

        if (closedCases.size() > 0) {
            // Call the helper method on the closed cases list
            MaintenanceRequestHelper.updateWorkOrders(closedCases);
        }
    }
    
    /*
        Method to create a new Routine Maintenance Request when any Maintenance Request is closed
    */
    public static void updateworkOrders(List<Case> caseList) {
        List<Case> newCaseList = new List<Case>();
        List<Equipment_Maintenance_Item__c> insertList = new List<Equipment_Maintenance_Item__c>();
        // Call helper method to get date of next request
        Map<Id, Integer> nextMaintenance = MaintenanceRequestHelper.maintenanceDateHelper(caseList); 
        // Call helper method to retrieve items to be cloned for new request
        Map<String, List<Equipment_Maintenance_Item__c>> maintenanceItems = maintenanceItemHelper(caseList); 

        for (Case c : caseList) {
            Case newCase = new Case();

            // Clone values
            newCase.Vehicle__c = c.Vehicle__c;
            newCase.Type = ROUTINE_MAINTENANCE;
            newCase.Subject = ROUTINE_MAINTENANCE;
            newCase.Date_Reported__c = Date.today();
            newCase.Cloned_Case_Id__c = c.Id;

            // Assign maintenance request date
            if (nextMaintenance.get(c.Id) != null) {
                newCase.Date_Due__c = Date.today().addDays(nextMaintenance.get(c.Id));
            } else {
                newCase.Date_Due__c = Date.today();
            }

            newCaseList.add(newCase);
        }

        if (newCaseList.size() > 0) {

            insert newCaseList;

            for (Case nc : newCaseList) {
                List<Equipment_Maintenance_Item__c> itemList = maintenanceItems.get(nc.Cloned_Case_Id__c);

                if (itemList.size() > 0) {

                    for (Equipment_Maintenance_Item__c emi : itemList) {
                        Equipment_Maintenance_Item__c newItem = new Equipment_Maintenance_Item__c();

                        newItem.Maintenance_Request__c = nc.Id;
                        newItem.Equipment__c = emi.Equipment__c;
                        newItem.Quantity__c = emi.Quantity__c;

                        insertList.add(newItem);
                    }
                }
            }

            if (insertList.size() > 0) {
                insert insertList;
            }
        }
    } 

    /*
        Method calculates the due date for the next Maintenance Request
    */
    public static Map<String, Integer> maintenanceDateHelper(List<Case> caseList) {
        Map<String, Integer> dueDate = new Map<String, Integer>();
        Map<String,Integer> caseKeyNap = new Map<String,Integer>();
        List<AggregateResult> resultsList = [
            SELECT Maintenance_Request__c cld, MIN(Equipment__r.Maintenance_Cycle__c)cycle 
            FROM Equipment_Maintenance_Item__c 
            WHERE Maintenance_Request__c 
            IN :caseKeyNap.keySet() 
            AND Equipment__r.Maintenance_Cycle__c != null 
            GROUP BY Maintenance_Request__c
        ]; 

        for (AggregateResult ar : resultsList) {
            Integer addDays = 0;
            String strId = String.valueOf(ar.get('Id'));
            if (ar.get('cycle') != null) {
                addDays += Integer.valueOf(ar.get('cycle'));
            }
        }
    }

    /*
        Method fetches all maintenance items associated with Maintenance Requests that have been closed
    */
    public static Map<String, List<Equipment_Maintenance_Item__c>> maintenanceItemHelper(List<Case> caseList) {
        
    }
}