public class SinglyLinkedList {
    /*
    Implement a Linked List
    A linked list is a fundamental data structure in computer science. Linked data structures are used in heaps, graphs and trees.
    In this problem you need to implement a basic singly linked list. You are given a class and basic method signatures as well as a Node class. You will need to implement the following...
    A constructor to set the initial state of the class
    The method addToFront() it accepts an integer and puts it at the front of the list. This should be a constant time operation.
    the method removeFromFront(). This removes the element at the front of the list and returns its value. It should be a constant time operation. If the list is empty return null
    The method size(). This should return the current size of the list
    The method addToTail(). This adds an element to the end of the list. See if you can find a way to do it in constant time as a challenge
    The method removeFromTail(). Remove the last element in the list and return its value. If the list is empty return null
    Example 1
    LinkedList linkedList = new LinkedList();
    linkedList.addToFront(1);
    linkedList.addToFront(2);
    linkedList.size(); // 2
    linkedList.removeFromFront() // 2
    linkedList.size()// 1
    Example 2
    LinkedList LinkedList = new LinkedList();
    linkedList.addToTail(5);
    linkedList.addToTail(6);
    linkedList.addToFront(1);
    linkedList.addToFront(2);
    linkedList.size(); // 4
    linkedList.removeFromTail() // 6
    linkedList.removeFromTail() // 5
    linkedList.removeFromTail() // 1
    linkedList.removeFromFront() // 2
    linkedList.removeFromFront() // null
    linkedList.size() == 0;
    Hint: If you are not familiar with this data structure it will help to watch a video tutorial. https://www.youtube.com/watch?v=uX5ADjhTZKY
    */
    public class LinkedList{

        // `head` represents the first node of the list.
        public Node head { get; private set; }
        // `tail` represents the last node of the list.
        public Node tail { get; private set; }
    
        // Constructor initializes an empty LinkedList by setting both head and tail to null.
        public LinkedList() {
            this.head = null;
            this.tail = null;
        }
        
        // Add a new node with the given value to the front of the list.
        public void addToFront(Integer value){
            // Create a new node with the provided value.
            Node newNode = new Node(value);
    
            // If the list is empty, the new node is both the head and tail.
            if (this.head == null) {
                this.head = newNode;
                this.tail = this.head;
            } else {
                // Otherwise, set the new node's next reference to the current head.
                newNode.next = this.head;
                // Update the head to be the new node.
                this.head = newNode;
            }
        }
    
        // Remove the node at the front of the list and return its value.
        public Integer removeFromFront(){
            // If the list is empty, return null.
            if (this.head == null) {
                return null;
            }
    
            // Store the current head node to be removed.
            Node remove = this.head;
            // Move the head to the next node in the list.
            this.head = this.head.next;
    
            // If the list is now empty after removal, set tail to null.
            if (this.head == null) {
                this.tail = null;
            }
    
            // Return the value of the removed node.
            return remove.data;
        }
    
        // Add a new node with the given value to the end (tail) of the list.
        public void addToTail(Integer value){
            // Create a new node with the provided value.
            Node newNode = new Node(value);
    
            // If the list is empty, the new node is both the head and tail.
            if (this.head == null) {
                this.head = newNode;
                this.tail = this.head;
            } else {
                // Otherwise, set the current tail's next reference to the new node.
                this.tail.next = newNode;
                // Update the tail to be the new node.
                this.tail = newNode;
            }
        }
    
        // Remove the node at the end (tail) of the list and return its value.
        public Integer removeFromTail(){
            // If the list is empty, return null.
            if (this.head == null) {
                return null;
            }
    
            // If there's only one node in the list, remove it and set both head and tail to null.
            if (this.head == this.tail) {
                Node temp = this.head;
                this.head = null;
                this.tail = null;
                return temp.data;
            }
    
            // Traverse the list to find the node just before the tail.
            Node current = this.head;
            while (current.next != this.tail) {
                current = current.next;
            }
    
            // Store the value of the tail node to be removed.
            Integer value = this.tail.data;
            // Update the tail to be the current node.
            this.tail = current;
            // Set the new tail's next reference to null.
            this.tail.next = null;
    
            // Return the value of the removed node.
            return value;
        }
    
        // Return the number of nodes in the list.
        public Integer size(){
            Integer count = 0;
            Node current = this.head;
            
            // Traverse the list, counting each node.
            while (current != null) {
                count++;
                current = current.next;
            }

            // Return the total count.
            return count;
        }    
    }
    
    public class Node{
        // `data` holds the value stored in the node.
        Integer data;
        // `next` is a reference to the next node in the list.
        Node next;
    
        // Constructor initializes the node with a given value.
        public Node(Integer data) {
            this.data = data;
            this.next = null;  // Explicitly set next to null for clarity.
        }
    }
}