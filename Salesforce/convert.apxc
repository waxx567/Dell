public class convert {

    public static String convert15to18DigitId(String fifteenDigit) {
        // Validate input
        if (fifteenDigit == null || fifteenDigit.length() != 15) {
            return '-1';
        }

        List<String> characters = new List<String>{
            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 
            'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 
            'Y', 'Z', '0', '1', '2', '3', '4', '5'
        };
        
        List<String> binaries = new List<String>{
            '000000', '000001', '000010', '000011', '000100', '000101',
            '000110', '000111', '001000', '001001', '001010', '001011',
            '001100', '001101', '001110', '001111', '010000', '010001',
            '010010', '010011', '010100', '010101', '010110', '010111',
            '011000', '011001', '011010', '011011', '011100', '011101',
            '011110', '011111'
        };

        String suffix = '';

        List<String> segments = new List<String>();
        String firstSegment = fifteenDigit.substring(0, 5);
        String middleSegment = fifteenDigit.substring(5, 10);
        String lastSegment = fifteenDigit.substring(10, 15);
        segments.add(firstSegment);
        segments.add(middleSegment);
        segments.add(lastSegment);
        
        System.debug('Segments list: ' + segments);

        // Handle firstSegment
        String[] firstChars = firstSegment.split('');
        System.debug('firstChars: ' + firstChars); 
        String firstBinaryString = '';
        // Loop over first segment character list
        for (String f : firstChars) {
            if (f.isNumeric() || f.isAllLowerCase()) {
                firstBinaryString += '0';
            }
            else {
                firstBinaryString += '1';
            }
        }
        System.debug('firstBinaryString: ' + firstBinaryString);
        String firstSuffix = allCharacters.get(firstBinaryString);
        System.debug('firstSuffix: ' + firstSuffix); 

        for (Integer i = 0; i < binaries.size(); i++) {
            if (binaries[i] == firstBinaryString) {
                suffix += characters[i];
            }
        }

        // Handle middleSegment
        String[] middleChars = middleSegment.split('');
        System.debug('middleChars: ' + middleChars); 
        String middleBinaryString = '';
        // Loop over middle segment character list
        for (String m : middleChars) {
            if (m.isNumeric() || m.isAllLowerCase()) {
                middleBinaryString += '0';
            }
            else {
                middleBinaryString += '1';
            }
        }
        System.debug('middleBinaryString: ' + middleBinaryString);
        String middleSuffix = allCharacters.get(middleBinaryString);
        System.debug('middleSuffix: ' + middleSuffix);

        for (Integer j = 0; j < binaries.size(); j++) {
            if (binaries[j] == firstBinaryString) {
                suffix += characters[j];
            }
        }

        // Handle lastSegment
        String[] lastChars = lastSegment.split('');
        System.debug('lastChars: ' + lastChars); 
        String lastBinaryString = '';
        // Loop over last segment character list
        for (String l : lastChars) {
            if (l.isNumeric() || l.isAllLowerCase()) {
                lastBinaryString += '0';
            }
            else {
                lastBinaryString += '1';
            }
        }
        System.debug('lastBinaryString: ' + lastBinaryString);
        String lastSuffix = allCharacters.get(lastBinaryString);
        System.debug('lastSuffix: ' + lastSuffix);

        for (Integer k = 0; k < binaries.size(); k++) {
            if (binaries[k] == firstBinaryString) {
                suffix += characters[k];
            }
        }

        System.debug(fifteenDigit + suffix);
        return fifteenDigit + suffix;
    }
}