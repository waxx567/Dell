public class validAnagram {
    /*
    Two words are considered valid anagrams if they are composed of the exact same letters with the exact same frequency. Implement the method isAnagram that takes as input two strings s1 and s2, and returns true if the two words are anagrams. Assume that the two strings contain only lowercase alphabets a-z.
    */
    public static boolean isAnagram(String s1, String s2) {
        // null check
        if (s1 == null || s2 == null) {
            return false;
        }
    
        // Maps for comparisons
        Map<String, Integer> map1 = new Map<String, Integer>();
        Map<String, Integer> map2 = new Map<String, Integer>();
    
        for (Integer i = 0; i < s1.length(); i++) {
            // Convert string 1 integer index to the character at that index
            List<Integer> charArr = new List<Integer>{ s1.charAt(i) };
            String convertedChar = String.fromCharArray(charArr);
    
            if (map1.containsKey(convertedChar)) {
                Integer i1 = map1.get(convertedChar);
                i1++;
                map1.put(convertedChar, i1);
            } else {
                map1.put(convertedChar, 1);
            }
            // System.debug(map1);
        }
    
        for (Integer i = 0; i < s2.length(); i++) {
            // Convert string 2 integer index to the character at that index
            List<Integer> charArr = new List<Integer>{ s2.charAt(i) };
            String convertedChar = String.fromCharArray(charArr);
    
            if (map2.containsKey(convertedChar)) {
                Integer i2 = map2.get(convertedChar);
                i2++;
                map2.put(convertedChar, i2);
            } else {
                map2.put(convertedChar, 1);
            }
            // System.debug(map2);
        }
    
        // Compare the maps
        if (map1.equals(map2)) {
            return true;
        } else {
            return false;
        }
    }
}