public class ValidAnagram {
    /*
    Two words are considered valid anagrams if they are composed of the exact same letters with the exact same frequency. Implement the method isAnagram that takes as input two strings s1 and s2, and returns true if the two words are anagrams. Assume that the two strings contain only lowercase alphabets a-z.
    Hint: A map can be used to store the frequency of each character. 
    Hint: Sorting the string and comparing is another way to solve it.
    */
    public static boolean isAnagram(String s1, String s2) {
        
        if (s1 == null || s2 == null) {
            return false;
        }
    
        // Maps for comparisons
        Map<String, Integer> map1 = new Map<String, Integer>();
        Map<String, Integer> map2 = new Map<String, Integer>();
    
        for (Integer i = 0; i < s1.length(); i++) {
            // Convert string s1 integer index to the character at that index
            List<Integer> charArr = new List<Integer>{ s1.charAt(i) };
            String convertedChar = String.fromCharArray(charArr);
    
            // If the converted character is in map 1
            if (map1.containsKey(convertedChar)) {
                // Get the frequency value of the character and increment it by 1
                Integer i1 = map1.get(convertedChar);
                i1++;
                // Add the new value to the map
                map1.put(convertedChar, i1);
            } else {
                // Otherwise the frequency is 1 as it's the first
                map1.put(convertedChar, 1);
            }
            // System.debug(map1);
        }
    
        for (Integer i = 0; i < s2.length(); i++) {
            // Convert string s2 integer index to the character at that index
            List<Integer> charArr = new List<Integer>{ s2.charAt(i) };
            String convertedChar = String.fromCharArray(charArr);
    
            // If the converted character is in map 2
            if (map2.containsKey(convertedChar)) {
                // Get the frequency value of the character and increment it by 1
                Integer i2 = map2.get(convertedChar);
                i2++;
                // Add the new value to the map
                map2.put(convertedChar, i2);
            } else {
                // Otherwise the frequency is 1 as it's the first
                map2.put(convertedChar, 1);
            }
            // System.debug(map2);
        }
    
        // Compare the maps
        if (map1.equals(map2)) {
            return true;
        } else {
            return false;
        }
    }
}