public class CountAndSayTheSequence {
    /*
    Apex practice problem #123
    Can you count and say what characters the string '11121' has?

    It has three '1' characters, followed by one '2', and finally one '1'. Or to put it another way, it has 3 1s, 1 2s and 1 1, which we could write as the string '311211'. For this problem, we define this transformation as "counting and saying". Counting and saying '11121' is '311211'.
    For this problem, you have to generate a sequence given an Integer N. We define base case for N = 1 as '1'. For N > 1, count and say the sequence generated by N - 1.
    Examples:
    countAndSay(1) == '1' // base case
    countAndSay(2) == '11' // previous sequence has one 1.
    countAndSay(3) == '21' // previous sequence has two 1s
    countAndSay(4) == '1211' // previous sequence has one 2, one 1
    countAndSay(5) == '111221' // ... and so on
    countAndSay(6) == '312211'
    countAndSay(7) == '13112221'
    Write a function that takes N (sequence number) as a parameter and outputs the Nth sequence. 1<= N <= 20
    Hint: To get the answer for N, you need to get the answer for N - 1. To get the answer to N - 1, you need the answer to N-2. This means you need to calculate ALL sequences 1 to N.
    Hint: Break the problem into smaller pieces. First, write code to count and say a String.
    Hint: Explore the concept of method recursion.
    */

    /*
    Plan:
    1.  Write a recursive function to handle the sequence generation for N.
    2.  Write a helper function that counts consecutive characters in a string (i.e., the "say" part of "count and say").
    */ 
    public string countAndSay(integer N) {
        // Main recursive method
        // Base case
        if (N == 1) {
            return '1';
        }

        // Recursive call to get the previous sequence
        String previousSequence = countAndSay(N - 1);

        // Generate the current sequence by counting the previous sequence
        return countCharacters(previousSequence);
    }

    public String countCharacters(String sequence) {
        // Helper function to count and say a sequence
        StringBuilder result = new StringBuilder();  // Use StringBuilder for efficiency (see explanation below)
        Integer count = 1;     
        
        for (Integer i = 0; i < sequence.length(); i++) {
            // If the next character is the same, increment the count
            if (i + 1 < sequence.length() && sequence[i] == sequence[i + 1]) {
                count++;
            } else {
                // Append the count and character to the result
                result.append(count);
                result.append(sequence[i]);
                count = 1;  // Reset the count for the next character
            }
        }
    }
}

/*
In Apex, strings are immutable, meaning that every time you modify a string (e.g., concatenate something to it), a new string object is created. This can be inefficient, especially when you're performing many concatenations inside a loop, since each operation creates a new string and discards the old one.
StringBuilder helps solve this inefficiency by using a mutable buffer internally. Instead of creating a new string every time you append to it, StringBuilder modifies the existing buffer, making repeated string modifications faster and more memory-efficient.
Use StringBuilder whenever you're manipulating strings in loops or doing frequent concatenations.
For simple, one-off concatenations, normal string concatenation (+) is fine.
*/