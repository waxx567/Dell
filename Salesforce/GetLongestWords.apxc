public class GetLongestWords {
    // Create a function that takes in a String “input” and return the longest words in the “input” in a List<String>. If there are no words, return an empty List<String>. For example, if the function is given the input ‘The dogs like to bark.’, then [‘dogs’, ‘like’, ‘bark’] is returned.
    public static List<String> longestWords(String input) {
        // If there are no words
        if (input.length() == 0) {
            return new List<String>();
        }        
        // Split the input string into words and store them in a list
        List<String> words = input.split(' ');
        // Create a list to hold the words that are longest
        List<String> answers = new List<String>();
        // Set a variable that holds the longest word length to the length of the first word
        Integer longest = words[0].length();
        for (Integer i = 0; i < words.size(); i++) {
            if 
        }



        // List<Integer> wordLengths = new List<Integer>();
        // for (String word : words) {
        //     wordLengths.add(word.length());
        // } 
        



        // Remove full stop from the last word
        words[words.size() - 1] = words[words.size() - 1].removeEnd('.');
        // Set a variable that holds the longest word length to the length of the first word
        Integer longest = words[0].length();
        // Create map to store key/value pairs of words and their lengths
        Map<String,Integer> keysValues = new Map<String,Integer>();
        for (String word : words) {            
            keysValues.put(word, word.length());
        }
        for (Integer i = 0; i < keysValues.values().size(); i++) {
            if ()
        }

        return new List<String>();
    }
}