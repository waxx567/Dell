public class SortedList {
    /*
    A list is considered to be sorted ascending when no element in the list is smaller than the preceding element if one is present. Similarly, a list is considered sorted descending if no element in the list is larger than the preceding element if any.
    Implement the method isSorted that takes as input a list of integers numbers, returns true if the list is sorted in any direction (acsending or descending), and returns false otherwise.
    Example: isSorted(new List<Integer> {5, 2, 0, -1}) evaluates to true because the input list is sorted descending.
    */
    public static boolean isSorted(List<Integer> numbers) {

    }
}

/*
public boolean isSorted(List<Integer> numbers) {
    if (numbers.isEmpty() || numbers.size() <= 2){
        return true;
    }

    Integer i = 0;

    // Determine the sort order by finding the first non-equal pair
    while (i < numbers.size() - 1 && numbers[i].equals(numbers[i + 1])) {
        i++;
    }

    // If no non-equal pair is found, the list consists of equal elements
    if (i == numbers.size() - 1) {
        return true;
    }

    // Determines if the list is ascending or descending
    boolean ascending = numbers[i] < numbers[i + 1];

    // Check the list
    for (Integer j = 0; j < numbers.size() - 1; j++) {
        if (ascending && numbers[j] > numbers[j + 1]) {
            return false;
        }
        if (!ascending && numbers[j] < numbers[j + 1]) {
            return false;
        }
    }
    return true;
}
*/